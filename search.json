[
  {
    "objectID": "pages/pres_intoduction_to_R.html",
    "href": "pages/pres_intoduction_to_R.html",
    "title": "Introduction to R",
    "section": "",
    "text": "Introduction to R slides for Software Tools (YSB801E).\n\nIntroduction to R\n\nPreliminary\nSimple Manipulations\nComplex Data Types\nLoops and Control Flow\nReading Data from Files\nR Packages\nWriting your own functions\nApply Function Family\nxts Package\nData Manipulation"
  },
  {
    "objectID": "presentations/R/loops_and_control_flow.html#conditional-execution-if-statements",
    "href": "presentations/R/loops_and_control_flow.html#conditional-execution-if-statements",
    "title": "Introduction to R",
    "section": "Conditional execution: if statements",
    "text": "Conditional execution: if statements\n\nif (expr_1) expr_2 else expr_3\n\nThe “short-circuit” operators && and || are often used as part of the condition in an if statement. Whereas & and | apply element-wise to vectors, && and || apply to vectors of length one, and only evaluate their second argument if necessary.\n\n\n\nage &lt;- 12\nif (age &lt; 13) {\n  print(\"Watch this with your Mom\")\n} else {\n  print(\"Enjoy the movie!\")\n}\n\n[1] \"Watch this with your Mom\"\n\n\n\n\nx &lt;- 0\nif (x &gt; 0) {\n  print(\"Positive Number\")\n} else if (x &lt; 0) {\n  print(\"Negative Number\")\n} else {\n  print(\"Zero\")\n}\n\n[1] \"Zero\"\n\n\n\n\n\nage &lt;- 21\nprint(ifelse(age &lt; 13, \"Watch this with your Mom\", \"Enjoy the movie!\"))\n\n[1] \"Enjoy the movie!\"\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?`if`; ?ifelse\n\n\n\n\nLoops and control flow"
  },
  {
    "objectID": "presentations/R/loops_and_control_flow.html#for-loops-repeat-and-while",
    "href": "presentations/R/loops_and_control_flow.html#for-loops-repeat-and-while",
    "title": "Introduction to R",
    "section": "for loops, repeat and while",
    "text": "for loops, repeat and while\n\nfor (name in expr_1) expr_2\nrepeat expr_2\nwhile (condition) expr_2\n\n\nexpr_1 is a vector expression (often a sequence like 1:20) expr_2 is often a grouped expression with its sub-expressions written in terms of the dummy name. expr_2 is repeatedly evaluated as name ranges through the values in the vector result of expr_1.\nOnly way to terminate repeat loops is break.\nThe next statement can be used to discontinue one particular cycle and skip to the “next”.\n\nWARNING: AVOID FOR-LOOP STATEMENTS AS MUCH AS POSSIBLE.\n\n\n\n\n\n\nSEE ALSO\n\n\n?`for`; ?`repeat`; ?`while`\n\n\n\n\nLoops and control flow"
  },
  {
    "objectID": "presentations/R/loops_and_control_flow.html#for-loops-repeat-and-while-1",
    "href": "presentations/R/loops_and_control_flow.html#for-loops-repeat-and-while-1",
    "title": "Introduction to R",
    "section": "for loops, repeat and while",
    "text": "for loops, repeat and while\nCalculate factorial for n = 5.\n\nn &lt;- 5\n\n\n\n\n# Factorial calculation\n# with for-loop\nresult &lt;- 1\nfor (i in 2:n) {\n  result &lt;- result * i\n}\nprint(result)\n\n[1] 120\n\n\n\n\n# Factorial calculation\n# with while\nresult &lt;- 1\ni &lt;- 2\nwhile (i &lt;= n) {\n  result &lt;- result * i\n  i &lt;- i + 1\n}\nprint(result)\n\n[1] 120\n\n\n\n\n# Factorial calculation\n# with repeat\nresult &lt;- 1\ni &lt;- 2\nrepeat {\n  if (i &gt; n) {\n    break\n  }\n  result &lt;- result * i\n  i &lt;- i + 1\n}\nprint(result)\n\n[1] 120\n\n\n\n\n\n\nfor-loop\n\nn &lt;- 5\nsum_of_squares &lt;- 0\nfor (i in 1:n) {\n  sum_of_squares &lt;- sum_of_squares + i^2\n}\nprint(sum_of_squares)\n\n[1] 55\n\n\n\nwhile\n\nset.seed(123) # Set seed for reproducibility\ncount &lt;- 0\nroll &lt;- 0\nwhile (roll != 6) {\n  roll &lt;- sample(1:6, 1)  # Simulate rolling a die\n  count &lt;- count + 1\n}\ncat(\"I found\", roll, \"at roll\", count, \"\\n\")\n\nI found 6 at roll 2 \n\n\n\nrepeat\n\ndivisible_by &lt;- 7\nnum &lt;- 8\nrepeat {\n  if (num %% divisible_by == 0) {\n    print(num)\n    break\n  }\n  num &lt;- num + 1\n}\n\n[1] 14\n\n\n\n\n\nLoops and control flow"
  },
  {
    "objectID": "presentations/R/loops_and_control_flow.html#for-loops-repeat-and-while-2",
    "href": "presentations/R/loops_and_control_flow.html#for-loops-repeat-and-while-2",
    "title": "Introduction to R",
    "section": "for loops, repeat and while",
    "text": "for loops, repeat and while\n\nfor (i in 2:3) {\n  plot(dt.pm10[,1], dt.pm10[,i], type = \"l\", main = paste0(\"plot\", i))\n}\n\n\ni &lt;- 2\nrepeat {\n  plot(dt.pm10[,1], dt.pm10[,i], type = \"l\", main = paste0(\"plot\", i))\n  i &lt;- i + 1\n  if (i == 3) break\n}\n\n\ni &lt;- 2\nwhile (i &lt; 4) {\n  plot(dt.pm10[,1], dt.pm10[,i], type = \"l\", main = paste0(\"plot\", i))\n  i &lt;- i + 1\n}\n\n\nfor (i in 2:4) {\n  if (i == 3) next\n  plot(dt.pm10[,1], dt.pm10[,i], type = \"l\", main = paste0(\"plot\", i))\n}\n\n\nLoops and control flow\n\n\n\n\n\n\n\nIntroduction to R"
  },
  {
    "objectID": "presentations/R/data_manipulation.html#what-is-data-manipulation",
    "href": "presentations/R/data_manipulation.html#what-is-data-manipulation",
    "title": "Introduction to R",
    "section": "What is data manipulation?",
    "text": "What is data manipulation?\nData manipulation/transformation is combination of following operations:\n\nCreating data: Creating/transforming data in/to specific formats.\nSubsetting/Filtering: Selecting a subset of the data based on certain criteria.\nSorting: Arranging data in a specific order (ascending or descending).\nMerging and joining: Combining data from different sources based on common identifiers or keys.\nReshaping: Changing shape of the data from wide to long formats (or vice versa).(wide to long or vice versa)\nTransforming: Creating new variables from existing ones, such as computing new columns as linear combinations of other columns or normalizing data etc.\nAggregating: Summarizing data, which could involve computing sums, averages, counts, maxima, minima, etc., often grouped by certain categories.\nCleaning: Improving data quality by handling missing values, removing duplicates, correcting errors, or standardizing formats.\n\n\nData Manipulation"
  },
  {
    "objectID": "presentations/R/data_manipulation.html#why-do-we-need",
    "href": "presentations/R/data_manipulation.html#why-do-we-need",
    "title": "Introduction to R",
    "section": "Why do we need?",
    "text": "Why do we need?\n\nEasier exploration: Data manipulation is a crucial step in the data analysis process, as it helps in preparing the raw data into a format that is more suitable for exploration, analysis, and visualization.\nSupporting Decision Making: Effective data manipulation leads to easier analysis and more accurate results, thereby forming a foundation for data-driven decision-making.\nImproving Efficiency: To automate repetitive tasks and streamline data processing workflows and to enhance performance and speed of data analysis.\nData Reduction: To reduce the size of the data by removing unnecessary information, which can be useful for speeding up analysis and reducing storage requirements or to focus on relevant information.\n\n\nData Manipulation"
  },
  {
    "objectID": "presentations/R/data_manipulation.html#overview",
    "href": "presentations/R/data_manipulation.html#overview",
    "title": "Introduction to R",
    "section": "Overview",
    "text": "Overview\n\nData manipulation with time series data (xts)\n\nIrregularr to Regular time-series\nImputation of missing values\nAggregation in time\nAverages for the same months/days/hours\n\nUsing sapply\nUsing aggregate\nUsing split-Apply-Combine\n\n\nReshaping data\n\nUnderstanding Long and Wide Data Formats\nUsing reshape function\nUsing tidyr package\n\n\n\nData Manipulation"
  },
  {
    "objectID": "presentations/R/data_manipulation.html#data-manipulation-with-xts",
    "href": "presentations/R/data_manipulation.html#data-manipulation-with-xts",
    "title": "Introduction to R",
    "section": "Data Manipulation with xts",
    "text": "Data Manipulation with xts\n\nIrregularr to Regular time-series\nImputation of missing values\nAggregation in time\nAverages for the same months/days/hours\n\nUsing sapply\nUsing aggregate\nUsing split-Apply-Combine\n\n\n\nData Manipulation with xts"
  },
  {
    "objectID": "presentations/R/data_manipulation.html#reshaping-data",
    "href": "presentations/R/data_manipulation.html#reshaping-data",
    "title": "Introduction to R",
    "section": "Reshaping data",
    "text": "Reshaping data\n\nUnderstanding Long and Wide Data Formats\nUsing reshape function\nUsing tidyr package\n\n\nData Manipulation"
  },
  {
    "objectID": "presentations/R/data_manipulation.html#understanding-long-and-wide-data-formats",
    "href": "presentations/R/data_manipulation.html#understanding-long-and-wide-data-formats",
    "title": "Introduction to R",
    "section": "Understanding Long and Wide Data Formats",
    "text": "Understanding Long and Wide Data Formats\n\n\n\nLong format\n\n\n# Example long format data\ndata_long &lt;- data.frame(\n  City = c(\"Ankara\", \"Ankara\", \"Ankara\", \"Ankara\",\n           \"Istanbul\", \"Istanbul\", \"Istanbul\",\n           \"Istanbul\"),\n  Year = c(2020, 2021, 2022, 2023,\n           2020, 2021, 2022, 2023),\n  Pollution = c(40, 35, 47, 12, 50, 45, 61, 25)\n)\nprint(data_long)\n\n      City Year Pollution\n1   Ankara 2020        40\n2   Ankara 2021        35\n3   Ankara 2022        47\n4   Ankara 2023        12\n5 Istanbul 2020        50\n6 Istanbul 2021        45\n7 Istanbul 2022        61\n8 Istanbul 2023        25\n\nstr(data_long)\n\n'data.frame':   8 obs. of  3 variables:\n $ City     : chr  \"Ankara\" \"Ankara\" \"Ankara\" \"Ankara\" ...\n $ Year     : num  2020 2021 2022 2023 2020 ...\n $ Pollution: num  40 35 47 12 50 45 61 25\n\n\n\n\nWide format\n\n\n# Example wide format data\ndata_wide &lt;- data.frame(\n  City = c(\"Ankara\", \"Istanbul\"),\n  Y2020 = c(40, 50),\n  Y2021 = c(35, 45),\n  Y2022 = c(47, 61),\n  Y2023 = c(12, 25)\n)\nprint(data_wide)\n\n      City Y2020 Y2021 Y2022 Y2023\n1   Ankara    40    35    47    12\n2 Istanbul    50    45    61    25\n\nstr(data_wide)\n\n'data.frame':   2 obs. of  5 variables:\n $ City : chr  \"Ankara\" \"Istanbul\"\n $ Y2020: num  40 50\n $ Y2021: num  35 45\n $ Y2022: num  47 61\n $ Y2023: num  12 25\n\n\n\n\n\nData Manipulation"
  },
  {
    "objectID": "presentations/R/index.html#assignment",
    "href": "presentations/R/index.html#assignment",
    "title": "Introduction to R",
    "section": "Assignment",
    "text": "Assignment\nUse always -&gt; or &lt;- symbol combination if you intend to an assignment\n\n# Assignment\nx &lt;- c(10.4, 5.6, 3.1, 6.4, 21.7)\nassign(\"x\", c(10.4, 5.6, 3.1, 6.4, 21.7))\nc(10.4, 5.6, 3.1, 6.4, 21.7) -&gt; x\ny &lt;- c(x, 0, x) # c is abbreviation for combine\n\n\n\n\nprint(y)\n\n [1] 10.4  5.6  3.1  6.4 21.7  0.0 10.4  5.6  3.1  6.4 21.7\n\n\n\n\n1/x\n\n[1] 0.09615385 0.17857143 0.32258065 0.15625000 0.04608295\n\n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?c | ?assign\n\n\n\n\nSimple Manipulations"
  },
  {
    "objectID": "presentations/R/index.html#vector-arithmetic",
    "href": "presentations/R/index.html#vector-arithmetic",
    "title": "Introduction to R",
    "section": "Vector arithmetic",
    "text": "Vector arithmetic\nThe elementary arithmetic operators: +, -,_*_, / and ^\n\nx ^ 2 # take the square\nsqrt(y) # square root\nx/y\nv &lt;- 2*x + y + 1\nlength(v) # what is the length of v? why?\n\nShorter vectors in the expression are recycled as often as need be (perhaps fractionally) until they match the length of the longest vector.\n\n\n\n\n\n\nSEE ALSO\n\n\n??\"arithmetic operations\" | ?log | ?exp | ?sin | ?cos | ?tan | ?sqrt\n\n\n\n\nSimple Manipulations"
  },
  {
    "objectID": "presentations/R/index.html#vector-arithmetic-1",
    "href": "presentations/R/index.html#vector-arithmetic-1",
    "title": "Introduction to R",
    "section": "Vector arithmetic",
    "text": "Vector arithmetic\nanything else? (max, min, sum, mean, var, std)\n\nsum(x) # sum of values in x vector\nsum(x)/length(x) # calculate mean\nmean(x) # easier mean calculation\nmin(x); max(x)\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?var | ?sd | ?range | ?sort | ?order | ?mean | ?sum | ?summary | ?abs\n\n\n\n\nSimple Manipulations"
  },
  {
    "objectID": "presentations/R/index.html#generate-regular-sequences",
    "href": "presentations/R/index.html#generate-regular-sequences",
    "title": "Introduction to R",
    "section": "Generate regular sequences",
    "text": "Generate regular sequences\n\n\n5:17\n\n\n [1]  5  6  7  8  9 10 11 12 13 14 15 16 17\n\n\n\n\n\n\nseq(-5, 5, by = 0.2)\n\n [1] -5.0 -4.8 -4.6 -4.4 -4.2 -4.0 -3.8 -3.6 -3.4 -3.2 -3.0\n[12] -2.8 -2.6 -2.4 -2.2 -2.0 -1.8 -1.6 -1.4 -1.2 -1.0 -0.8\n[23] -0.6 -0.4 -0.2  0.0  0.2  0.4  0.6  0.8  1.0  1.2  1.4\n[34]  1.6  1.8  2.0  2.2  2.4  2.6  2.8  3.0  3.2  3.4  3.6\n[45]  3.8  4.0  4.2  4.4  4.6  4.8  5.0\n\n\n\n\nseq(length = 51, from = -5, by = 0.2)\n\n [1] -5.0 -4.8 -4.6 -4.4 -4.2 -4.0 -3.8 -3.6 -3.4 -3.2 -3.0\n[12] -2.8 -2.6 -2.4 -2.2 -2.0 -1.8 -1.6 -1.4 -1.2 -1.0 -0.8\n[23] -0.6 -0.4 -0.2  0.0  0.2  0.4  0.6  0.8  1.0  1.2  1.4\n[34]  1.6  1.8  2.0  2.2  2.4  2.6  2.8  3.0  3.2  3.4  3.6\n[45]  3.8  4.0  4.2  4.4  4.6  4.8  5.0\n\n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?seq\n\n\n\n\nSimple Manipulations"
  },
  {
    "objectID": "presentations/R/index.html#repeat-an-object",
    "href": "presentations/R/index.html#repeat-an-object",
    "title": "Introduction to R",
    "section": "Repeat an object",
    "text": "Repeat an object\n\n\n\nrep(x, times = 5)\n\n [1] 10.4  5.6  3.1  6.4 21.7 10.4  5.6  3.1  6.4 21.7 10.4\n[12]  5.6  3.1  6.4 21.7 10.4  5.6  3.1  6.4 21.7 10.4  5.6\n[23]  3.1  6.4 21.7\n\n\n\n\nrep(x, each = 5)\n\n [1] 10.4 10.4 10.4 10.4 10.4  5.6  5.6  5.6  5.6  5.6  3.1\n[12]  3.1  3.1  3.1  3.1  6.4  6.4  6.4  6.4  6.4 21.7 21.7\n[23] 21.7 21.7 21.7\n\n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?rep\n\n\n\n\nSimple Manipulations"
  },
  {
    "objectID": "presentations/R/index.html#logical-vectors",
    "href": "presentations/R/index.html#logical-vectors",
    "title": "Introduction to R",
    "section": "Logical Vectors",
    "text": "Logical Vectors\n\nThe elements of a logical vector can have the values TRUE, FALSE, and NA (for “not available”).\nAlways use TRUE and FALSE, not T and F.\n\n\n\n5 &gt; 10\n\n\n[1] FALSE\n\n\n\n\n\nx &gt; 13\n\n\n[1] FALSE FALSE FALSE FALSE  TRUE\n\n\n\n\n\nas.numeric(x &gt; 13)\n\n\n[1] 0 0 0 0 1\n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?\"Comparison\"\n\n\n\n\nSimple Manipulations"
  },
  {
    "objectID": "presentations/R/index.html#missing-values",
    "href": "presentations/R/index.html#missing-values",
    "title": "Introduction to R",
    "section": "Missing Values",
    "text": "Missing Values\nWhen an element or value is “not available” or a “missing value” in the statistical sense, a place within a vector may be reserved for it by assigning it the special value NA.\n\nz &lt;- c(1:3, NA) # a vector contains an NA\n\n\n\nis.na(z) # which element(s) of z is NA?\n\n\n[1] FALSE FALSE FALSE  TRUE\n\n\n\n\n\nz == NA # wrong way!\n\n\n[1] NA NA NA NA\n\n\n\n\n\n0/0 # meaningless\n\n\n[1] NaN\n\n\n\nis.na(xx) is TRUE both for NA and NaN.\n\n\n\n\n\n\nSEE ALSO\n\n\n?is.na | ?is.finite\n\n\n\n\nSimple Manipulations"
  },
  {
    "objectID": "presentations/R/index.html#character-vectors",
    "href": "presentations/R/index.html#character-vectors",
    "title": "Introduction to R",
    "section": "Character vectors",
    "text": "Character vectors\nthey are denoted by a sequence of characters delimited by the double quote character.\n\n\nlabs &lt;- paste(c(\"X\",\"Y\"), 1:10, sep = \"\")\nprint(labs)\n\n\n [1] \"X1\"  \"Y2\"  \"X3\"  \"Y4\"  \"X5\"  \"Y6\"  \"X7\"  \"Y8\"  \"X9\" \n[10] \"Y10\"\n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?paste | ?paste0\n\n\n\n\nSimple Manipulations"
  },
  {
    "objectID": "presentations/R/index.html#indexing-selecting-and-modifying",
    "href": "presentations/R/index.html#indexing-selecting-and-modifying",
    "title": "Introduction to R",
    "section": "Indexing, selecting and modifying",
    "text": "Indexing, selecting and modifying\n\n\nprint(x) # What was x?\n\n\n[1] 10.4  5.6  3.1  6.4 21.7\n\n\n\n\n\nx[3] &lt;- NA # set 3th element of x to NA\nprint(x)\n\n\n[1] 10.4  5.6   NA  6.4 21.7\n\n\n\n\n\n!is.na(x) # The ones that are not NA\n\n\n[1]  TRUE  TRUE FALSE  TRUE  TRUE\n\n\n\n\n\n(non_na_x &lt;- x[!is.na(x)]) #non-NA values of x\n\n\n[1] 10.4  5.6  6.4 21.7\n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?`[[`\n\n\n\n\nSimple Manipulations"
  },
  {
    "objectID": "presentations/R/index.html#indexing-selecting-and-modifying-1",
    "href": "presentations/R/index.html#indexing-selecting-and-modifying-1",
    "title": "Introduction to R",
    "section": "Indexing, selecting and modifying",
    "text": "Indexing, selecting and modifying\n\n\n# create a random integer array to\n# represent month\nset.seed(2) # set seed for reproducibility\nmonth &lt;- round(runif(30, 1, 12))\n# get month names\n(char_month &lt;- month.abb[month])\n\n\n [1] \"Mar\" \"Sep\" \"Jul\" \"Mar\" \"Nov\" \"Nov\" \"Feb\" \"Oct\" \"Jun\"\n[10] \"Jul\" \"Jul\" \"Apr\" \"Sep\" \"Mar\" \"May\" \"Oct\" \"Dec\" \"Mar\"\n[19] \"Jun\" \"Feb\" \"Aug\" \"May\" \"Oct\" \"Mar\" \"May\" \"Jun\" \"Mar\"\n[28] \"May\" \"Dec\" \"Feb\"\n\n\n\n\n\nwhich(char_month == \"Jun\") # Which are June?\n\n\n[1]  9 19 26\n\n\n\n\n\nwhich(month == 6) # same as above\n\n\n[1]  9 19 26\n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?set.seed | ?runif | ?round | ?which | ?which.max | ?which.min\n\n\n\n\nSimple Manipulations"
  },
  {
    "objectID": "presentations/R/index.html#indexing-selecting-and-modifying-2",
    "href": "presentations/R/index.html#indexing-selecting-and-modifying-2",
    "title": "Introduction to R",
    "section": "Indexing, selecting and modifying",
    "text": "Indexing, selecting and modifying\n\n\n(char_month[1:12]) # select first 12 months\n\n\n [1] \"Mar\" \"Sep\" \"Jul\" \"Mar\" \"Nov\" \"Nov\" \"Feb\" \"Oct\" \"Jun\"\n[10] \"Jul\" \"Jul\" \"Apr\"\n\n\n\n\n\n(char_month[-(1:20)]) # exclude first 20\n\n\n [1] \"Aug\" \"May\" \"Oct\" \"Mar\" \"May\" \"Jun\" \"Mar\" \"May\" \"Dec\"\n[10] \"Feb\"\n\n\n\n\n\n# exclude June from vector\n(char_month[-which(month == 6)])\n\n\n [1] \"Mar\" \"Sep\" \"Jul\" \"Mar\" \"Nov\" \"Nov\" \"Feb\" \"Oct\" \"Jul\"\n[10] \"Jul\" \"Apr\" \"Sep\" \"Mar\" \"May\" \"Oct\" \"Dec\" \"Mar\" \"Feb\"\n[19] \"Aug\" \"May\" \"Oct\" \"Mar\" \"May\" \"Mar\" \"May\" \"Dec\" \"Feb\"\n\n\n\n\nSimple Manipulations"
  },
  {
    "objectID": "presentations/R/index.html#indexing-selecting-and-modifying-3",
    "href": "presentations/R/index.html#indexing-selecting-and-modifying-3",
    "title": "Introduction to R",
    "section": "Indexing, selecting and modifying",
    "text": "Indexing, selecting and modifying\n\n\n# use months and month names together\n# set names of month\nnames(month) &lt;- char_month\nprint(month)\n\n\nMar Sep Jul Mar Nov Nov Feb Oct Jun Jul Jul Apr Sep Mar May \n  3   9   7   3  11  11   2  10   6   7   7   4   9   3   5 \nOct Dec Mar Jun Feb Aug May Oct Mar May Jun Mar May Dec Feb \n 10  12   3   6   2   8   5  10   3   5   6   3   5  12   2 \n\n\n\n\n\n(month[(month == 6)])\n\n\nJun Jun Jun \n  6   6   6 \n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?names | ?colnames | ?rownames\n\n\n\n\nSimple Manipulations"
  },
  {
    "objectID": "presentations/R/index.html#atomic-objects",
    "href": "presentations/R/index.html#atomic-objects",
    "title": "Introduction to R",
    "section": "Atomic Objects",
    "text": "Atomic Objects\n\nAtomic objects are all of the same type. (numeric, complex, logical, character …)\n\n\n(z &lt;- 0:9)\n\n [1] 0 1 2 3 4 5 6 7 8 9\n\n(digits &lt;- as.character(z))\n\n [1] \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\"\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?as.numeric | ?as.character | ?as.logical | ?as.matrix\n\n\n\n\nComplex Data Types"
  },
  {
    "objectID": "presentations/R/index.html#other-types-of-objects",
    "href": "presentations/R/index.html#other-types-of-objects",
    "title": "Introduction to R",
    "section": "Other types of objects",
    "text": "Other types of objects\n\nFactors\nMatrices/Arrays\nLists\nData frames (A combination of matrix and List, but columns can be of different types)\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?matrix | ?factor | ?list | ?data.frame\n\n\n\n\nComplex Data Types"
  },
  {
    "objectID": "presentations/R/index.html#factors",
    "href": "presentations/R/index.html#factors",
    "title": "Introduction to R",
    "section": "Factors",
    "text": "Factors\nA factor is a vector object used to specify a discrete classification (grouping) of the components of other vectors of the same length. R provides both ordered and un-ordered factors.\n\n\noptions(digits = 3) # print only 3 digits\nset.seed(1) # set seed for reproducibility\n# simulate pm10 distribution\npm10 &lt;- 10 ^ rnorm(100, 1.6, 0.27)\n# higher values than 40 ug/m^3\npm10 &lt;- pm10[pm10 &gt; 40]\nregions &lt;- c(\"mar\", \"ege\", \"kdz\", \"ica\",\n             \"akd\", \"dga\", \"gda\")\nreg &lt;- factor(\n  sample(1:length(regions), length(pm10),\n         replace = TRUE))\nlevels(reg) &lt;- regions\nhead(data.frame(reg, pm10), 11)\n\n\n   reg  pm10\n1  ica  44.6\n2  ege 107.3\n3  akd  48.9\n4  ege  53.9\n5  ege  63.0\n6  ege  56.9\n7  kdz 101.9\n8  mar  50.7\n9  ege  80.1\n10 kdz  71.6\n11 gda  66.3\n\n\n\n\n\n# means by region\ntapply(pm10, reg, mean)\n\n\n mar  ege  kdz  ica  akd  dga  gda \n59.5 65.6 65.9 69.6 71.6 69.6 80.2 \n\n\n\n\nComplex Data Types"
  },
  {
    "objectID": "presentations/R/index.html#arrays",
    "href": "presentations/R/index.html#arrays",
    "title": "Introduction to R",
    "section": "Arrays",
    "text": "Arrays\n\nVectors are one dimensional (Single type)\nMatrices and data frames are two dimensional (Single type)\nArrays can hold more dimensions. (Single type)\n\n\narr3d &lt;- array(1:24, dim = c(4, 3, 2),\n                dimnames = list(\n                  c(\"one\", \"two\", \"three\", \"four\"),\n                  c(\"ein\", \"zwei\", \"drei\"),\n                  c(\"un\", \"deux\")))\nmat &lt;- matrix(1:12, nrow = 4, byrow = TRUE,\n              dimnames = list(\n                c(\"one\", \"two\", \"three\", \"four\"),\n                c(\"ein\", \"zwei\", \"drei\")))\n\n\nclass(arr3d); class(mat) # class of object\nlength(arr3d); length(mat) # length of object\ndim(arr3d); dim(mat) # dimensions\nnrow(arr3d); nrow(mat) # number of rows\nncol(arr3d); ncol(mat) # number of columns\nrownames(arr3d); rownames(mat)\ncolnames(arr3d); colnames(mat)\ndimnames(arr3d); dimnames(mat)\n\n\nComplex Data Types"
  },
  {
    "objectID": "presentations/R/index.html#lists",
    "href": "presentations/R/index.html#lists",
    "title": "Introduction to R",
    "section": "Lists",
    "text": "Lists\n\nAn object consisting of an ordered collection of objects\nThere is no particular need for the components to be of the same mode or type\n\n\n\n# Define/create a list object\nLst &lt;- list(name = \"John\",\n            wife = \"Mary\",\n            no.children = 3,\n            child.ages = c(4,7,9))\nstr(Lst)\n\n\nList of 4\n $ name       : chr \"John\"\n $ wife       : chr \"Mary\"\n $ no.children: num 3\n $ child.ages : num [1:3] 4 7 9\n\n\n\n\n\nLst$name # equal to Lst[[1]]\nLst[[4]] # equal to Lst$child.ages\nLst[[\"wife\"]] # same as Lst$wife\n\n\n[1] \"John\"\n[1] 4 7 9\n[1] \"Mary\"\n\n\n\n\n\nnames(Lst)\n\n\n[1] \"name\"        \"wife\"        \"no.children\" \"child.ages\" \n\n\n\n\nComplex Data Types"
  },
  {
    "objectID": "presentations/R/index.html#data-frames",
    "href": "presentations/R/index.html#data-frames",
    "title": "Introduction to R",
    "section": "Data frames",
    "text": "Data frames\n\n\n# Create a data.frame object\ndf &lt;- data.frame(pm10 = pm10, region = reg)\nstr(df)\n\n\n'data.frame':   53 obs. of  2 variables:\n $ pm10  : num  44.6 107.3 48.9 53.9 63 ...\n $ region: Factor w/ 7 levels \"mar\",\"ege\",\"kdz\",..: 4 2 5 2 2 2 3 1 2 3 ...\n\n\n\n\n\nhead(df)\n\n\n   pm10 region\n1  44.6    ica\n2 107.3    ege\n3  48.9    akd\n4  53.9    ege\n5  63.0    ege\n6  56.9    ege\n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?list | ?str | ?as.data.frame\n\n\n\n\nComplex Data Types"
  },
  {
    "objectID": "presentations/R/index.html#read.tablei",
    "href": "presentations/R/index.html#read.tablei",
    "title": "Introduction to R",
    "section": "read.table/I",
    "text": "read.table/I\n\n\n\n# Read data from text file\ndt &lt;- read.table(\"data.txt\")\nclass(dt)\n\n\n\n\n[1] \"data.frame\"\n\n\n\n\n\n\n\n\nstr(dt)\n\n'data.frame':   9 obs. of  5 variables:\n $ V1: int  100 200 300 400 500 600 700 800 900\n $ V2: chr  \"a1\" \"a2\" \"a3\" \"a4\" ...\n $ V3: chr  \"b1\" \"b2\" \"b3\" \"b4\" ...\n $ V4: logi  TRUE TRUE FALSE FALSE FALSE TRUE ...\n $ V5: chr  \"x\" \"x\" \"x\" \"y\" ...\n\n\n\n\nhead(dt)\n\n   V1 V2 V3    V4 V5\n1 100 a1 b1  TRUE  x\n2 200 a2 b2  TRUE  x\n3 300 a3 b3 FALSE  x\n4 400 a4 b4 FALSE  y\n5 500 a5 b5 FALSE  y\n6 600 a6 b6  TRUE  y\n\n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?read.table\n\n\n\n\nReading Data from Files"
  },
  {
    "objectID": "presentations/R/index.html#read.tableii",
    "href": "presentations/R/index.html#read.tableii",
    "title": "Introduction to R",
    "section": "read.table/II",
    "text": "read.table/II\n\n\n\ndt &lt;- read.table(\"data.txt\")\n\n\n\ndt2 &lt;- read.table(\"data.txt\",\n                  stringsAsFactors = TRUE)\n\n\n\n\n\n\nstr(dt)\n\n'data.frame':   9 obs. of  5 variables:\n $ V1: int  100 200 300 400 500 600 700 800 900\n $ V2: chr  \"a1\" \"a2\" \"a3\" \"a4\" ...\n $ V3: chr  \"b1\" \"b2\" \"b3\" \"b4\" ...\n $ V4: logi  TRUE TRUE FALSE FALSE FALSE TRUE ...\n $ V5: chr  \"x\" \"x\" \"x\" \"y\" ...\n\nhead(dt)\n\n   V1 V2 V3    V4 V5\n1 100 a1 b1  TRUE  x\n2 200 a2 b2  TRUE  x\n3 300 a3 b3 FALSE  x\n4 400 a4 b4 FALSE  y\n5 500 a5 b5 FALSE  y\n6 600 a6 b6  TRUE  y\n\n\n\n\nstr(dt2)\n\n'data.frame':   9 obs. of  5 variables:\n $ V1: int  100 200 300 400 500 600 700 800 900\n $ V2: Factor w/ 9 levels \"a1\",\"a2\",\"a3\",..: 1 2 3 4 5 6 7 8 9\n $ V3: Factor w/ 9 levels \"b1\",\"b2\",\"b3\",..: 1 2 3 4 5 6 7 8 9\n $ V4: logi  TRUE TRUE FALSE FALSE FALSE TRUE ...\n $ V5: Factor w/ 3 levels \"x\",\"y\",\"z\": 1 1 1 2 2 2 1 3 3\n\nhead(dt2)\n\n   V1 V2 V3    V4 V5\n1 100 a1 b1  TRUE  x\n2 200 a2 b2  TRUE  x\n3 300 a3 b3 FALSE  x\n4 400 a4 b4 FALSE  y\n5 500 a5 b5 FALSE  y\n6 600 a6 b6  TRUE  y\n\n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?read.table | ?factor\n\n\n\n\nReading Data from Files"
  },
  {
    "objectID": "presentations/R/index.html#read.csvi",
    "href": "presentations/R/index.html#read.csvi",
    "title": "Introduction to R",
    "section": "read.csv/I",
    "text": "read.csv/I\n\n# read csv file as a data.frame\ndt.pm10 &lt;- read.csv(\"pm10.csv\", sep = \";\")\n# or use read.csv2\nclass(dt.pm10) # \"data.frame\"\n\n\n\n\nhead(dt.pm10)\n\n                 Date sta1 sta2 sta3 sta4 sta5\n1 2008-01-01 00:00:00   NA 36.6 56.9   NA 51.6\n2 2008-01-01 01:00:00   NA 30.5 45.8   NA 40.4\n3 2008-01-01 02:00:00   NA 33.3 25.3   NA 78.9\n4 2008-01-01 03:00:00   NA   NA 20.4   NA 39.4\n5 2008-01-01 04:00:00   NA 35.0 35.1   NA 54.6\n6 2008-01-01 05:00:00 18.1 29.5 23.7   NA 24.3\n\n\n\n\nstr(dt.pm10)\n\n'data.frame':   43848 obs. of  6 variables:\n $ Date: chr  \"2008-01-01 00:00:00\" \"2008-01-01 01:00:00\" \"2008-01-01 02:00:00\" \"2008-01-01 03:00:00\" ...\n $ sta1: num  NA NA NA NA NA 18.1 NA 13.1 NA 28.2 ...\n $ sta2: num  36.6 30.5 33.3 NA 35 29.5 17 39.8 43.5 66.5 ...\n $ sta3: num  56.9 45.8 25.3 20.4 35.1 23.7 44 47.2 NA 38.4 ...\n $ sta4: num  NA NA NA NA NA NA NA NA NA NA ...\n $ sta5: num  51.6 40.4 78.9 39.4 54.6 24.3 16.8 NA 49.7 20.3 ...\n\n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?read.csv | ?read.csv2\n\n\n\n\nReading Data from Files"
  },
  {
    "objectID": "presentations/R/index.html#read.csvii",
    "href": "presentations/R/index.html#read.csvii",
    "title": "Introduction to R",
    "section": "read.csv/II",
    "text": "read.csv/II\nSet column classes at first. But note that we lost the time information. Why?\n\n# Sys.setenv(TZ='GMT')\ndt.pm10 &lt;- read.csv(\"pm10.csv\", sep = \";\",\n               colClasses = c(\"POSIXct\", \"numeric\", \"numeric\",\n                              \"numeric\", \"numeric\", \"numeric\"))\n\n\nstr(dt.pm10)\n\n'data.frame':   43848 obs. of  6 variables:\n $ Date: POSIXct, format: \"2008-01-01\" ...\n $ sta1: num  NA NA NA NA NA 18.1 NA 13.1 NA 28.2 ...\n $ sta2: num  36.6 30.5 33.3 NA 35 29.5 17 39.8 43.5 66.5 ...\n $ sta3: num  56.9 45.8 25.3 20.4 35.1 23.7 44 47.2 NA 38.4 ...\n $ sta4: num  NA NA NA NA NA NA NA NA NA NA ...\n $ sta5: num  51.6 40.4 78.9 39.4 54.6 24.3 16.8 NA 49.7 20.3 ...\n\nhead(dt.pm10)\n\n        Date sta1 sta2 sta3 sta4 sta5\n1 2008-01-01   NA 36.6 56.9   NA 51.6\n2 2008-01-01   NA 30.5 45.8   NA 40.4\n3 2008-01-01   NA 33.3 25.3   NA 78.9\n4 2008-01-01   NA   NA 20.4   NA 39.4\n5 2008-01-01   NA 35.0 35.1   NA 54.6\n6 2008-01-01 18.1 29.5 23.7   NA 24.3\n\n\n\nReading Data from Files"
  },
  {
    "objectID": "presentations/R/index.html#read.csviii",
    "href": "presentations/R/index.html#read.csviii",
    "title": "Introduction to R",
    "section": "read.csv/III",
    "text": "read.csv/III\nBecause dates are not UTC. Daylight saving is a problem.\n\nSys.setenv(TZ='GMT')\ndt.pm10 &lt;- read.csv(\"pm10.csv\", sep = \";\",\n               colClasses = c(\"POSIXct\", \"numeric\", \"numeric\",\n                              \"numeric\", \"numeric\", \"numeric\"))\n# Sys.setenv(TZ='EET')\nhead(dt.pm10)\n\n\n\n                 Date sta1 sta2 sta3 sta4 sta5\n1 2008-01-01 00:00:00   NA 36.6 56.9   NA 51.6\n2 2008-01-01 01:00:00   NA 30.5 45.8   NA 40.4\n3 2008-01-01 02:00:00   NA 33.3 25.3   NA 78.9\n4 2008-01-01 03:00:00   NA   NA 20.4   NA 39.4\n5 2008-01-01 04:00:00   NA 35.0 35.1   NA 54.6\n6 2008-01-01 05:00:00 18.1 29.5 23.7   NA 24.3\n\n\n\ndt.pm10$Date[2135:2140]\n\n[1] \"2008-03-29 22:00:00 GMT\" \"2008-03-29 23:00:00 GMT\"\n[3] \"2008-03-30 00:00:00 GMT\" \"2008-03-30 01:00:00 GMT\"\n[5] \"2008-03-30 02:00:00 GMT\" \"2008-03-30 03:00:00 GMT\"\n\nSys.setenv(TZ = 'EET')\ndt.pm10$Date[2135:2140]\n\n[1] \"2008-03-30 00:00:00 EET\"  \"2008-03-30 01:00:00 EET\" \n[3] \"2008-03-30 02:00:00 EET\"  \"2008-03-30 04:00:00 EEST\"\n[5] \"2008-03-30 05:00:00 EEST\" \"2008-03-30 06:00:00 EEST\"\n\n\n\nReading Data from Files"
  },
  {
    "objectID": "presentations/R/index.html#read.csv",
    "href": "presentations/R/index.html#read.csv",
    "title": "Introduction to R",
    "section": "read.csv",
    "text": "read.csv\nAnother approach to date time objects\n\ndt.pm10 &lt;- read.csv(\"pm10.csv\", sep = \";\")\n# read date column as character\ndt.pm10$Date &lt;- strptime(dt.pm10$Date, \"%Y-%m-%d %H:%M:%S\")\n\n\nhead(dt.pm10)\n\n                 Date sta1 sta2 sta3 sta4 sta5\n1 2008-01-01 00:00:00   NA 36.6 56.9   NA 51.6\n2 2008-01-01 01:00:00   NA 30.5 45.8   NA 40.4\n3 2008-01-01 02:00:00   NA 33.3 25.3   NA 78.9\n4 2008-01-01 03:00:00   NA   NA 20.4   NA 39.4\n5 2008-01-01 04:00:00   NA 35.0 35.1   NA 54.6\n6 2008-01-01 05:00:00 18.1 29.5 23.7   NA 24.3\n\ndt.pm10$Date[2135:2141]\n\n[1] \"2008-03-29 22:00:00 EET\"  \"2008-03-29 23:00:00 EET\" \n[3] \"2008-03-30 00:00:00 EET\"  \"2008-03-30 01:00:00 EET\" \n[5] \"2008-03-30 02:00:00 EET\"  \"2008-03-30 03:00:00\"     \n[7] \"2008-03-30 04:00:00 EEST\"\n\n\nThis time you will loose timezone information at daylight saving transitions.\n\nReading Data from Files"
  },
  {
    "objectID": "presentations/R/index.html#best-practices",
    "href": "presentations/R/index.html#best-practices",
    "title": "Introduction to R",
    "section": "Best practices",
    "text": "Best practices\n\nDo not struggle with excel files. Save them as .csv, then read.\nOrganize your csv file(s) before read.\nTry to fix all possible error.\nConvert your date-time information to \"%Y-%m-%d %H:%M:%S\" format.\nSave data as .rds file and load it by readRDS function.\nIf you need to read similar multiple files, best create your own function to read.\n\n\nReading Data from Files"
  },
  {
    "objectID": "presentations/R/index.html#overview",
    "href": "presentations/R/index.html#overview",
    "title": "Introduction to R",
    "section": "Overview",
    "text": "Overview\nAn R package is essentially a collection of R functions, compiled code, and sample data. It adds extra functionality to R, allows users to perform a wide range of tasks. They are stored in repositories like CRAN (Comprehensive R Archive Network), where users can download and install them as needed.\n\nFunctions and Datasets: Packages usually contain a set of functions to perform specific tasks and sometimes include datasets for examples and testing.\nDocumentation: Each package comes with documentation explaining how to use the functions and data it contains.\nCompiled Code: Some packages include compiled code written in languages like C, C++, or FORTRAN for more efficient computation.\nVignettes: Many packages include vignettes, which are detailed guides and tutorials on how to use the package.\nDependencies: Packages can depend on other packages, meaning they require certain other packages to be installed to function properly.\n\n\nR Packages"
  },
  {
    "objectID": "presentations/R/index.html#installing-new-r-packages",
    "href": "presentations/R/index.html#installing-new-r-packages",
    "title": "Introduction to R",
    "section": "Installing new R packages",
    "text": "Installing new R packages\nR has plenty of packages.\n\ninstall.packages(\"rpart\")\ninstall.packages(\"ggplot2\", \"partykit\")\n\n\nR Packages"
  },
  {
    "objectID": "presentations/R/index.html#some-popular-r-packages",
    "href": "presentations/R/index.html#some-popular-r-packages",
    "title": "Introduction to R",
    "section": "Some popular R packages",
    "text": "Some popular R packages\n\nData Manipulation and Analysis\nGraphics and Visualization\nStatistical and Machine Learning\nSpatial and Time Series Data\nWeb Technologies and APIs\nData Import/Export\nProgramming Tools\n\n\nR Packages"
  },
  {
    "objectID": "presentations/R/index.html#data-manipulation-and-analysis",
    "href": "presentations/R/index.html#data-manipulation-and-analysis",
    "title": "Introduction to R",
    "section": "Data Manipulation and Analysis",
    "text": "Data Manipulation and Analysis\n\ndplyr - A grammar of data manipulation, focused on tools for working with data frames.\nplyr - Tools for splitting, applying, and combining data.\ntidyr - Tools for tidying data: turning messy datasets into structured ones.\nreshape2 - Flexibly reshaping and pivoting data.\ndata.table - Extension of data.frame for fast aggregation and manipulation.\nstringr - Consistent tools for working with strings (i.e., character vectors).\nmagrittr - Provides a mechanism for chaining commands with a new forward-pipe operator, %&gt;%.\nzoo - Functions for time-indexed data.\nMatrix - Sparse and dense matrix classes and methods.\n\n\nR Packages - Some popular R packages"
  },
  {
    "objectID": "presentations/R/index.html#data-manipulation-and-analysis-1",
    "href": "presentations/R/index.html#data-manipulation-and-analysis-1",
    "title": "Introduction to R",
    "section": "Data Manipulation and Analysis",
    "text": "Data Manipulation and Analysis\n\nsurvival - Contains the core survival analysis routines.\ne1071 - Functions for latent class analysis, short time Fourier transform, fuzzy clustering, etc.\nquantmod - Quantitative Financial Modelling Framework.\ntm - Text Mining package.\nrvest - Easily scrape (or harvest) web data.\njsonlite - A robust and quick way to parse JSON files and APIs.\nHmisc - Harrell miscellaneous, many functions for data analysis.\nhaven - Import and export ‘SPSS’, ‘Stata’ and ‘SAS’ files.\nlubridate - Functions to work with dates and times.\nsqldf - Perform SQL selects on R data frames.\n\n\nR Packages - Some popular R packages"
  },
  {
    "objectID": "presentations/R/index.html#data-manipulation-and-analysis-2",
    "href": "presentations/R/index.html#data-manipulation-and-analysis-2",
    "title": "Introduction to R",
    "section": "Data Manipulation and Analysis",
    "text": "Data Manipulation and Analysis\n\nreadxl - Read Excel files (.xls and .xlsx).\nDBI - Defines a common interface between the R and database management systems.\nbroom - Converts statistical objects into tidy data frames.\nforcats - Tools for working with categorical variables (factors).\nmodelr - Functions for modeling that work well with the pipe.\ntidytext - Text mining using dplyr, ggplot2, and other tidy tools.\n\n\nR Packages - Some popular R packages"
  },
  {
    "objectID": "presentations/R/index.html#graphics-and-visualization",
    "href": "presentations/R/index.html#graphics-and-visualization",
    "title": "Introduction to R",
    "section": "Graphics and Visualization",
    "text": "Graphics and Visualization\n\nggplot2 - A system for declaratively creating graphics, based on The Grammar of Graphics.\nleaflet - Create interactive web maps with the JavaScript ‘Leaflet’ library.\nplotly - Create interactive web graphics via ‘plotly.js’.\nscales - Graphical scales map data to aesthetics.\ngridExtra - Provides functions in addition to the grid package.\nlattice - High-level data visualization system inspired by Trellis graphics.\nggvis - Interactive, web-based graphics built with the grammar of graphics.\n\n\nR Packages - Some popular R packages"
  },
  {
    "objectID": "presentations/R/index.html#graphics-and-visualization-1",
    "href": "presentations/R/index.html#graphics-and-visualization-1",
    "title": "Introduction to R",
    "section": "Graphics and Visualization",
    "text": "Graphics and Visualization\n\nhighcharter - A wrapper for the ‘Highcharts’ library.\ndygraphs - Interface to ‘Dygraphs’ interactive time series charting library.\nrgl - 3D visualization using OpenGL.\nggmap - Spatial visualization with Google Maps and OpenStreetMap.\nggraph - Creates graphs based on the grammar of graphics.\nplotrix - Various plotting functions.\nggally - Extension of ggplot2 to facilitate plot creation.\n\n\nR Packages - Some popular R packages"
  },
  {
    "objectID": "presentations/R/index.html#statistical-and-machine-learning",
    "href": "presentations/R/index.html#statistical-and-machine-learning",
    "title": "Introduction to R",
    "section": "Statistical and Machine Learning",
    "text": "Statistical and Machine Learning\n\ncaret - Classification And REgression Training: tools for data splitting, pre-processing, feature selection, etc.\nrandomForest - Classification and regression based on a forest of trees using random inputs.\nglmnet - Lasso and elastic-net regularized generalized linear models.\nnnet - Feed-forward neural networks and multinomial log-linear models.\nMASS - Functions and datasets to support the book Modern Applied Statistics with S.\nxgboost - Extreme Gradient Boosting, which is an efficient implementation of gradient boosting framework.\n\n\nR Packages - Some popular R packages"
  },
  {
    "objectID": "presentations/R/index.html#statistical-and-machine-learning-1",
    "href": "presentations/R/index.html#statistical-and-machine-learning-1",
    "title": "Introduction to R",
    "section": "Statistical and Machine Learning",
    "text": "Statistical and Machine Learning\n\nlme4 - Linear and nonlinear mixed effects models.\nsurvminer - Drawing survival curves using ‘ggplot2’.\nparty - Recursive PARTYtioning for classification and regression trees.\nmboost - Model-Based Boosting.\nbrms - Bayesian regression models using ‘Stan’.\neasystats - Collection of tools for statistical analysis.\n\n\nR Packages - Some popular R packages"
  },
  {
    "objectID": "presentations/R/index.html#spatial-and-time-series-data",
    "href": "presentations/R/index.html#spatial-and-time-series-data",
    "title": "Introduction to R",
    "section": "Spatial and Time Series Data",
    "text": "Spatial and Time Series Data\n\nsp - Classes and methods for spatial data.\nrgdal - Bindings for the ‘Geospatial’ Data Abstraction Library.\nraster - Geographic data analysis and modeling.\nxts - eXtensible Time Series.\nforecast - Forecasting functions for time series and linear models.\nsf - Simple features for handling spatial objects.\ntmap - Thematic maps.\ngeosphere - Spherical trigonometry for geographic applications.\nstargazer - Well-formatted regression and summary statistics tables.\n\n\nR Packages - Some popular R packages"
  },
  {
    "objectID": "presentations/R/index.html#web-technologies-and-apis",
    "href": "presentations/R/index.html#web-technologies-and-apis",
    "title": "Introduction to R",
    "section": "Web Technologies and APIs",
    "text": "Web Technologies and APIs\n\nshiny - Web Application Framework for R.\nhttr - Tools for working with URLs and HTTP.\ncurl - A modern and flexible web client for R.\nXML - Tools for parsing and generating XML within R.\njsonlite - JSON parser/generator.\nRCurl - General network (HTTP/FTP/…) client interface for R.\nplumber - Enables you to create a web API by merely decorating your existing R source code.\ngoogleVis - Interface between R and the Google Chart Tools.\n\n\nR Packages - Some popular R packages"
  },
  {
    "objectID": "presentations/R/index.html#data-importexport",
    "href": "presentations/R/index.html#data-importexport",
    "title": "Introduction to R",
    "section": "Data Import/Export",
    "text": "Data Import/Export\n\nreadr - Read rectangular data.\nRcpp - Seamless R and C++ Integration.\nrJava - Low-level R to Java interface.\nRODBC - ODBC Database Access.\nxlsx - Read, write, format Excel 2007 and Excel 97/2000/XP/2003 files.\nopenxlsx - Simplifies the creation of .xlsx files.\n\n\nR Packages - Some popular R packages"
  },
  {
    "objectID": "presentations/R/index.html#programming-tools",
    "href": "presentations/R/index.html#programming-tools",
    "title": "Introduction to R",
    "section": "Programming Tools",
    "text": "Programming Tools\n\ndevtools - Tools to make developing R packages easier.\nroxygen2 - In-line documentation for R.\ntestthat - Unit testing for R.\npurrr - A functional programming toolkit for R.\ntibble - A modern reimagining of the data frame.\nstringi - Character string processing facilities.\nusethis - Automates repetitive tasks that arise during project setup.\nrlang - Functions for base types and core R and ‘Tidyverse’ features.\npkgdown - Build static html documentation for an R package.\ncovr - Test coverage reports for R.\nprofvis - Interactive visualizations to understand how R spends its time.\n\n\nR Packages - Some popular R packages"
  },
  {
    "objectID": "presentations/R/index.html#reporting",
    "href": "presentations/R/index.html#reporting",
    "title": "Introduction to R",
    "section": "Reporting",
    "text": "Reporting\n\nRMarkdown - Dynamic documents for R.\nknitr - General-purpose tool for dynamic report generation in R.\nrmarkdown - Convert R Markdown documents\n\n\nR Packages - Some popular R packages"
  },
  {
    "objectID": "presentations/R/index.html#conditional-execution-if-statements",
    "href": "presentations/R/index.html#conditional-execution-if-statements",
    "title": "Introduction to R",
    "section": "Conditional execution: if statements",
    "text": "Conditional execution: if statements\n\nif (expr_1) expr_2 else expr_3\n\nThe “short-circuit” operators && and || are often used as part of the condition in an if statement. Whereas & and | apply element-wise to vectors, && and || apply to vectors of length one, and only evaluate their second argument if necessary.\n\n\n\nage &lt;- 12\nif (age &lt; 13) {\n  print(\"Watch this with your Mom\")\n} else {\n  print(\"Enjoy the movie!\")\n}\n\n[1] \"Watch this with your Mom\"\n\n\n\n\nx &lt;- 0\nif (x &gt; 0) {\n  print(\"Positive Number\")\n} else if (x &lt; 0) {\n  print(\"Negative Number\")\n} else {\n  print(\"Zero\")\n}\n\n[1] \"Zero\"\n\n\n\n\n\nage &lt;- 21\nprint(ifelse(age &lt; 13, \"Watch this with your Mom\", \"Enjoy the movie!\"))\n\n[1] \"Enjoy the movie!\"\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?`if`; ?ifelse\n\n\n\n\nLoops and control flow"
  },
  {
    "objectID": "presentations/R/index.html#for-loops-repeat-and-while",
    "href": "presentations/R/index.html#for-loops-repeat-and-while",
    "title": "Introduction to R",
    "section": "for loops, repeat and while",
    "text": "for loops, repeat and while\n\nfor (name in expr_1) expr_2\nrepeat expr_2\nwhile (condition) expr_2\n\n\nexpr_1 is a vector expression (often a sequence like 1:20) expr_2 is often a grouped expression with its sub-expressions written in terms of the dummy name. expr_2 is repeatedly evaluated as name ranges through the values in the vector result of expr_1.\nOnly way to terminate repeat loops is break.\nThe next statement can be used to discontinue one particular cycle and skip to the “next”.\n\nWARNING: AVOID FOR-LOOP STATEMENTS AS MUCH AS POSSIBLE.\n\n\n\n\n\n\nSEE ALSO\n\n\n?`for`; ?`repeat`; ?`while`\n\n\n\n\nLoops and control flow"
  },
  {
    "objectID": "presentations/R/index.html#for-loops-repeat-and-while-1",
    "href": "presentations/R/index.html#for-loops-repeat-and-while-1",
    "title": "Introduction to R",
    "section": "for loops, repeat and while",
    "text": "for loops, repeat and while\nCalculate factorial for n = 5.\n\nn &lt;- 5\n\n\n\n\n# Factorial calculation\n# with for-loop\nresult &lt;- 1\nfor (i in 2:n) {\n  result &lt;- result * i\n}\nprint(result)\n\n[1] 120\n\n\n\n\n# Factorial calculation\n# with while\nresult &lt;- 1\ni &lt;- 2\nwhile (i &lt;= n) {\n  result &lt;- result * i\n  i &lt;- i + 1\n}\nprint(result)\n\n[1] 120\n\n\n\n\n# Factorial calculation\n# with repeat\nresult &lt;- 1\ni &lt;- 2\nrepeat {\n  if (i &gt; n) {\n    break\n  }\n  result &lt;- result * i\n  i &lt;- i + 1\n}\nprint(result)\n\n[1] 120\n\n\n\n\n\n\nfor-loop\n\nn &lt;- 5\nsum_of_squares &lt;- 0\nfor (i in 1:n) {\n  sum_of_squares &lt;- sum_of_squares + i^2\n}\nprint(sum_of_squares)\n\n[1] 55\n\n\n\nwhile\n\nset.seed(123) # Set seed for reproducibility\ncount &lt;- 0\nroll &lt;- 0\nwhile (roll != 6) {\n  roll &lt;- sample(1:6, 1)  # Simulate rolling a die\n  count &lt;- count + 1\n}\ncat(\"I found\", roll, \"at roll\", count, \"\\n\")\n\nI found 6 at roll 2 \n\n\n\nrepeat\n\ndivisible_by &lt;- 7\nnum &lt;- 8\nrepeat {\n  if (num %% divisible_by == 0) {\n    print(num)\n    break\n  }\n  num &lt;- num + 1\n}\n\n[1] 14\n\n\n\n\n\nLoops and control flow"
  },
  {
    "objectID": "presentations/R/index.html#for-loops-repeat-and-while-2",
    "href": "presentations/R/index.html#for-loops-repeat-and-while-2",
    "title": "Introduction to R",
    "section": "for loops, repeat and while",
    "text": "for loops, repeat and while\n\nfor (i in 2:3) {\n  plot(dt.pm10[,1], dt.pm10[,i], type = \"l\", main = paste0(\"plot\", i))\n}\n\n\ni &lt;- 2\nrepeat {\n  plot(dt.pm10[,1], dt.pm10[,i], type = \"l\", main = paste0(\"plot\", i))\n  i &lt;- i + 1\n  if (i == 3) break\n}\n\n\ni &lt;- 2\nwhile (i &lt; 4) {\n  plot(dt.pm10[,1], dt.pm10[,i], type = \"l\", main = paste0(\"plot\", i))\n  i &lt;- i + 1\n}\n\n\nfor (i in 2:4) {\n  if (i == 3) next\n  plot(dt.pm10[,1], dt.pm10[,i], type = \"l\", main = paste0(\"plot\", i))\n}\n\n\nLoops and control flow"
  },
  {
    "objectID": "presentations/R/index.html#what-is-a-function",
    "href": "presentations/R/index.html#what-is-a-function",
    "title": "Introduction to R",
    "section": "What is a Function?",
    "text": "What is a Function?\n\n&gt; name &lt;- function(arg_1, arg_2, ...) expression\n&gt; return(value)\n\n\nWe already have seen functions.\nmean, sd, mean, summary all of them are base R functions\nand are not different from the functions that you will write.\nThe expression is an R expression, (usually a grouped expression), that uses the arguments, arg i, to calculate a value. The value of the expression is the value returned for the function.\nA call to the function then usually takes the form name(expr_1, expr_2, ...) and may occur anywhere a function call is legitimate.\n\n\n# Create a function to calculate the volume of a cake\nmake_cake &lt;- function(height, radius) pi * (radius ^ 2) * height\ncake1 &lt;- make_cake(0.3, 0.5)\ncake2 &lt;- make_cake(1, 2)\ncat(\"Volume of cake1 is\", cake1, \"m^3 and Volume of cake2 is\", cake2, \"m^3\\n\")\n\nVolume of cake1 is 0.236 m^3 and Volume of cake2 is 12.6 m^3\n\n\n\nWriting your own functions"
  },
  {
    "objectID": "presentations/R/index.html#functions",
    "href": "presentations/R/index.html#functions",
    "title": "Introduction to R",
    "section": "Functions",
    "text": "Functions\n\n# Create a function to calculate the volume of a cake\nmake_cake &lt;- function(height = 0.1, radius = 0.5) {\n  cake &lt;- pi * (radius ^ 2) * height\n  return(cake)\n}\n\n\n\ncake1 &lt;- make_cake()\ncat(\"Volume of cake1 is\", cake1, \"m^3\\n\")\n\n\nVolume of cake1 is 0.0785 m^3\n\n\n\n\n\ncake2 &lt;- make_cake(0.2)\ncat(\"Volume of cake2 is\", cake2, \"m^3\\n\")\n\n\nVolume of cake2 is 0.157 m^3\n\n\n\n\n\ncake3 &lt;- make_cake(radius = 2)\ncat(\"Volume of cake3 is\", cake3, \"m^3\\n\")\n\n\nVolume of cake3 is 1.26 m^3\n\n\n\n\nWriting your own functions"
  },
  {
    "objectID": "presentations/R/index.html#scope",
    "href": "presentations/R/index.html#scope",
    "title": "Introduction to R",
    "section": "Scope",
    "text": "Scope\nWhat happens if I define same variable name in and out of a function?\n\nmyfunc &lt;- function() {\n  x &lt;- 20\n  print(x)\n}\nx &lt;- 10\n\n\n\nprint(x)\n\n\n[1] 10\n\n\n\n\n\nmyfunc()\n\n\n[1] 20\n\n\n\n\nWriting your own functions"
  },
  {
    "objectID": "presentations/R/index.html#calling-functions-in-another-functionsi",
    "href": "presentations/R/index.html#calling-functions-in-another-functionsi",
    "title": "Introduction to R",
    "section": "Calling functions in another functions/I",
    "text": "Calling functions in another functions/I\n\narea_of_rectangle &lt;- function(height = 1, width = 1) {\n  area &lt;- height * width\n  return(area)\n}\n\narea_of_square &lt;- function(height = 1) {\n  return(area_of_rectangle(height, height))\n}\n\narea_of_triangle &lt;- function(height = 1, width = 1) {\n  return(area_of_rectangle(height, width)/2)\n}\n\n\nWriting your own functions"
  },
  {
    "objectID": "presentations/R/index.html#calling-functions-in-another-functionsii",
    "href": "presentations/R/index.html#calling-functions-in-another-functionsii",
    "title": "Introduction to R",
    "section": "Calling functions in another functions/II",
    "text": "Calling functions in another functions/II\n\nvol_of_cube &lt;- function(height = 1, width = 1, depth = 1) {\n  height * width * depth\n}\n\narea_of_rectangle &lt;- function(height = 1, width = 1) {\n  vol_of_cube(height, width)\n}\n\narea_of_square &lt;- function(height = 1) {\n  area_of_rectangle(height, height)\n}\n\narea_of_triangle &lt;- function(height = 1, width = 1) {\n  area_of_rectangle(height, width)/2\n}\n\n\nWriting your own functions"
  },
  {
    "objectID": "presentations/R/index.html#fibonacci-function",
    "href": "presentations/R/index.html#fibonacci-function",
    "title": "Introduction to R",
    "section": "Fibonacci function",
    "text": "Fibonacci function\nA function for Fibonacci Sequence\n\nfib &lt;- function(n, last = TRUE) {\n  x &lt;- numeric(n)\n  x[1:2] &lt;- c(1, 1)\n  for (i in 3:n) x[i] &lt;- x[i-1] + x[i-2]\n  if (last) x &lt;- x[n]\n  x\n}\n\nfib2 &lt;- function(n, last = TRUE) {\n  x &lt;- if (last) n else 1:n\n  round(((5 + sqrt(5)) / 10) * (( 1 + sqrt(5)) / 2) ^ (x - 1))\n}\n\nlibrary(microbenchmark)\nmicrobenchmark(fib(30, F), fib2(30, F))\n\nUnit: microseconds\n        expr  min   lq  mean median   uq  max neval\n  fib(30, F) 2.05 2.13 23.62   2.17 2.25 2137   100\n fib2(30, F) 1.31 1.39  9.44   1.44 1.52  793   100\n\n\n\nWriting your own functions"
  },
  {
    "objectID": "presentations/R/index.html#prime-numbers-functioni",
    "href": "presentations/R/index.html#prime-numbers-functioni",
    "title": "Introduction to R",
    "section": "Prime Numbers function/I",
    "text": "Prime Numbers function/I\nA function that determines if a number is prime or not.\n\nis.prime &lt;- function(x) {\n  x &lt;- x[1] # make sure length of x is 1\n  it.is.prime &lt;- FALSE\n  if(x &gt; 1) {\n    it.is.prime &lt;- TRUE\n    for (i in 2:(x - 1)) {\n      if (x %% i == 0) {\n        it.is.prime &lt;- FALSE\n        break\n      }\n    }\n  }\n  if (x == 2) it.is.prime &lt;- TRUE\n  return(it.is.prime)\n}\n\n\nis.prime(13)\nis.prime(21)\nis.prime(19999999)\n\n\nWriting your own functions"
  },
  {
    "objectID": "presentations/R/index.html#prime-numbers-functionii",
    "href": "presentations/R/index.html#prime-numbers-functionii",
    "title": "Introduction to R",
    "section": "Prime Numbers function/II",
    "text": "Prime Numbers function/II\nAnother function for prime number determination. Which one is faster? is.prime or is.prime2?\n\nis.prime2 &lt;- function(x) {\n  x &lt;- x[1] # make sure length of x is 1\n  it.is.prime &lt;- FALSE\n  if (x &gt; 1) {\n    it.is.prime &lt;- TRUE\n    i &lt;- 2:(x - 1)\n    if (any(x %% i == 0)) {\n      it.is.prime &lt;- FALSE\n    }\n  }\n  if (x == 2) it.is.prime &lt;- TRUE\n  return(it.is.prime)\n}\n\n\nWriting your own functions"
  },
  {
    "objectID": "presentations/R/index.html#prime-numbers-functioniii",
    "href": "presentations/R/index.html#prime-numbers-functioniii",
    "title": "Introduction to R",
    "section": "Prime Numbers function/III",
    "text": "Prime Numbers function/III\nAnother function for prime number determination. Which one is faster? is.prime or is.prime2?\n\nlibrary(microbenchmark)\nx &lt;- 31\nmicrobenchmark(is.prime(x), is.prime2(x))\n\nUnit: nanoseconds\n         expr  min   lq  mean median   uq     max neval\n  is.prime(x) 2091 2132 29092   2173 2276 2675947   100\n is.prime2(x)  615  656 22658    656  738 2183701   100\n\n\n\nWriting your own functions"
  },
  {
    "objectID": "presentations/R/index.html#prime-numbers-functioniv",
    "href": "presentations/R/index.html#prime-numbers-functioniv",
    "title": "Introduction to R",
    "section": "Prime Numbers function/IV",
    "text": "Prime Numbers function/IV\nA more interesting function for prime number determination. This time we can use vectors to test for prime.\n\nis.prime3 &lt;- function(x) {\n  sapply(x, is.prime2)\n}\n\n\nWriting your own functions"
  },
  {
    "objectID": "presentations/R/index.html#number-of-primes-below-n",
    "href": "presentations/R/index.html#number-of-primes-below-n",
    "title": "Introduction to R",
    "section": "Number of Primes below n",
    "text": "Number of Primes below n\nNow write another function calculates number of primes below n.\n\nnprime &lt;- function(n) {\n  sapply(n, function(x) sum(sapply(1:x, is.prime2)))\n}\nnprime(10)\n\n[1] 4\n\nnprime(11:20)\n\n [1] 5 5 6 6 6 6 7 7 8 8\n\n\n\nWriting your own functions"
  },
  {
    "objectID": "presentations/R/index.html#part-i",
    "href": "presentations/R/index.html#part-i",
    "title": "Introduction to R",
    "section": "Part I",
    "text": "Part I\n\napply: Used to apply a function to the rows or columns of a matrix or an array.\nlapply: Applies a function to each element of a list and returns a list. It is useful when you want to perform an operation on each element of a list and keep the results in a list.\nsapply: A user-friendly version of lapply. It applies a function to each element of a list, but tries to simplify the result to a vector or matrix if possible.\nvapply: Similar to sapply, but you can specify the type and structure of the output in advance, which makes it safer and can prevent unexpected results or errors.\ntapply: Applies a function to subsets of a vector broken down by factors and is particularly useful for data analysis.\nmapply: A multivariate version of sapply. It applies a function in parallel over sets of arguments (i.e., it can take multiple vectors/lists as input and apply a function to the corresponding elements of each).\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#apply-functioni",
    "href": "presentations/R/index.html#apply-functioni",
    "title": "Introduction to R",
    "section": "apply function/I",
    "text": "apply function/I\n\napply(X, MARGIN, FUN, ..., simplify = TRUE)\n\nThis function is used to apply a function to the rows or columns of a matrix or array.\n\n\n(m &lt;- matrix(1:12, nrow = 3))\n\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\n\n\n\n\n# 1 indicates rows, 2 would indicate columns\napply(m, 1, mean)\n\n\n[1] 5.5 6.5 7.5\n\n\n\n\n\napply(m, 2, function(x) sum(x^3))\n\n\n[1]   36  405 1584 4059\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#apply-functionii",
    "href": "presentations/R/index.html#apply-functionii",
    "title": "Introduction to R",
    "section": "apply function/II",
    "text": "apply function/II\n\napply(X, MARGIN, FUN, ..., simplify = TRUE)\n\nApply a complex function (is.prime3) to each column of a matrix.\n\n\n# or let's employ is.prime3 function\napply(m, 2, is.prime3)\n\n\n      [,1]  [,2]  [,3]  [,4]\n[1,] FALSE FALSE  TRUE FALSE\n[2,]  TRUE  TRUE FALSE  TRUE\n[3,]  TRUE FALSE FALSE FALSE\n\n\n\n\n\n# or let's normalize each column\napply(m, 2, function(x) {\n  return((x - min(x)) / (max(x) - min(x)))\n})\n\n\n     [,1] [,2] [,3] [,4]\n[1,]  0.0  0.0  0.0  0.0\n[2,]  0.5  0.5  0.5  0.5\n[3,]  1.0  1.0  1.0  1.0\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#tapply-functioni",
    "href": "presentations/R/index.html#tapply-functioni",
    "title": "Introduction to R",
    "section": "tapply function/I",
    "text": "tapply function/I\n\ntapply(X, INDEX, FUN = NULL, ..., default = NA, simplify = TRUE)\n\nThis is used to apply a function over subsets of a vector and is particularly useful for data analysis.\n\n\nnumbers &lt;- c(1, 2, 3, 4, 5, 6)\ngroups &lt;- factor(c('A', 'B', 'A', 'B', 'A', 'B'))\ntapply(numbers, groups, mean)\n\n\nA B \n3 4 \n\n\n\n\n\n# or let's normalize each group\ntapply(numbers, groups, function(x) {\n  return((x - min(x)) / (max(x) - min(x)))\n})\n\n\n$A\n[1] 0.0 0.5 1.0\n\n$B\n[1] 0.0 0.5 1.0\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#tapply-functionii",
    "href": "presentations/R/index.html#tapply-functionii",
    "title": "Introduction to R",
    "section": "tapply function/II",
    "text": "tapply function/II\n\ntapply(X, INDEX, FUN = NULL, ..., default = NA, simplify = TRUE)\n\nA more complex example.\n\n\n# Create random example pollution data\npollutant &lt;- runif(30)\ncity &lt;- factor(\n  rep(c(\"Istanbul\", \"Ankara\", \"Izmir\"), 10))\nyear &lt;- factor(\n  rep(c(\"2020\", \"2021\", \"2022\"), each = 10))\n\nair_data &lt;- data.frame(pollutant, city, year)\nhead(air_data)\n\n\n  pollutant     city year\n1     0.490 Istanbul 2020\n2     0.879   Ankara 2020\n3     0.813    Izmir 2020\n4     0.854 Istanbul 2020\n5     0.368   Ankara 2020\n6     0.874    Izmir 2020\n\n\n\n\n\ntapply(air_data$pollutant, \n       list(air_data$city, air_data$year), mean)\n\n\n          2020  2021  2022\nAnkara   0.509 0.832 0.561\nIstanbul 0.618 0.162 0.234\nIzmir    0.785 0.385 0.348\n\n\n\n\n\ntapply(pollutant, list(city, year), mean)\n\n\n          2020  2021  2022\nAnkara   0.509 0.832 0.561\nIstanbul 0.618 0.162 0.234\nIzmir    0.785 0.385 0.348\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#sapply-functioni",
    "href": "presentations/R/index.html#sapply-functioni",
    "title": "Introduction to R",
    "section": "sapply function/I",
    "text": "sapply function/I\n\nsapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)\n\nIt applies a function over a list or vector and simplifies the result into a vector or matrix. It is a user-friendly version of lapply by default returning a vector, matrix or, if simplify = \"array\", an array if appropriate, by applying simplify2array().\n\n\nv &lt;- c(1, 4, 9, 16)\nsapply(v, sqrt)\n\n\n[1] 1 2 3 4\n\n\n\n\n\n# or let's calculate sqrt and cube of each value\nsapply(v, function(x) sqrt(x)^3)\n\n\n[1]  1  8 27 64\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#sapply-functionii",
    "href": "presentations/R/index.html#sapply-functionii",
    "title": "Introduction to R",
    "section": "sapply function/II",
    "text": "sapply function/II\n\nsapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)\n\n\n# Create random example pollution data\nset.seed(123)  # For reproducibility\ncity_data &lt;- list(\n    Istanbul = data.frame(PM25 = rnorm(10), NO2 = rnorm(10)),\n    Ankara = data.frame(PM25 = rnorm(10), NO2 = rnorm(10)),\n    Izmir = data.frame(PM25 = rnorm(10), NO2 = rnorm(10))\n)\n\n\n\n# Let's calculate mean of PM25 for each city\nsapply(city_data,\n       function(x) mean(x$PM25, na.rm = TRUE))\n\n\nIstanbul   Ankara    Izmir \n 0.07463 -0.42456 -0.00872 \n\n\n\n\n\n# or let's calculate mean of each column\nsapply(city_data, function(x) colMeans(x))\n\n\n     Istanbul Ankara    Izmir\nPM25   0.0746 -0.425 -0.00872\nNO2    0.2086  0.322  0.22169\n\n\n\n\n\n# or a shorter and tidier way\nsapply(city_data, colMeans)\n\n\n     Istanbul Ankara    Izmir\nPM25   0.0746 -0.425 -0.00872\nNO2    0.2086  0.322  0.22169\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#vapply-functioni",
    "href": "presentations/R/index.html#vapply-functioni",
    "title": "Introduction to R",
    "section": "vapply function/I",
    "text": "vapply function/I\n\nvapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE)\n\nThis is a safe version of sapply. You specify the type of output, which can avoid unexpected results.\n\n\nv &lt;- c(1, 4, 9, 16)\nvapply(v, sqrt, numeric(1))\n\n\n[1] 1 2 3 4\n\n\n\n\n\nv &lt;- 1:10\n# what are the results?\nvapply(v, is.prime2, numeric(1))\n\n\n [1] 0 1 1 0 1 0 1 0 0 0\n\n\n\n\n\n# what are the results?\nvapply(v, is.prime2, logical(1))\n\n\n [1] FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE\n[10] FALSE\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#vapply-functionii",
    "href": "presentations/R/index.html#vapply-functionii",
    "title": "Introduction to R",
    "section": "vapply function/II",
    "text": "vapply function/II\n\nvapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE)\n\n\n# Create random example pollution data\nset.seed(123)  # For reproducibility\nmeasurements &lt;- list(\n    morning = rnorm(50, mean = 100, sd = 10),\n    afternoon = rnorm(60, mean = 120, sd = 15),\n    evening = rnorm(40, mean = 90, sd = 20)\n)\n\n\n\nvapply(measurements,\n       function(x) c(min(x),\n                     mean(x),\n                     median(x),\n                     max(x)),\n       numeric(4))\n\n\n     morning afternoon evening\n[1,]    80.3      85.4    48.9\n[2,]   100.3     120.8    85.6\n[3,]    99.3     119.8    84.8\n[4,]   121.7     152.8   132.0\n\n\n\n\n\nvapply(measurements,\n       function(x) c(min = min(x),\n                     mean = mean(x),\n                     median = median(x),\n                     max = max(x)),\n       numeric(4))\n\n\n       morning afternoon evening\nmin       80.3      85.4    48.9\nmean     100.3     120.8    85.6\nmedian    99.3     119.8    84.8\nmax      121.7     152.8   132.0\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#mapply-functioni",
    "href": "presentations/R/index.html#mapply-functioni",
    "title": "Introduction to R",
    "section": "mapply function/I",
    "text": "mapply function/I\n\nmapply(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE)\n\nmapply in R is a multivariate version of sapply. It applies a function in parallel over a set of arguments. This is particularly useful when you have several lists or vectors and you want to apply a function to the 1st elements of each, then the 2nd elements, and so on.\n\n# Create random example pollution data\nset.seed(123)  # For reproducibility\npm25 &lt;- rnorm(7, mean = 35, sd = 5)  # PM2.5 readings for a week\nno2 &lt;- rnorm(7, mean = 50, sd = 10)  # NO2 readings for the same week\nso2 &lt;- rnorm(7, mean = 20, sd = 3)   # SO2 readings for the same week\n\n\n\n# let's calculate mean for the pollutants.\nmapply(mean, pm25, no2, so2)\n\n\n[1] 32.2 33.8 42.8 35.4 35.6 43.6 37.3\n\n\n\n\n\n# let's assume a hypothetical formula for an \n# air quality index\npollution_index &lt;- function(pm25, no2, so2) {\n  x &lt;- (pm25 * 0.4 + no2 * 0.3 + so2 * 0.2)\n  sqrt(x) / 3\n}\nmapply(pollution_index, pm25, no2, so2)\n\n\n[1] 1.76 1.87 1.97 1.99 1.97 2.04 1.93\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#mapply-functionii",
    "href": "presentations/R/index.html#mapply-functionii",
    "title": "Introduction to R",
    "section": "mapply function/II",
    "text": "mapply function/II\n\n\nset.seed(123)  # For reproducibility\nactuals &lt;- list(\n  pm25 = rnorm(10), no2 = rnorm(10), so2 = rnorm(10))\npredicted &lt;- list(\n  pm25 = rnorm(10), no2 = rnorm(10), so2 = rnorm(10))\n# let's calculate RMSE for each pollutant\nmapply(function(a, p) {\n  sqrt(mean((a - p)^2))\n}, actuals, predicted)\n\n\n pm25   no2   so2 \n0.722 1.607 1.616 \n\n\n\nor is there a tidier way?\n\nsqrt(mean((actuals$pm25 - predicted$pm25)^2))\n\n\nsapply(1:3, function(i) {\n  sqrt(mean((actuals[[i]] - predicted[[i]])^2))\n})\n\n\nfor (i in 1:3) {\n  print(sqrt(mean((actuals[[i]] - predicted[[i]])^2)))\n}\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#part-ii",
    "href": "presentations/R/index.html#part-ii",
    "title": "Introduction to R",
    "section": "Part II",
    "text": "Part II\n\nrapply (Recursive Apply): This function is used to apply a function recursively to elements of a deeply nested list or expression at each level or at specific levels.\nMap: Similar to mapply (wrapper around mapply with SIMPLIFY = FALSE), but it always returns a list regardless of the output of the function being applied.\nReduce: This function applies a function successively over elements of a vector/list.\nFilter: This function is used to filter elements of a list/vector that satisfy a certain condition given by a function.\nFind: Similar to Filter, but it returns the first element of a list/vector.\nPosition: This function is used to find the position of the first or last element of a vector or list that satisfies a certain condition given by a function.\nsweep: It’s typically used for operations on arrays/matrices to apply a function to rows/columns, and it’s useful for data standardization.\nNegate: Used to create the negation of a given predicate function.\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#rapply-function-recursive-version-of-lapply",
    "href": "presentations/R/index.html#rapply-function-recursive-version-of-lapply",
    "title": "Introduction to R",
    "section": "rapply function (Recursive version of lapply)",
    "text": "rapply function (Recursive version of lapply)\n\nrapply(object, f, classes = \"ANY\", deflt = NULL,\n       how = c(\"unlist\", \"replace\", \"list\"), ...)\n\nThis function is used to apply a function recursively to elements of a list or expression. It’s particularly useful when dealing with deeply nested lists where you need to perform an operation at each level or at specific levels.\nExample:\n\n\nset.seed(123)  # For reproducibility\n# Create a complex example data\nmeasurements  &lt;- sapply(\n  c(\"Ankara\", \"Istanbul\", \"Izmir\"),\n  function(city) {\n    sapply(paste0(\"day\", 1:30), function(day) {\n      sapply(c(\"PM25\", \"NO2\", \"SO2\"),\n             function(pol)\n               rnorm(24, mean = 50, sd = 10),\n             simplify = FALSE)\n    }, simplify = FALSE)\n  }, simplify = FALSE)\n\nnorm &lt;- function(x) { # normalize function\n    (x - min(x)) / (max(x) - min(x))\n}\n(normalized_measurements &lt;- rapply(\n  measurements, norm, how = \"replace\"))\n\n\n$Ankara\n$Ankara$day1\n$Ankara$day1$PM25\n [1] 0.375 0.463 0.939 0.543 0.558 0.981 0.647 0.187 0.341\n[10] 0.405 0.850 0.620 0.631 0.553 0.376 1.000 0.657 0.000\n[19] 0.711 0.398 0.239 0.466 0.251 0.330\n\n$Ankara$day1$NO2\n [1] 0.275 0.000 0.655 0.477 0.142 0.763 0.548 0.361 0.670\n[10] 0.665 0.651 0.616 0.581 0.421 0.358 0.339 0.257 0.384\n[19] 0.109 1.000 0.751 0.146 0.333 0.316\n\n$Ankara$day1$SO2\n [1] 0.709 0.511 0.588 0.523 0.520 0.844 0.478 0.878 0.174\n[10] 0.664 0.558 0.579 0.617 0.414 0.453 0.296 0.284 0.599\n[19] 0.633 0.542 0.741 1.000 0.417 0.000\n\n\n$Ankara$day2\n$Ankara$day2$PM25\n [1] 0.863 0.198 0.206 0.870 0.363 0.000 0.543 0.419 0.475\n[10] 0.622 0.329 0.723 0.387 0.601 0.898 0.641 0.347 0.918\n[19] 0.858 0.685 0.565 0.230 1.000 0.240\n\n$Ankara$day2$NO2\n [1] 1.000 0.830 0.372 0.166 0.248 0.499 0.369 0.342 0.186\n[10] 0.421 0.229 0.000 0.334 0.671 0.283 0.590 0.013 0.418\n[19] 0.567 0.511 0.460 0.266 0.212 0.167\n\n$Ankara$day2$SO2\n [1] 0.548 0.279 0.394 0.454 0.984 0.354 0.578 0.538 0.275\n[10] 0.500 0.883 0.632 0.529 0.412 0.000 0.804 0.150 0.705\n[19] 1.000 0.154 0.695 0.452 0.121 0.136\n\n\n$Ankara$day3\n$Ankara$day3$PM25\n [1] 0.0000 0.2211 0.0289 0.4728 0.7644 0.0649 0.4934 0.4895\n [9] 0.3993 0.1225 0.3061 0.2728 0.4470 0.2538 0.5325 0.2534\n[17] 0.5481 0.1141 0.0705 1.0000 0.2446 0.3923 0.4622 0.2308\n\n$Ankara$day3$NO2\n [1] 0.5002 0.4543 0.2731 0.3602 0.3293 1.0000 0.1100 0.0000\n [9] 0.3516 0.4362 0.4753 0.1977 0.0101 0.7317 0.2315 0.0715\n[17] 0.2666 0.2788 0.6841 0.3662 0.5738 0.1851 0.4064 0.2392\n\n$Ankara$day3$SO2\n [1] 0.4004 0.1184 0.0000 0.9426 0.5447 0.0170 0.1993 0.0357\n [9] 1.0000 0.7474 0.2979 0.5283 0.2554 0.2378 0.1488 0.2041\n[17] 0.8439 0.3581 0.4075 0.4429 0.7247 0.2264 0.0907 0.8509\n\n\n$Ankara$day4\n$Ankara$day4$PM25\n [1] 0.26766 0.18151 0.02467 0.00987 0.22707 0.59133 0.74164\n [8] 0.61871 0.29134 0.42073 0.18715 0.18329 0.67282 0.09211\n[15] 1.00000 0.37487 0.46803 0.17678 0.22694 0.00000 0.34657\n[22] 0.53051 0.50158 0.16364\n\n$Ankara$day4$NO2\n [1] 0.2167 0.3000 0.8817 0.1152 0.3941 1.0000 0.4168 0.0504\n [9] 0.2527 0.5875 0.3369 0.2827 0.3461 0.4726 0.9115 0.4204\n[17] 0.7608 0.6298 0.4131 0.0000 0.2945 0.3036 0.4600 0.8247\n\n$Ankara$day4$SO2\n [1] 1.0000 0.8159 0.4009 0.0000 0.3377 0.4558 0.6424 0.6714\n [9] 0.6027 0.0892 0.6436 0.3235 0.4769 0.4522 0.5395 0.4398\n[17] 0.0220 0.6156 0.5291 0.3682 0.4629 0.4669 0.4883 0.8389\n\n\n$Ankara$day5\n$Ankara$day5$PM25\n [1] 0.443 0.539 0.785 0.757 0.780 0.355 0.991 0.514 0.958\n[10] 0.164 0.502 0.806 0.321 0.311 0.265 0.237 0.389 0.579\n[19] 0.000 0.549 0.802 1.000 0.818 0.684\n\n$Ankara$day5$NO2\n [1] 0.0871 0.3882 0.4550 0.7375 0.5209 0.2124 1.0000 0.7931\n [9] 0.6128 0.8752 0.1909 0.7261 0.4093 0.7322 0.5329 0.7186\n[17] 0.9066 0.5512 0.8215 0.2312 0.3561 0.9558 0.6502 0.0000\n\n$Ankara$day5$SO2\n [1] 0.2187 0.4497 0.6614 0.4693 0.6134 0.6799 0.8213 0.5006\n [9] 0.4792 0.1415 0.5092 0.3760 0.2962 0.4538 0.6910 0.0939\n[17] 0.4047 0.5127 0.3122 0.5558 0.5712 0.4830 0.0000 1.0000\n\n\n$Ankara$day6\n$Ankara$day6$PM25\n [1] 0.3767 0.5803 0.4906 0.6691 0.6199 0.3757 0.5154 0.2008\n [9] 0.6292 0.3160 1.0000 0.0331 0.3153 0.6217 0.5468 0.2854\n[17] 0.1886 0.4599 0.4221 0.0000 0.4338 0.4708 0.4671 0.1748\n\n$Ankara$day6$NO2\n [1] 0.719 0.966 0.714 0.279 0.470 0.684 0.413 0.000 0.831\n[10] 0.363 0.433 1.000 0.378 0.820 0.245 0.492 0.569 0.270\n[19] 0.416 0.581 0.772 0.138 0.494 0.796\n\n$Ankara$day6$SO2\n [1] 0.417 0.569 0.622 0.578 0.654 0.500 0.442 0.000 0.506\n[10] 0.610 0.631 0.414 0.877 0.581 0.549 0.777 0.382 0.435\n[19] 1.000 0.527 0.848 0.239 0.487 0.599\n\n\n$Ankara$day7\n$Ankara$day7$PM25\n [1] 0.724 0.405 0.655 0.387 0.825 0.916 0.107 0.952 0.347\n[10] 0.762 0.812 0.602 0.493 0.691 0.758 0.866 0.149 0.250\n[19] 1.000 0.906 0.757 0.825 0.875 0.000\n\n$Ankara$day7$NO2\n [1] 0.7377 0.2541 0.4710 0.3116 0.6655 0.2954 0.5583 0.2826\n [9] 0.0698 0.7679 0.6257 0.9239 0.4208 0.7422 1.0000 0.3158\n[17] 0.0000 0.3285 0.3362 0.4471 0.9202 0.3022 0.5142 0.3321\n\n$Ankara$day7$SO2\n [1] 0.4618 0.5602 0.8999 0.4956 0.6938 0.7159 0.7614 0.2625\n [9] 1.0000 0.3273 0.4195 0.9253 0.8885 0.0898 0.1625 0.0000\n[17] 0.5159 0.5102 0.5770 0.6400 0.2533 0.1221 0.7990 0.7066\n\n\n$Ankara$day8\n$Ankara$day8$PM25\n [1] 0.170 0.597 0.355 0.000 0.671 0.602 0.597 0.691 0.893\n[10] 0.688 0.440 0.404 0.586 0.720 0.312 0.570 0.919 0.593\n[19] 0.415 0.543 0.963 0.792 1.000 0.668\n\n$Ankara$day8$NO2\n [1] 0.4754 0.2239 0.5261 0.2374 0.0000 0.4021 0.8742 0.5769\n [9] 0.6715 0.4621 0.2109 0.3164 0.2979 0.2472 0.5518 0.0580\n[17] 0.5939 0.5933 0.0576 0.5350 1.0000 0.2242 0.5883 0.1658\n\n$Ankara$day8$SO2\n [1] 0.826029 0.549295 1.000000 0.000000 0.452499 0.299608\n [7] 0.405578 0.266610 0.200948 0.655020 0.119384 0.946033\n[13] 0.087681 0.501481 0.640319 0.657596 0.371992 0.494545\n[19] 0.777989 0.000805 0.217697 0.571983 0.326013 0.909379\n\n\n$Ankara$day9\n$Ankara$day9$PM25\n [1] 0.746 0.617 0.279 0.607 0.534 0.580 0.349 0.708 0.379\n[10] 0.553 0.683 0.434 0.727 0.320 0.000 0.701 0.782 0.540\n[19] 0.710 0.354 0.574 0.186 0.855 1.000\n\n$Ankara$day9$NO2\n [1] 0.857 0.600 0.599 0.253 0.791 0.557 0.453 0.277 0.537\n[10] 0.409 0.514 0.323 1.000 0.603 0.857 0.000 0.501 0.449\n[19] 0.321 0.967 0.277 0.681 0.804 0.648\n\n$Ankara$day9$SO2\n [1] 0.2650 0.7157 0.5245 0.2182 0.1377 1.0000 0.3138 0.0217\n [9] 0.6145 0.5591 0.1462 0.0000 0.4533 0.7649 0.6400 0.3598\n[17] 0.2752 0.5494 0.5212 0.6384 0.3839 0.7053 0.2760 0.4001\n\n\n$Ankara$day10\n$Ankara$day10$PM25\n [1] 0.7093 0.7684 0.0737 0.5590 0.6780 0.1894 0.6476 0.3371\n [9] 0.7756 0.6613 0.7160 0.5622 0.7384 0.8610 1.0000 0.5268\n[17] 0.0000 0.5410 0.5823 0.4967 0.6684 0.7733 0.4107 0.4638\n\n$Ankara$day10$NO2\n [1] 0.5459 0.3369 0.4783 0.0257 0.2113 0.1655 0.2700 0.3053\n [9] 0.5424 0.6747 0.2978 0.2384 0.2285 0.3668 0.4055 0.5648\n[17] 0.3873 0.0000 0.4380 0.7199 0.7208 0.2843 0.1170 1.0000\n\n$Ankara$day10$SO2\n [1] 0.4751 0.4963 0.6659 0.0000 0.2899 0.0241 0.3014 0.5671\n [9] 0.0816 0.7213 0.6229 0.2323 0.6023 0.7731 0.8755 0.4586\n[17] 0.4976 0.4999 1.0000 0.8965 0.8013 0.4342 0.6504 0.6602\n\n\n$Ankara$day11\n$Ankara$day11$PM25\n [1] 0.2085 0.0498 0.5976 0.0958 0.4496 0.5071 0.5796 0.4930\n [9] 0.2799 0.6772 0.8511 0.6529 0.0000 0.7727 0.4363 0.5706\n[17] 0.5930 0.4269 0.4318 0.6848 0.6137 0.6781 1.0000 0.6028\n\n$Ankara$day11$NO2\n [1] 0.4932 0.0000 1.0000 0.3525 0.9353 0.5274 0.7647 0.4286\n [9] 0.5553 0.4946 0.4130 0.4264 0.6575 0.4098 0.0353 0.4110\n[17] 0.5610 0.5767 0.5767 0.1058 0.5262 0.6484 0.7113 0.4050\n\n$Ankara$day11$SO2\n [1] 0.4266 0.8983 0.0757 0.3966 0.6297 0.0887 0.5834 1.0000\n [9] 0.5094 0.4379 0.6343 0.4377 0.7225 0.7462 0.5112 0.2037\n[17] 0.1668 0.3559 0.7183 0.0000 0.0187 0.3400 0.6133 0.2723\n\n\n$Ankara$day12\n$Ankara$day12$PM25\n [1] 0.727 0.608 0.501 0.712 0.620 0.442 0.587 0.676 0.613\n[10] 0.396 0.720 0.784 0.596 0.568 0.521 1.000 0.596 0.503\n[19] 0.000 0.202 0.520 0.581 0.596 0.713\n\n$Ankara$day12$NO2\n [1] 0.4923 0.9104 0.2764 0.1912 0.1851 0.7702 0.5253 0.7843\n [9] 0.4704 0.3742 0.4406 0.0000 0.2027 0.1219 0.8628 0.3726\n[17] 0.7842 1.0000 0.4930 0.6341 0.0301 0.3069 0.5666 0.6387\n\n$Ankara$day12$SO2\n [1] 0.1688 1.0000 0.2414 0.3676 0.5089 0.3458 0.1968 0.6043\n [9] 0.7419 0.3449 0.4878 0.3286 0.5974 0.0730 0.9122 0.2064\n[17] 0.0000 0.2674 0.3875 0.7439 0.5720 0.3864 0.0167 0.1431\n\n\n$Ankara$day13\n$Ankara$day13$PM25\n [1] 0.385 1.000 0.000 0.678 0.302 0.799 0.163 0.454 0.172\n[10] 0.626 0.758 0.864 0.602 0.839 0.704 0.392 0.530 0.201\n[19] 0.380 0.698 0.544 0.525 0.186 0.285\n\n$Ankara$day13$NO2\n [1] 0.1119 0.4203 0.0518 0.4646 0.0183 0.8014 0.4376 0.1288\n [9] 0.3793 0.2215 0.4139 0.3799 0.0455 0.1048 0.3948 0.7510\n[17] 0.6036 0.1491 0.5348 0.3023 0.3953 0.3844 1.0000 0.0000\n\n$Ankara$day13$SO2\n [1] 0.4591 0.0329 0.5699 0.6847 0.7638 0.0000 0.5298 0.7973\n [9] 0.3424 0.3882 0.4280 0.5189 0.5870 0.7348 0.4146 0.4807\n[17] 1.0000 0.5339 0.4790 0.1321 0.4369 0.3861 0.4337 0.3058\n\n\n$Ankara$day14\n$Ankara$day14$PM25\n [1] 0.2706 0.2614 0.3985 0.8271 0.7407 0.3591 0.0000 0.2278\n [9] 0.3326 0.4846 0.2771 1.0000 0.3828 0.1278 0.4183 0.1843\n[17] 0.4989 0.5198 0.5529 0.0173 0.5163 0.5406 0.0717 0.7153\n\n$Ankara$day14$NO2\n [1] 0.6556 0.9988 0.5135 0.4886 0.4999 0.4938 0.0595 0.0996\n [9] 0.4605 0.3465 0.4904 0.0000 0.1387 0.2286 0.7013 0.2293\n[17] 0.2970 0.4961 0.4050 0.5112 1.0000 0.2234 0.4089 0.3610\n\n$Ankara$day14$SO2\n [1] 0.818 0.358 0.497 0.672 0.300 0.847 0.649 0.297 0.605\n[10] 0.470 0.576 0.495 0.729 0.241 0.408 0.463 0.313 0.304\n[19] 0.510 0.487 0.000 0.723 0.564 1.000\n\n\n$Ankara$day15\n$Ankara$day15$PM25\n [1] 0.5208 0.2682 0.9922 1.0000 0.0959 0.4726 0.3208 0.4097\n [9] 0.4187 0.0863 0.4316 0.7583 0.3313 0.3315 0.6800 0.5684\n[17] 0.0000 0.4189 0.7369 0.6838 0.4616 0.5289 0.1008 0.4349\n\n$Ankara$day15$NO2\n [1] 0.1145 0.2728 0.7173 0.0563 0.5040 0.5555 0.4364 1.0000\n [9] 0.0928 0.6122 0.3905 0.3357 0.5669 0.0935 0.0000 0.2612\n[17] 0.9775 0.4367 0.5246 0.3583 0.5689 0.1154 0.7882 0.6053\n\n$Ankara$day15$SO2\n [1] 0.0986 0.3987 0.6295 0.5742 0.8964 0.1660 0.7689 0.7411\n [9] 0.3231 0.0395 0.0000 0.5393 0.3549 1.0000 0.5663 0.2500\n[17] 0.0222 0.1767 0.4993 0.2225 0.5590 0.2632 0.3429 0.1250\n\n\n$Ankara$day16\n$Ankara$day16$PM25\n [1] 1.000 0.633 0.609 0.160 0.709 0.316 0.347 0.770 0.449\n[10] 0.147 0.968 0.000 0.689 0.793 0.408 0.659 0.658 0.798\n[19] 0.668 0.498 0.769 0.742 0.336 0.228\n\n$Ankara$day16$NO2\n [1] 0.417 0.334 0.197 0.403 0.132 0.418 0.266 0.571 0.854\n[10] 0.210 0.590 0.545 0.373 0.299 0.690 0.000 0.263 0.110\n[19] 0.655 0.350 0.285 1.000 0.377 0.301\n\n$Ankara$day16$SO2\n [1] 0.594 0.000 0.654 0.468 0.647 0.186 0.173 0.278 0.254\n[10] 0.911 1.000 0.448 0.384 0.394 0.520 0.529 0.590 0.261\n[19] 0.229 0.879 0.324 0.595 0.480 0.194\n\n\n$Ankara$day17\n$Ankara$day17$PM25\n [1] 0.745 0.626 0.976 0.610 0.482 0.656 0.238 0.338 0.722\n[10] 0.481 0.558 0.544 0.391 0.000 0.676 0.794 0.208 1.000\n[19] 0.687 0.960 0.303 0.624 0.548 0.796\n\n$Ankara$day17$NO2\n [1] 0.3695 0.4983 0.0957 0.3236 0.5291 0.3398 0.4907 0.3941\n [9] 0.6388 0.7666 0.3134 0.4307 0.8284 0.0000 0.4278 0.9707\n[17] 1.0000 0.5363 0.3040 0.5383 0.3520 0.8314 0.3170 0.5855\n\n$Ankara$day17$SO2\n [1] 0.85127 0.43162 0.92186 0.43453 0.85444 0.99655 0.36125\n [8] 1.00000 0.51326 0.75210 0.72391 0.53226 0.74410 0.28753\n[15] 0.62094 0.91402 0.00000 0.20907 0.30839 0.17825 0.79025\n[22] 0.35989 0.00292 0.46816\n\n\n$Ankara$day18\n$Ankara$day18$PM25\n [1] 0.3971 0.7179 0.2136 0.7962 0.6000 0.5907 0.2783 1.0000\n [9] 0.4553 0.0282 0.4451 0.0000 0.4177 0.3889 0.6729 0.7572\n[17] 0.3108 0.7049 0.8639 0.2959 0.3297 0.6649 0.5446 0.6387\n\n$Ankara$day18$NO2\n [1] 0.9888 0.5879 0.8498 0.6808 0.6063 0.5875 0.9442 0.0405\n [9] 0.0000 0.6686 0.3883 0.4646 0.7275 0.7322 0.3319 0.3123\n[17] 0.4644 0.8542 0.6033 1.0000 0.4324 0.8789 0.7833 0.6766\n\n$Ankara$day18$SO2\n [1] 0.6676 0.4976 0.5394 0.6223 0.5781 0.7969 0.5394 0.5489\n [9] 0.4476 0.5323 0.5493 0.0000 0.2322 0.5484 0.5012 0.2723\n[17] 0.0788 0.4794 0.7260 1.0000 0.5567 0.9315 0.5864 0.5944\n\n\n$Ankara$day19\n$Ankara$day19$PM25\n [1] 0.666 0.273 0.542 0.857 0.313 0.454 0.182 0.676 0.699\n[10] 0.772 0.159 0.594 0.249 0.559 1.000 0.394 0.794 0.313\n[19] 0.402 0.703 0.336 0.000 0.975 0.677\n\n$Ankara$day19$NO2\n [1] 0.2619 0.0000 0.7236 1.0000 0.4089 0.5282 0.5978 0.2400\n [9] 0.3051 0.0496 0.2335 0.4859 0.3163 0.3306 0.3494 0.0242\n[17] 0.5259 0.1023 0.3316 0.2889 0.3297 0.6415 0.2622 0.2249\n\n$Ankara$day19$SO2\n [1] 0.00000 0.20253 0.10027 0.54680 0.18627 0.51733 0.38954\n [8] 0.02442 0.20681 0.68216 0.68726 1.00000 0.43006 0.00676\n[15] 0.21310 0.54696 0.97009 0.46229 0.75457 0.64896 0.09973\n[22] 0.38254 0.80134 0.67960\n\n\n$Ankara$day20\n$Ankara$day20$PM25\n [1] 0.745 0.749 0.453 0.199 1.000 0.168 0.315 0.796 0.216\n[10] 0.434 0.241 0.793 0.740 0.732 0.739 0.774 0.799 0.000\n[19] 0.558 0.638 0.825 0.239 0.450 0.274\n\n$Ankara$day20$NO2\n [1] 0.900 0.972 0.812 0.156 0.702 0.930 0.610 0.370 0.201\n[10] 0.338 0.788 0.414 0.629 0.977 0.744 1.000 0.000 0.463\n[19] 0.576 0.744 0.174 0.818 0.655 0.641\n\n$Ankara$day20$SO2\n [1] 0.749 0.603 0.847 0.782 0.595 0.874 0.699 0.787 0.491\n[10] 1.000 0.629 0.829 0.607 0.565 0.814 0.260 0.742 0.722\n[19] 0.000 0.717 0.123 0.785 0.524 0.468\n\n\n$Ankara$day21\n$Ankara$day21$PM25\n [1] 0.5167 0.8757 0.3532 0.6637 0.6072 0.2116 0.0655 0.0000\n [9] 0.6619 0.5094 1.0000 0.6677 0.7396 0.8657 0.3882 0.6512\n[17] 0.7445 0.8748 0.7169 0.6281 0.2926 0.7083 0.6486 0.6835\n\n$Ankara$day21$NO2\n [1] 0.7171 0.5200 0.5594 0.8003 0.6377 0.3220 0.4922 0.1679\n [9] 0.2788 0.5380 0.0169 0.0514 0.9311 0.4019 0.0000 0.5480\n[17] 1.0000 0.7924 0.7227 0.9567 0.3405 0.8136 0.3986 0.5839\n\n$Ankara$day21$SO2\n [1] 0.982 0.658 0.605 0.117 0.201 1.000 0.121 0.461 0.638\n[10] 0.671 0.689 0.363 0.192 0.326 0.171 0.569 0.697 0.959\n[19] 0.501 0.178 0.672 0.641 0.343 0.000\n\n\n$Ankara$day22\n$Ankara$day22$PM25\n [1] 0.679 0.797 0.341 0.607 0.347 0.654 0.398 0.325 0.471\n[10] 0.344 0.246 0.334 0.433 0.502 0.926 0.000 0.371 0.638\n[19] 1.000 0.572 0.431 0.337 0.568 0.752\n\n$Ankara$day22$NO2\n [1] 0.4361 0.5473 0.5644 0.7284 0.8507 0.5843 0.4705 0.9414\n [9] 0.5476 1.0000 0.4751 0.6914 0.0000 0.4589 0.4879 0.2522\n[17] 0.1633 0.7984 0.7875 0.0792 0.6308 0.1388 0.1585 0.6631\n\n$Ankara$day22$SO2\n [1] 0.3088 0.8858 0.5577 0.7287 0.3646 0.1490 0.8588 0.6263\n [9] 0.4624 0.5683 1.0000 0.3047 0.2871 0.3316 0.0000 0.8261\n[17] 0.6106 0.6157 0.5296 0.3692 0.2616 0.8371 0.0546 0.6958\n\n\n$Ankara$day23\n$Ankara$day23$PM25\n [1] 0.308 0.535 0.319 0.365 0.850 0.617 0.022 0.502 0.380\n[10] 0.235 0.520 0.503 0.406 0.893 0.000 0.653 0.415 0.615\n[19] 0.380 0.350 0.114 0.431 1.000 0.685\n\n$Ankara$day23$NO2\n [1] 0.7001 0.5589 0.6015 0.5566 0.4773 0.2808 0.2900 0.0917\n [9] 0.3879 0.5560 0.5806 0.4067 0.2873 1.0000 0.5258 0.6528\n[17] 0.3263 0.3819 0.4723 0.7003 0.3311 0.5475 0.0000 0.2948\n\n$Ankara$day23$SO2\n [1] 0.2304 0.8668 0.5287 0.4689 0.9345 0.8676 0.3346 0.6855\n [9] 0.2472 0.4464 1.0000 0.9560 0.8657 0.4212 0.0744 0.2611\n[17] 0.8243 0.4954 0.0000 0.5246 0.9454 0.7425 0.3549 0.1632\n\n\n$Ankara$day24\n$Ankara$day24$PM25\n [1] 0.3141 0.5571 0.7979 0.0000 0.8361 0.5489 0.7081 0.0809\n [9] 0.3593 0.4209 0.8419 0.8375 0.6701 1.0000 0.4019 0.8331\n[17] 0.5372 0.3591 0.8079 0.9370 0.7952 0.4036 0.4148 0.9361\n\n$Ankara$day24$NO2\n [1] 0.692 0.789 0.551 0.876 0.455 0.747 0.454 0.119 0.347\n[10] 0.648 0.800 0.264 0.365 0.979 0.532 0.723 0.513 0.559\n[19] 0.638 0.622 0.581 0.524 0.000 1.000\n\n$Ankara$day24$SO2\n [1] 0.832 0.212 0.412 0.743 0.662 0.722 0.219 1.000 0.206\n[10] 0.610 0.478 0.362 0.367 0.236 0.796 0.467 0.504 0.493\n[19] 0.368 0.205 0.503 0.000 0.145 0.218\n\n\n$Ankara$day25\n$Ankara$day25$PM25\n [1] 0.1285 0.4775 0.9163 0.0000 0.5735 0.7106 0.1547 0.4304\n [9] 0.6883 0.3707 0.3810 0.5365 0.4283 0.2824 0.4051 1.0000\n[17] 0.7030 0.1768 0.0796 0.3400 0.8370 0.5321 0.2395 0.7055\n\n$Ankara$day25$NO2\n [1] 0.4334 0.2095 0.5682 0.8093 0.5622 0.5072 0.3148 0.5926\n [9] 0.2209 0.0887 0.4538 0.4558 1.0000 0.1878 0.5024 0.6462\n[17] 0.7019 0.4612 0.2951 0.4487 0.9035 0.5731 0.0000 0.7865\n\n$Ankara$day25$SO2\n [1] 0.61406 0.39798 0.40389 0.35423 0.50718 0.22095 0.51488\n [8] 0.06004 0.48595 0.82724 0.60228 0.79973 0.00000 0.43124\n[15] 0.64295 0.00861 1.00000 0.02110 0.47254 0.46776 0.45641\n[22] 0.33141 0.57997 0.02247\n\n\n$Ankara$day26\n$Ankara$day26$PM25\n [1] 0.0385 0.2507 0.4503 0.8895 1.0000 0.5762 0.5970 0.3880\n [9] 0.4855 0.0000 0.5663 0.2904 0.5813 0.3538 0.2483 0.3962\n[17] 0.3468 0.8353 0.5394 0.6140 0.0547 0.9697 0.5227 0.1832\n\n$Ankara$day26$NO2\n [1] 0.6133 0.7705 0.1394 1.0000 0.4826 0.8407 0.5470 0.4337\n [9] 0.0131 0.2188 0.5152 0.7586 0.0000 0.9119 0.9185 0.2067\n[17] 0.6590 0.2374 0.4918 0.7868 0.7699 0.2891 0.4186 0.2535\n\n$Ankara$day26$SO2\n [1] 0.606 0.218 0.000 0.836 1.000 0.443 0.692 0.535 0.837\n[10] 0.649 0.578 0.169 0.757 0.465 0.250 0.495 0.510 0.752\n[19] 0.298 0.423 0.840 0.813 0.774 0.875\n\n\n$Ankara$day27\n$Ankara$day27$PM25\n [1] 0.495 0.316 0.576 0.691 1.000 0.000 0.511 0.598 0.436\n[10] 0.093 0.618 0.271 0.564 0.656 0.742 0.093 0.696 0.276\n[19] 0.154 0.749 0.711 0.393 0.622 0.252\n\n$Ankara$day27$NO2\n [1] 0.486 0.497 0.460 0.661 0.820 0.425 0.509 0.839 0.450\n[10] 0.000 0.617 0.340 0.318 0.797 1.000 0.310 0.720 0.497\n[19] 0.544 0.757 0.558 0.347 0.422 0.651\n\n$Ankara$day27$SO2\n [1] 0.0000 0.9433 0.2114 0.6482 0.5899 0.9977 0.6941 0.6702\n [9] 0.8342 0.4148 0.5884 0.9660 0.8301 0.2915 0.8176 0.2635\n[17] 0.4777 0.9751 0.0233 0.1531 1.0000 0.4182 0.9841 0.5960\n\n\n$Ankara$day28\n$Ankara$day28$PM25\n [1] 0.504 0.584 0.280 0.352 0.329 1.000 0.441 0.513 0.344\n[10] 0.365 0.702 0.345 0.419 0.493 0.326 0.822 0.119 0.833\n[19] 0.342 0.697 0.000 0.614 0.597 0.151\n\n$Ankara$day28$NO2\n [1] 0.276 0.556 0.832 0.276 0.434 0.957 0.171 0.775 0.630\n[10] 0.177 0.305 0.727 0.572 0.914 0.324 0.000 0.805 0.322\n[19] 0.534 1.000 0.426 0.951 0.180 0.769\n\n$Ankara$day28$SO2\n [1] 0.533 0.278 0.137 0.489 0.535 0.541 0.608 0.349 0.336\n[10] 0.530 0.328 0.785 0.514 0.309 0.000 0.302 1.000 0.323\n[19] 0.252 0.638 0.584 0.664 0.397 0.760\n\n\n$Ankara$day29\n$Ankara$day29$PM25\n [1] 0.0000 0.3478 0.1450 0.5736 0.4031 0.7064 1.0000 0.4064\n [9] 0.1975 0.1080 0.2815 0.3414 0.9794 0.0135 0.0246 0.2367\n[17] 0.5448 0.6170 0.0819 0.4022 0.3496 0.7328 0.7000 0.2663\n\n$Ankara$day29$NO2\n [1] 0.534 0.724 0.000 0.422 0.700 0.355 0.501 0.513 0.292\n[10] 0.207 0.457 0.410 0.781 1.000 0.516 0.645 0.497 0.708\n[19] 0.588 0.594 0.869 0.209 0.974 0.629\n\n$Ankara$day29$SO2\n [1] 0.7837 0.5515 0.6757 0.8441 0.0805 0.5386 0.9106 0.6348\n [9] 0.4763 0.5279 0.8009 0.2149 1.0000 0.0476 0.5694 0.4804\n[17] 0.3359 0.3894 0.8054 0.6895 0.6328 0.0000 0.3122 0.6859\n\n\n$Ankara$day30\n$Ankara$day30$PM25\n [1] 0.1219 0.1589 1.0000 0.6019 0.0463 0.3084 0.3921 0.2120\n [9] 0.0827 0.4983 0.8595 0.6252 0.4307 0.6985 0.8835 0.4579\n[17] 0.7295 0.0000 0.4081 0.3304 0.6110 0.6847 0.4656 0.1728\n\n$Ankara$day30$NO2\n [1] 0.396 0.698 0.969 0.431 0.532 0.711 0.490 0.659 0.617\n[10] 0.434 0.837 0.841 0.885 0.946 0.502 0.512 0.694 0.786\n[19] 0.543 0.522 0.474 1.000 0.000 0.587\n\n$Ankara$day30$SO2\n [1] 0.5778 0.3014 0.6653 0.0729 0.8087 0.1494 0.0135 0.3759\n [9] 0.6090 0.4041 0.4274 0.6521 0.3016 0.5466 0.6936 0.9797\n[17] 0.6889 1.0000 0.6823 0.5674 0.0000 0.2598 0.4879 0.7476\n\n\n\n$Istanbul\n$Istanbul$day1\n$Istanbul$day1$PM25\n [1] 0.535 0.820 0.291 0.551 0.712 0.523 0.678 0.420 0.764\n[10] 0.614 0.626 0.000 0.419 0.151 0.113 0.479 0.588 0.734\n[19] 1.000 0.787 0.974 0.468 0.540 0.998\n\n$Istanbul$day1$NO2\n [1] 0.424 0.000 0.210 0.678 0.270 0.508 0.428 0.299 0.336\n[10] 0.523 0.477 0.736 0.374 0.191 0.466 0.602 1.000 0.307\n[19] 0.342 0.647 0.747 0.258 0.592 0.281\n\n$Istanbul$day1$SO2\n [1] 0.326 0.714 0.587 0.657 0.420 1.000 0.724 0.470 0.733\n[10] 0.265 0.528 0.904 0.515 0.784 0.507 0.000 0.346 0.616\n[19] 0.915 0.416 0.629 0.326 0.313 0.372\n\n\n$Istanbul$day2\n$Istanbul$day2$PM25\n [1] 1.0000 0.8761 0.7759 0.9267 0.4816 0.8238 0.6649 0.3011\n [9] 0.3641 0.6188 0.6637 0.5114 0.3163 0.0000 0.7272 0.5190\n[17] 0.7630 0.1575 0.2421 0.5721 0.1960 0.0312 0.8308 0.8647\n\n$Istanbul$day2$NO2\n [1] 0.258 0.517 0.223 0.718 0.599 0.313 0.345 0.247 0.758\n[10] 0.804 0.738 0.322 0.000 0.791 0.549 0.596 0.962 0.305\n[19] 1.000 0.469 0.366 0.539 0.743 0.539\n\n$Istanbul$day2$SO2\n [1] 0.393 0.542 0.000 0.487 0.719 0.569 0.774 0.726 0.764\n[10] 0.767 0.193 0.610 1.000 0.494 0.718 0.644 0.743 0.544\n[19] 0.454 0.627 0.659 0.565 0.617 0.708\n\n\n$Istanbul$day3\n$Istanbul$day3$PM25\n [1] 0.293 0.748 1.000 0.828 0.370 0.045 0.491 0.687 0.662\n[10] 0.186 0.213 0.509 0.626 0.685 0.671 0.248 0.166 0.000\n[19] 0.598 0.674 0.557 0.226 0.850 0.390\n\n$Istanbul$day3$NO2\n [1] 1.000 0.668 0.841 0.608 0.501 0.245 0.368 0.506 0.595\n[10] 0.510 0.471 0.569 0.377 0.374 0.125 0.748 0.532 0.496\n[19] 0.319 0.452 0.225 0.235 0.000 0.784\n\n$Istanbul$day3$SO2\n [1] 0.3003 0.0000 0.5510 0.4207 0.4492 0.2153 0.1677 0.2461\n [9] 0.3676 0.4631 0.6539 0.1468 0.0245 0.2942 1.0000 0.1663\n[17] 0.5466 0.2111 0.1542 0.0982 0.2188 0.6665 0.3428 0.3876\n\n\n$Istanbul$day4\n$Istanbul$day4$PM25\n [1] 0.749 1.000 0.737 0.289 0.369 0.256 0.000 0.841 0.479\n[10] 0.659 0.819 0.475 0.552 0.650 0.625 0.422 0.727 0.690\n[19] 0.520 0.331 0.708 0.869 0.860 0.756\n\n$Istanbul$day4$NO2\n [1] 0.4840 0.4712 0.4563 0.5030 0.8003 0.6802 0.1197 0.1186\n [9] 0.6061 0.6520 0.0000 0.3956 0.6195 1.0000 0.0782 0.2791\n[17] 0.3256 0.6587 0.7000 0.5271 0.1844 0.4449 0.4635 0.5584\n\n$Istanbul$day4$SO2\n [1] 0.7202 0.1417 0.3312 0.1345 0.0000 0.4719 0.0477 1.0000\n [9] 0.3353 0.3271 0.2952 0.7757 0.4790 0.2488 0.0186 0.0507\n[17] 0.1145 0.6176 0.2644 0.1215 0.5112 0.6503 0.1373 0.2001\n\n\n$Istanbul$day5\n$Istanbul$day5$PM25\n [1] 0.5824 0.4756 0.6010 1.0000 0.4586 0.3914 0.6251 0.4620\n [9] 0.6686 0.4087 0.6124 0.0000 0.4813 0.3196 0.1139 0.3510\n[17] 0.5905 0.5052 0.6886 0.7641 0.7298 0.3781 0.0719 0.3915\n\n$Istanbul$day5$NO2\n [1] 0.7459 0.4028 0.0000 0.5656 0.5099 0.3286 0.4811 0.7989\n [9] 0.7803 0.3138 0.4379 0.0487 0.2417 0.9687 0.8331 0.3741\n[17] 0.2511 0.0719 1.0000 0.4655 0.2772 0.7215 0.1429 0.6281\n\n$Istanbul$day5$SO2\n [1] 0.815 0.307 0.818 0.569 0.162 0.548 0.154 0.207 0.610\n[10] 0.225 0.364 0.685 0.000 0.862 1.000 0.560 0.501 0.218\n[19] 0.522 0.217 0.460 0.160 0.614 0.584\n\n\n$Istanbul$day6\n$Istanbul$day6$PM25\n [1] 0.8303 1.0000 0.3965 0.7667 0.2173 0.4399 0.7620 0.3754\n [9] 0.6243 0.3382 0.4599 0.5356 0.4044 0.0982 0.6007 0.6540\n[17] 0.5763 0.4327 0.7516 0.7923 0.0000 0.8031 0.1364 0.4658\n\n$Istanbul$day6$NO2\n [1] 0.254 0.379 0.889 0.684 0.674 0.000 0.596 0.709 0.770\n[10] 0.289 0.790 0.179 1.000 0.335 0.745 0.628 0.266 0.844\n[19] 0.553 0.759 0.602 0.772 0.550 0.837\n\n$Istanbul$day6$SO2\n [1] 0.389 0.647 0.603 0.740 0.311 0.545 0.323 0.759 0.306\n[10] 1.000 0.724 0.489 0.846 0.468 0.658 0.647 0.617 0.318\n[19] 0.126 0.000 0.359 0.693 0.423 0.140\n\n\n$Istanbul$day7\n$Istanbul$day7$PM25\n [1] 1.000 0.686 0.955 0.796 0.402 0.445 0.222 0.694 0.885\n[10] 0.335 0.274 0.725 0.206 0.949 0.657 0.163 0.610 0.556\n[19] 0.000 0.525 0.407 0.342 0.585 0.718\n\n$Istanbul$day7$NO2\n [1] 1.000 0.000 0.774 0.385 0.869 0.683 0.935 0.264 0.717\n[10] 0.672 0.844 0.551 0.866 0.502 0.505 0.610 0.359 0.499\n[19] 0.858 0.983 0.859 0.506 0.677 0.626\n\n$Istanbul$day7$SO2\n [1] 0.0000 0.5510 0.1580 0.0721 0.7211 0.2003 0.4052 0.1037\n [9] 0.4778 0.6364 0.6401 0.0668 0.9146 1.0000 0.5930 0.5147\n[17] 0.4856 0.5511 0.5943 0.5072 0.6951 0.3355 0.8679 0.4438\n\n\n$Istanbul$day8\n$Istanbul$day8$PM25\n [1] 0.1249 0.6103 0.7705 1.0000 0.6571 0.0709 0.6409 0.2880\n [9] 0.3534 0.3389 0.4053 0.9728 0.3958 0.5108 0.6935 0.9005\n[17] 0.4441 0.3973 0.4875 0.2961 0.9091 0.0000 0.4848 0.2171\n\n$Istanbul$day8$NO2\n [1] 0.144 0.617 0.977 1.000 0.476 0.444 0.482 0.780 0.000\n[10] 0.669 0.514 0.433 0.132 0.561 0.217 0.607 0.397 0.621\n[19] 0.720 0.490 0.367 0.465 0.451 0.255\n\n$Istanbul$day8$SO2\n [1] 0.1555 0.3552 0.3459 0.5331 0.8604 0.5345 0.9230 0.2006\n [9] 0.8804 0.6229 0.0156 0.5578 0.0000 0.7432 0.2374 0.3407\n[17] 0.1899 0.1311 1.0000 0.7584 0.6507 0.4461 0.6715 0.6461\n\n\n$Istanbul$day9\n$Istanbul$day9$PM25\n [1] 0.936762 0.757288 0.505701 0.503627 0.443322 0.468173\n [7] 0.498437 0.846096 0.000213 0.387638 0.523162 0.249149\n[13] 0.940473 0.499089 0.288771 0.342437 0.762613 1.000000\n[19] 0.525214 0.580307 0.328879 0.868430 0.726946 0.000000\n\n$Istanbul$day9$NO2\n [1] 0.402 0.512 0.279 0.502 0.272 0.670 0.664 0.791 0.686\n[10] 1.000 0.472 0.000 0.581 0.748 0.468 0.948 0.867 0.718\n[19] 0.593 0.427 0.527 0.700 0.833 0.496\n\n$Istanbul$day9$SO2\n [1] 0.1799 1.0000 0.4990 0.1350 0.6046 0.3821 0.5779 0.3796\n [9] 0.3513 0.3895 0.4720 0.2101 0.1985 0.3190 0.4101 0.2851\n[17] 0.4474 0.0843 0.0000 0.8506 0.4681 0.2647 0.2946 0.5673\n\n\n$Istanbul$day10\n$Istanbul$day10$PM25\n [1] 0.421 0.500 0.410 0.363 0.582 0.490 0.721 0.239 0.435\n[10] 0.421 0.249 0.660 0.441 0.187 0.345 0.243 0.669 0.967\n[19] 0.329 0.444 0.518 1.000 0.000 0.360\n\n$Istanbul$day10$NO2\n [1] 0.02349 0.28828 0.27517 0.15192 0.84810 0.41988 1.00000\n [8] 0.57371 0.00652 0.14549 0.42422 0.19317 0.44628 0.54899\n[15] 0.46443 0.31353 0.17535 0.00000 0.44264 0.60052 0.32845\n[22] 0.55471 0.95491 0.87516\n\n$Istanbul$day10$SO2\n [1] 0.3461 0.5767 0.3002 0.6083 0.4427 0.5171 0.2655 0.7225\n [9] 0.4370 0.3569 0.4387 0.4725 0.8180 0.2097 1.0000 0.2844\n[17] 0.4943 0.0000 0.3107 0.6176 0.5675 0.5465 0.3523 0.0475\n\n\n$Istanbul$day11\n$Istanbul$day11$PM25\n [1] 0.251 0.493 0.737 0.799 0.472 0.515 0.512 0.575 1.000\n[10] 0.350 0.500 0.581 0.174 0.294 0.616 0.681 0.886 0.425\n[19] 0.976 0.310 0.100 0.000 0.876 0.646\n\n$Istanbul$day11$NO2\n [1] 0.524 0.479 1.000 0.893 0.282 0.175 0.861 0.716 0.419\n[10] 0.670 0.000 0.376 0.681 0.540 0.205 0.842 0.883 0.300\n[19] 0.509 0.763 0.800 0.414 0.317 0.656\n\n$Istanbul$day11$SO2\n [1] 0.0000 0.2486 0.6922 0.0546 0.1841 0.4311 0.4154 0.0417\n [9] 0.6242 0.2302 0.4524 0.4425 0.6724 0.4761 0.4585 0.9190\n[17] 0.5888 0.6536 0.6153 0.6402 0.8369 0.4784 0.5556 1.0000\n\n\n$Istanbul$day12\n$Istanbul$day12$PM25\n [1] 0.25880 0.78099 0.23670 0.90118 0.21974 0.17726 0.70798\n [8] 0.68749 0.56899 0.48912 0.48014 1.00000 0.00000 0.12795\n[15] 0.04399 0.68629 0.34035 0.37351 0.92216 0.24475 0.99083\n[22] 0.00662 0.78868 0.50344\n\n$Istanbul$day12$NO2\n [1] 0.3227 0.3611 0.6298 0.6947 0.0934 1.0000 0.8501 0.2984\n [9] 0.3804 0.2738 0.3753 0.5233 0.4102 0.4259 0.6547 0.0000\n[17] 0.3044 0.4175 0.2526 0.5804 0.3126 0.3155 0.6032 0.5401\n\n$Istanbul$day12$SO2\n [1] 0.3619 0.3207 0.0606 0.2349 1.0000 0.3881 0.6088 0.3539\n [9] 0.5383 0.3845 0.7134 0.2798 0.0000 0.6054 0.3416 0.7365\n[17] 0.4256 0.7342 0.4781 0.3157 0.5652 0.2901 0.7879 0.4308\n\n\n$Istanbul$day13\n$Istanbul$day13$PM25\n [1] 0.0439 0.5041 0.1613 0.0000 0.6611 0.8350 0.4186 0.2510\n [9] 0.4657 0.1855 0.8513 0.8133 0.1723 0.4592 0.9530 0.5940\n[17] 0.6464 0.7669 0.8288 1.0000 0.8719 0.2366 0.5365 0.7329\n\n$Istanbul$day13$NO2\n [1] 0.545 0.143 0.419 0.763 0.597 0.280 0.608 0.535 0.697\n[10] 0.975 0.272 0.468 0.539 0.152 0.560 0.451 1.000 0.000\n[19] 0.855 0.762 0.709 0.595 0.428 0.781\n\n$Istanbul$day13$SO2\n [1] 0.2784 0.7831 0.6898 0.9049 0.3707 0.3757 0.6577 0.6588\n [9] 1.0000 0.7162 0.6075 0.8303 0.3876 0.9103 0.2347 0.6692\n[17] 0.0162 0.6399 0.0605 0.4873 0.0000 0.3570 0.3134 0.7384\n\n\n$Istanbul$day14\n$Istanbul$day14$PM25\n [1] 0.3370 0.2821 0.8682 1.0000 0.8305 0.0692 0.8844 0.1466\n [9] 0.4872 0.7247 0.4454 0.4641 0.5453 0.6344 0.6296 0.0000\n[17] 0.4567 0.5929 0.6824 0.4150 0.3015 0.1057 0.2938 0.4726\n\n$Istanbul$day14$NO2\n [1] 0.4345 0.9834 0.8820 0.0000 0.8596 0.9598 0.6014 0.7062\n [9] 0.5251 0.5871 0.2685 0.9078 0.1713 0.4545 0.3102 0.3293\n[17] 0.5535 0.5014 0.4056 0.6049 0.0106 0.7676 1.0000 0.1453\n\n$Istanbul$day14$SO2\n [1] 0.0000 1.0000 0.4534 0.4023 0.3332 0.5228 0.3979 0.2379\n [9] 0.2690 0.2932 0.3000 0.1814 0.6823 0.4134 0.1756 0.5499\n[17] 0.4838 0.3499 0.4976 0.1390 0.3331 0.1136 0.0629 0.2968\n\n\n$Istanbul$day15\n$Istanbul$day15$PM25\n [1] 0.44629 0.20548 0.36986 0.00111 0.30934 0.66963 0.15237\n [8] 0.14312 0.35988 0.52796 0.68421 1.00000 0.58726 0.55843\n[15] 0.86059 0.34182 0.36133 0.46528 0.09252 0.00000 0.81133\n[22] 0.28077 0.30686 0.18767\n\n$Istanbul$day15$NO2\n [1] 0.587 0.686 0.504 0.558 0.767 0.552 0.429 0.541 0.367\n[10] 0.577 0.354 0.865 0.000 0.644 0.446 0.998 0.502 0.662\n[19] 0.641 0.610 0.670 1.000 0.761 0.598\n\n$Istanbul$day15$SO2\n [1] 0.919 0.517 0.539 0.737 0.376 0.564 0.231 0.364 0.336\n[10] 0.110 1.000 0.137 0.204 0.764 0.316 0.712 0.120 0.318\n[19] 0.239 0.000 0.222 0.104 0.608 0.226\n\n\n$Istanbul$day16\n$Istanbul$day16$PM25\n [1] 0.586 0.433 0.647 0.273 0.000 0.987 0.757 0.732 0.146\n[10] 0.741 0.709 0.587 0.771 0.832 0.578 1.000 0.805 0.853\n[19] 0.538 0.576 0.414 0.686 0.657 0.621\n\n$Istanbul$day16$NO2\n [1] 0.2897 0.3879 0.8732 0.2353 0.3498 0.1315 0.1671 0.3759\n [9] 0.3531 0.3037 0.2693 0.3957 0.6869 0.3604 0.1578 0.2047\n[17] 0.0000 0.0643 0.2751 0.2250 0.1872 0.8741 0.8220 1.0000\n\n$Istanbul$day16$SO2\n [1] 0.6556 0.4262 0.2104 0.1964 0.3441 0.7789 0.6287 0.6833\n [9] 0.4199 0.0856 0.5455 0.4132 0.3913 1.0000 0.6784 0.4098\n[17] 0.0000 0.3955 0.7080 0.5569 0.5322 0.7213 0.4243 0.3811\n\n\n$Istanbul$day17\n$Istanbul$day17$PM25\n [1] 0.558 0.771 0.554 0.776 0.348 0.338 0.640 0.776 0.525\n[10] 0.488 0.000 0.693 0.418 0.699 0.920 0.505 0.763 0.580\n[19] 0.692 0.363 0.703 0.894 1.000 0.356\n\n$Istanbul$day17$NO2\n [1] 0.7390 0.2647 0.7340 0.4148 0.3831 0.8066 0.8357 0.6231\n [9] 0.7073 0.6683 0.6228 0.5376 0.9129 0.8192 0.8575 1.0000\n[17] 0.7461 0.4264 0.0000 0.2738 0.0999 0.3601 0.2569 0.4065\n\n$Istanbul$day17$SO2\n [1] 0.192 0.317 0.622 0.578 0.385 0.827 0.000 0.661 1.000\n[10] 0.384 0.632 0.337 0.504 0.765 0.226 0.338 0.677 0.641\n[19] 0.762 0.901 0.751 0.175 0.559 0.387\n\n\n$Istanbul$day18\n$Istanbul$day18$PM25\n [1] 0.4298 0.7542 0.5289 0.4864 0.3896 0.5714 0.0175 0.2836\n [9] 1.0000 0.6484 0.0938 0.0000 0.0946 0.6357 0.5841 0.2320\n[17] 0.3022 0.7756 0.3239 0.4113 0.5557 0.3677 0.1735 0.2867\n\n$Istanbul$day18$NO2\n [1] 0.433 0.761 0.943 0.713 0.833 0.524 0.632 0.633 0.359\n[10] 0.680 0.763 0.806 0.940 0.350 0.792 0.813 0.617 0.789\n[19] 0.362 0.707 0.000 0.727 1.000 0.987\n\n$Istanbul$day18$SO2\n [1] 0.000 0.751 0.543 0.619 0.104 0.716 0.501 0.713 0.580\n[10] 0.384 0.703 0.765 0.638 0.758 0.516 0.927 0.541 0.489\n[19] 0.870 0.887 0.785 0.677 1.000 0.388\n\n\n$Istanbul$day19\n$Istanbul$day19$PM25\n [1] 0.7569 0.9062 0.4766 0.6140 0.6203 0.7714 0.2402 0.6943\n [9] 0.0201 1.0000 0.3146 0.3806 0.5295 0.1388 0.3944 0.4784\n[17] 0.3745 0.9869 0.0000 0.4352 0.7676 0.2460 0.4265 0.9654\n\n$Istanbul$day19$NO2\n [1] 0.0193 0.2992 0.1953 0.6762 0.2827 0.6337 0.3407 0.4705\n [9] 0.7359 0.5466 0.0000 0.3696 0.6983 1.0000 0.2173 0.4504\n[17] 0.4891 0.3179 0.1468 0.9944 0.8995 0.1405 0.0149 0.4376\n\n$Istanbul$day19$SO2\n [1] 0.7162 0.5705 0.8982 0.5398 0.3004 1.0000 0.5431 0.5301\n [9] 0.5355 0.6186 0.0000 0.7821 0.7919 0.7680 0.4969 0.6299\n[17] 0.2302 0.6978 0.3912 0.9471 0.3629 0.0676 0.6490 0.1793\n\n\n$Istanbul$day20\n$Istanbul$day20$PM25\n [1] 0.257 0.713 0.994 0.432 0.757 0.138 0.957 0.500 0.296\n[10] 0.606 0.288 0.514 0.528 0.809 0.352 0.402 0.534 0.737\n[19] 1.000 0.917 0.754 0.000 0.750 0.699\n\n$Istanbul$day20$NO2\n [1] 0.2459 0.2768 0.0895 0.4055 0.4295 0.0000 0.0401 0.4490\n [9] 0.1692 0.3387 0.6431 0.3092 0.4380 0.5518 0.1465 0.6978\n[17] 0.6219 0.7048 0.3091 0.0674 0.5274 0.5524 1.0000 0.8088\n\n$Istanbul$day20$SO2\n [1] 0.306 0.163 0.594 0.957 0.116 0.223 0.892 0.916 0.481\n[10] 0.000 0.286 0.739 1.000 0.425 0.262 0.510 0.468 0.188\n[19] 0.586 0.798 0.433 0.595 0.496 0.552\n\n\n$Istanbul$day21\n$Istanbul$day21$PM25\n [1] 0.571 0.898 0.674 0.504 0.767 0.843 0.603 0.000 1.000\n[10] 0.447 0.540 0.996 0.181 0.364 0.447 0.316 0.876 0.914\n[19] 0.737 0.519 0.523 0.489 0.499 0.733\n\n$Istanbul$day21$NO2\n [1] 0.8796 0.5382 0.7320 0.0559 0.6712 0.4327 0.9269 0.9487\n [9] 0.1032 0.8828 0.5109 0.6113 0.8769 0.8245 0.4476 0.7323\n[17] 0.5355 0.9652 0.2595 0.8572 1.0000 0.0000 0.8142 0.5615\n\n$Istanbul$day21$SO2\n [1] 0.635 0.484 0.867 0.961 0.828 0.549 0.422 0.536 0.501\n[10] 0.673 0.263 0.824 0.194 0.000 0.694 0.757 1.000 0.881\n[19] 0.679 0.867 0.201 0.137 0.107 0.609\n\n\n$Istanbul$day22\n$Istanbul$day22$PM25\n [1] 0.567 0.629 0.775 0.483 0.367 0.232 0.464 0.383 0.317\n[10] 0.228 0.145 0.151 0.771 0.463 0.291 0.000 0.448 0.274\n[19] 0.378 0.347 0.596 0.382 0.355 1.000\n\n$Istanbul$day22$NO2\n [1] 0.9175 0.5734 0.2639 0.9506 0.1914 0.5094 0.8332 0.3788\n [9] 0.3947 0.6850 0.5768 0.4371 0.4514 0.6169 0.6945 0.9919\n[17] 0.3760 1.0000 0.0000 0.2948 0.0404 0.6379 0.6780 0.0357\n\n$Istanbul$day22$SO2\n [1] 0.5474 0.2189 0.6997 0.0000 0.8264 0.5159 0.1772 0.5027\n [9] 0.4403 0.4066 0.0197 0.3312 0.4718 0.0245 0.6343 1.0000\n[17] 0.7981 0.2583 0.3067 0.3720 0.7380 0.5175 0.2083 0.0147\n\n\n$Istanbul$day23\n$Istanbul$day23$PM25\n [1] 0.746 0.293 0.728 0.609 0.792 0.897 0.186 0.877 0.782\n[10] 0.501 0.582 0.726 0.774 0.104 1.000 0.190 0.000 0.857\n[19] 0.161 0.525 0.208 0.081 0.463 0.771\n\n$Istanbul$day23$NO2\n [1] 0.872 0.556 0.763 0.735 0.760 0.621 0.887 0.411 0.892\n[10] 0.656 0.657 1.000 0.627 0.444 0.372 0.988 0.000 0.631\n[19] 0.827 0.315 0.770 0.988 0.167 0.476\n\n$Istanbul$day23$SO2\n [1] 1.0000 0.1554 0.0466 0.0845 0.2324 0.4491 0.1383 0.4547\n [9] 0.6295 0.5017 0.6462 0.1043 0.3413 0.6163 0.4034 0.4585\n[17] 0.4020 0.4481 0.3756 0.0000 0.4450 0.2251 0.8859 0.1991\n\n\n$Istanbul$day24\n$Istanbul$day24$PM25\n [1] 0.539 0.000 0.333 0.290 0.812 0.462 0.537 0.576 0.365\n[10] 0.576 0.882 0.656 0.681 0.289 0.545 0.574 0.334 0.530\n[19] 1.000 0.253 0.640 0.228 0.589 0.236\n\n$Istanbul$day24$NO2\n [1] 0.573 0.153 0.444 0.742 0.389 0.416 0.757 0.899 1.000\n[10] 0.351 0.202 0.587 0.538 0.730 0.474 0.476 0.781 0.476\n[19] 0.594 0.549 0.430 0.319 0.364 0.000\n\n$Istanbul$day24$SO2\n [1] 0.8922 0.1037 0.3793 0.4398 0.8722 0.5573 0.8005 0.4607\n [9] 1.0000 0.6750 0.6916 0.7822 0.1347 0.5385 0.6002 0.3310\n[17] 0.5447 0.3435 0.6017 0.0517 0.6194 0.3668 0.7991 0.0000\n\n\n$Istanbul$day25\n$Istanbul$day25$PM25\n [1] 0.6708 0.5757 0.9952 0.0848 0.4573 0.9126 0.8769 0.7842\n [9] 0.7597 0.0528 0.9629 0.7334 0.0000 0.5928 1.0000 0.9097\n[17] 0.4275 0.9833 0.5121 0.7935 0.9909 0.7966 0.4197 0.9517\n\n$Istanbul$day25$NO2\n [1] 0.956 0.236 0.460 0.814 0.259 0.000 0.366 0.833 0.107\n[10] 0.440 0.802 0.528 0.684 1.000 0.784 0.691 0.661 0.168\n[19] 0.765 0.676 0.635 0.531 0.134 0.560\n\n$Istanbul$day25$SO2\n [1] 0.772 0.300 0.000 0.920 0.312 0.743 0.613 0.874 0.444\n[10] 0.379 0.893 1.000 0.536 0.498 0.643 0.285 0.581 0.205\n[19] 0.380 0.656 0.262 0.670 0.582 0.817\n\n\n$Istanbul$day26\n$Istanbul$day26$PM25\n [1] 0.837 0.222 0.439 0.701 0.396 0.205 0.128 0.665 0.934\n[10] 0.117 0.376 0.000 0.367 0.283 0.349 1.000 0.038 0.448\n[19] 0.762 0.214 0.168 0.362 0.643 0.274\n\n$Istanbul$day26$NO2\n [1] 0.2836 0.5267 0.0636 0.1839 0.7519 0.6128 0.0290 0.6480\n [9] 0.0000 0.4119 0.5774 0.1943 0.7921 0.7803 0.3614 0.7596\n[17] 0.5546 0.6552 0.6598 0.2263 0.0618 1.0000 0.5623 0.5943\n\n$Istanbul$day26$SO2\n [1] 0.20424 0.77602 0.94984 0.87322 0.00000 0.24172 0.52160\n [8] 0.66889 0.36383 0.28646 0.55405 0.26579 1.00000 0.04872\n[15] 0.62265 0.00671 0.37602 0.86252 0.77337 0.15337 0.13462\n[22] 0.51184 0.26324 0.59732\n\n\n$Istanbul$day27\n$Istanbul$day27$PM25\n [1] 0.384 0.248 0.504 0.332 0.833 0.525 0.589 0.897 1.000\n[10] 0.586 0.669 0.881 0.559 0.371 0.813 0.267 0.544 0.510\n[19] 0.484 0.000 0.470 0.872 0.495 0.463\n\n$Istanbul$day27$NO2\n [1] 0.409 0.350 0.636 0.761 1.000 0.157 0.705 0.552 0.675\n[10] 0.306 0.608 0.272 0.779 0.330 0.613 0.000 0.686 0.905\n[19] 0.809 0.890 0.216 0.548 0.575 0.796\n\n$Istanbul$day27$SO2\n [1] 0.3360 0.3285 0.7264 0.6022 0.0000 0.2901 0.1617 1.0000\n [9] 0.2669 0.6143 0.3919 0.3945 0.4762 0.3413 0.5477 0.4899\n[17] 0.0151 0.2540 0.2608 0.2645 0.5968 0.6860 0.1765 0.4860\n\n\n$Istanbul$day28\n$Istanbul$day28$PM25\n [1] 0.202 0.434 0.759 0.574 0.387 0.168 0.527 0.665 0.859\n[10] 0.313 0.868 0.204 0.438 0.816 0.383 0.350 0.627 0.659\n[19] 1.000 0.557 0.000 0.397 0.406 0.292\n\n$Istanbul$day28$NO2\n [1] 0.3557 1.0000 0.4953 0.2147 0.4094 0.6870 0.1691 0.4569\n [9] 0.4266 0.2243 0.2772 0.4532 0.2528 0.1602 0.0849 0.3465\n[17] 0.2443 0.1506 0.3127 0.0320 0.0233 0.6665 0.0000 0.3539\n\n$Istanbul$day28$SO2\n [1] 0.2479 0.5170 0.7435 0.2329 0.8181 0.6810 0.4856 0.6906\n [9] 0.6285 0.2949 0.0916 0.6398 0.2347 0.5883 0.0000 0.2623\n[17] 0.7004 0.9824 0.6629 0.2384 0.4496 1.0000 0.7903 0.8882\n\n\n$Istanbul$day29\n$Istanbul$day29$PM25\n [1] 0.82221 0.56606 0.86882 0.00734 0.53387 0.26949 0.49337\n [8] 0.95818 0.61832 0.14947 0.26508 0.01639 0.37277 0.20326\n[15] 0.73736 0.20610 0.70375 0.70806 0.22984 1.00000 0.42106\n[22] 0.13988 0.44070 0.00000\n\n$Istanbul$day29$NO2\n [1] 0.7866 0.3639 0.9621 0.0416 0.3045 0.5161 0.4171 0.9768\n [9] 0.5921 0.7056 0.8020 0.6504 0.8713 0.7288 0.7995 0.2024\n[17] 0.3007 0.0000 0.5394 1.0000 0.3412 0.6947 0.7292 0.6738\n\n$Istanbul$day29$SO2\n [1] 0.564 0.472 0.467 0.647 1.000 0.423 0.608 0.669 0.860\n[10] 0.578 0.818 0.230 0.840 0.669 0.340 0.000 0.541 0.826\n[19] 0.730 0.542 0.656 0.685 0.435 0.657\n\n\n$Istanbul$day30\n$Istanbul$day30$PM25\n [1] 0.574 0.414 0.591 0.612 0.653 0.689 0.631 0.610 0.534\n[10] 0.639 0.310 0.678 0.450 1.000 0.439 0.000 0.815 0.438\n[19] 0.666 0.596 0.762 0.380 0.325 0.756\n\n$Istanbul$day30$NO2\n [1] 0.1934 0.0520 0.6202 0.4130 0.9890 0.5135 0.3422 0.2749\n [9] 0.8431 0.1304 0.5806 0.5671 0.2882 0.8065 0.2452 0.4242\n[17] 0.5243 1.0000 0.5802 0.8546 0.2499 0.0000 0.6476 0.0288\n\n$Istanbul$day30$SO2\n [1] 0.17685 0.70383 0.52397 0.76757 0.92574 0.78531 0.64219\n [8] 0.68797 0.57810 1.00000 0.55316 0.75681 0.28535 0.54961\n[15] 0.00000 0.57646 0.13744 0.50317 0.47423 0.80130 0.36573\n[22] 0.35981 0.00664 0.70642\n\n\n\n$Izmir\n$Izmir$day1\n$Izmir$day1$PM25\n [1] 0.898 0.554 1.000 0.506 0.351 0.673 0.792 0.222 0.185\n[10] 0.625 0.739 0.000 0.167 0.693 0.845 0.513 0.927 0.453\n[19] 0.569 0.966 0.592 0.620 0.378 0.631\n\n$Izmir$day1$NO2\n [1] 0.294 0.028 0.219 0.388 0.481 0.689 0.452 0.414 0.698\n[10] 1.000 0.423 0.715 0.555 0.425 0.000 0.220 0.315 0.187\n[19] 0.175 0.348 0.663 0.231 0.470 0.396\n\n$Izmir$day1$SO2\n [1] 0.4881 0.3323 0.2896 0.2037 0.5085 0.5596 0.3284 1.0000\n [9] 0.3237 0.9281 0.2967 0.0000 0.0301 0.1444 0.6297 0.6761\n[17] 0.4065 0.3881 0.2135 0.1846 0.1761 0.1446 0.2129 0.1958\n\n\n$Izmir$day2\n$Izmir$day2$PM25\n [1] 0.505 0.546 0.687 0.000 0.499 0.361 0.370 0.137 0.410\n[10] 0.284 0.476 0.227 1.000 0.283 0.368 0.207 0.360 0.777\n[19] 0.350 0.519 0.256 0.676 0.495 0.294\n\n$Izmir$day2$NO2\n [1] 0.5073 0.2825 0.6087 0.1286 0.5921 1.0000 0.8833 0.5345\n [9] 0.5449 0.5769 0.7506 0.5639 0.6441 0.6557 0.5063 0.6858\n[17] 0.4444 0.7917 0.2674 0.4940 0.4352 0.0322 0.8600 0.0000\n\n$Izmir$day2$SO2\n [1] 0.8704 0.3258 0.3456 0.7684 0.5522 0.1476 0.9159 0.0000\n [9] 0.4121 0.2221 0.4406 0.5913 0.4944 0.4381 0.5334 0.6327\n[17] 0.3746 0.0949 0.3585 0.1340 0.7167 1.0000 0.3081 0.3678\n\n\n$Izmir$day3\n$Izmir$day3$PM25\n [1] 0.416 0.939 0.701 0.845 0.934 0.769 0.832 0.326 0.672\n[10] 0.498 0.281 0.324 0.986 0.283 0.564 1.000 0.795 0.896\n[19] 0.795 0.644 0.000 0.500 0.258 0.572\n\n$Izmir$day3$NO2\n [1] 1.000 0.543 0.338 0.722 0.627 0.491 0.456 0.475 0.493\n[10] 0.658 0.540 0.360 0.709 0.343 0.822 0.276 0.688 0.810\n[19] 0.802 0.483 0.675 0.000 0.616 0.484\n\n$Izmir$day3$SO2\n [1] 0.519 0.421 0.659 0.365 0.546 0.378 0.531 0.151 0.521\n[10] 0.321 0.478 0.223 0.508 1.000 0.708 0.596 0.275 0.464\n[19] 0.367 0.000 0.351 0.335 0.381 0.292\n\n\n$Izmir$day4\n$Izmir$day4$PM25\n [1] 0.6508 1.0000 0.7897 0.6531 0.4862 0.4919 0.7902 0.8244\n [9] 0.3079 0.7329 0.1449 0.1423 0.9110 0.4812 0.4804 0.7410\n[17] 0.4168 0.2376 0.5092 0.0000 0.3408 0.4278 0.0734 0.5220\n\n$Izmir$day4$NO2\n [1] 0.3847 0.8663 0.5025 0.2913 0.6382 0.5619 0.5863 0.6320\n [9] 0.4730 0.4906 0.7448 1.0000 0.0736 0.5404 0.8313 0.2682\n[17] 0.8801 0.4769 0.7603 0.9601 0.8101 0.8924 0.0000 0.2437\n\n$Izmir$day4$SO2\n [1] 0.7541 0.2970 0.4070 1.0000 0.6117 0.5899 0.5008 0.0866\n [9] 0.0000 0.5093 0.6847 0.1720 0.0223 0.9667 0.7313 0.7237\n[17] 0.8569 0.7459 0.2527 0.9589 0.1848 0.4294 0.6782 0.6621\n\n\n$Izmir$day5\n$Izmir$day5$PM25\n [1] 0.4926 0.5680 0.1254 0.0000 0.0314 0.4887 0.2165 0.4463\n [9] 0.6484 0.1616 0.5806 0.1687 0.4998 0.3469 0.1147 0.5867\n[17] 0.5276 0.1099 0.3478 1.0000 0.1406 0.2942 0.7062 0.0456\n\n$Izmir$day5$NO2\n [1] 0.847 0.302 0.329 0.415 0.614 1.000 0.508 0.532 0.176\n[10] 0.447 0.000 0.376 0.683 0.386 0.411 0.429 0.400 0.440\n[19] 0.152 0.336 0.361 0.524 0.459 0.286\n\n$Izmir$day5$SO2\n [1] 0.7870 0.9172 0.0529 0.5576 0.2358 0.2844 0.6389 0.7845\n [9] 0.6252 0.3097 0.8838 0.8500 0.1529 0.6021 0.0942 1.0000\n[17] 0.5873 0.8622 0.6280 0.4568 0.7530 0.1136 0.0000 0.2764\n\n\n$Izmir$day6\n$Izmir$day6$PM25\n [1] 0.5623 0.3622 0.3470 0.7564 0.3361 0.7722 0.2561 0.4087\n [9] 0.2404 0.3585 0.1413 0.6164 0.8336 0.5681 0.9901 0.0000\n[17] 0.2624 0.6394 0.6715 0.5810 1.0000 0.9792 0.0534 0.3611\n\n$Izmir$day6$NO2\n [1] 0.0000 0.1107 0.4617 0.4900 0.1794 0.4763 0.1938 0.4620\n [9] 0.4246 0.3156 0.1301 0.2659 0.5283 0.2579 0.3042 0.1000\n[17] 0.2744 0.3867 0.1935 0.2885 0.0915 0.5992 1.0000 0.2769\n\n$Izmir$day6$SO2\n [1] 0.660 0.883 0.490 0.490 0.696 0.377 0.533 0.457 0.374\n[10] 0.651 0.539 1.000 0.000 0.696 0.403 0.510 0.350 0.683\n[19] 0.838 0.665 0.385 0.889 0.535 0.603\n\n\n$Izmir$day7\n$Izmir$day7$PM25\n [1] 0.484 0.430 0.526 0.168 0.871 0.708 0.525 0.804 0.106\n[10] 0.849 0.568 0.662 0.353 0.248 0.324 0.833 0.851 1.000\n[19] 0.480 0.256 0.973 0.000 0.448 0.694\n\n$Izmir$day7$NO2\n [1] 0.403 0.318 0.757 1.000 0.499 0.505 0.451 0.971 0.501\n[10] 0.473 0.480 0.526 0.524 0.782 0.717 0.754 0.517 0.808\n[19] 0.000 0.894 0.695 0.566 0.754 0.390\n\n$Izmir$day7$SO2\n [1] 0.2988 0.5372 0.0000 0.4892 0.4905 0.4125 0.0866 0.8771\n [9] 0.0248 0.0275 0.3149 1.0000 0.5365 0.5855 0.4327 0.5892\n[17] 0.7056 0.7295 0.9426 0.2521 0.4513 0.6350 0.7673 0.3951\n\n\n$Izmir$day8\n$Izmir$day8$PM25\n [1] 0.872 0.459 0.530 0.996 0.000 0.724 0.966 0.529 0.863\n[10] 0.405 0.707 0.651 0.638 0.209 0.592 0.368 0.524 1.000\n[19] 0.453 0.636 0.683 0.582 0.925 0.633\n\n$Izmir$day8$NO2\n [1] 0.573 0.320 0.443 0.379 0.650 0.814 0.424 0.000 0.331\n[10] 0.310 0.821 0.570 0.914 0.632 0.161 0.655 0.355 0.536\n[19] 0.511 0.501 0.455 1.000 0.901 0.321\n\n$Izmir$day8$SO2\n [1] 0.6166 0.8721 0.8590 0.3232 0.9414 0.3743 0.5973 0.6085\n [9] 0.0484 0.5275 0.0000 0.0359 0.6492 0.6548 0.8246 0.6651\n[17] 0.3826 0.3485 0.7791 0.9524 0.7775 0.6215 0.5448 1.0000\n\n\n$Izmir$day9\n$Izmir$day9$PM25\n [1] 0.000 0.828 0.552 0.324 0.791 0.359 0.674 0.636 0.626\n[10] 0.152 0.631 0.475 0.425 0.311 0.322 0.391 0.888 0.757\n[19] 0.657 1.000 0.975 0.807 0.311 0.933\n\n$Izmir$day9$NO2\n [1] 0.4000 0.3900 0.5084 0.4654 0.3281 0.6187 0.3310 0.3106\n [9] 0.3872 0.2626 0.4877 0.4259 0.3769 0.5642 0.0000 0.5121\n[17] 0.6720 0.6669 1.0000 0.2921 0.2082 0.5302 0.0344 0.7483\n\n$Izmir$day9$SO2\n [1] 0.3289 0.6768 0.4950 0.0169 0.6348 0.3158 0.7901 0.0000\n [9] 0.5434 0.3274 0.8381 0.4037 0.7931 0.4644 0.6045 0.9166\n[17] 0.4144 1.0000 0.8050 0.8749 0.0480 0.5346 0.2306 0.7519\n\n\n$Izmir$day10\n$Izmir$day10$PM25\n [1] 0.842 0.486 0.507 0.293 0.758 0.888 0.277 0.256 0.826\n[10] 0.866 0.677 0.652 0.486 0.671 0.518 1.000 0.519 0.000\n[19] 0.702 0.363 0.764 0.307 0.556 0.681\n\n$Izmir$day10$NO2\n [1] 0.490 0.000 0.145 0.307 1.000 0.510 0.902 0.595 0.407\n[10] 0.861 0.224 0.960 0.802 0.639 0.706 0.602 0.420 0.449\n[19] 0.376 0.892 0.713 0.515 0.226 0.635\n\n$Izmir$day10$SO2\n [1] 0.11581 0.16080 1.00000 0.00274 0.15168 0.23942 0.23508\n [8] 0.08127 0.35355 0.10667 0.79783 0.44392 0.65721 0.00000\n[15] 0.40386 0.56646 0.43654 0.41316 0.10776 0.22551 0.29049\n[22] 0.17509 0.62982 0.91894\n\n\n$Izmir$day11\n$Izmir$day11$PM25\n [1] 0.8714 0.6741 0.5545 0.7080 0.4062 0.6392 0.6174 0.0621\n [9] 1.0000 0.2862 0.0000 0.5805 0.6044 0.5789 0.6117 0.3186\n[17] 0.7116 0.8859 0.3952 0.6483 0.5207 0.5672 0.7964 0.6420\n\n$Izmir$day11$NO2\n [1] 1.000 0.166 0.834 0.120 0.203 0.168 0.394 0.460 0.342\n[10] 0.509 0.000 0.200 0.528 0.671 0.413 0.550 0.598 0.513\n[19] 0.206 0.228 0.517 0.120 0.239 0.254\n\n$Izmir$day11$SO2\n [1] 0.000 0.568 0.638 0.451 1.000 0.417 0.641 0.627 0.701\n[10] 0.593 0.413 0.636 0.544 0.541 0.682 0.698 0.467 0.354\n[19] 0.862 0.485 0.358 0.189 0.549 0.584\n\n\n$Izmir$day12\n$Izmir$day12$PM25\n [1] 0.257 0.195 0.652 0.353 1.000 0.267 0.135 0.576 0.737\n[10] 0.644 0.561 0.710 0.368 0.665 0.348 0.357 0.629 0.720\n[19] 0.338 0.134 0.291 0.000 0.636 0.772\n\n$Izmir$day12$NO2\n [1] 0.965 0.206 0.325 0.428 0.525 0.234 0.719 0.351 0.735\n[10] 0.000 0.412 0.555 0.320 0.323 0.279 0.487 0.813 0.170\n[19] 0.430 0.322 0.855 1.000 0.599 0.477\n\n$Izmir$day12$SO2\n [1] 0.842 0.268 0.395 0.743 0.446 0.264 0.471 0.273 1.000\n[10] 0.293 0.708 0.413 0.831 0.705 0.209 0.502 0.367 0.571\n[19] 0.398 0.561 0.376 0.713 0.511 0.000\n\n\n$Izmir$day13\n$Izmir$day13$PM25\n [1] 0.6584 0.5798 0.9412 0.3771 0.1549 0.7799 0.8978 0.7762\n [9] 1.0000 0.8879 0.4322 0.8950 0.5171 0.9384 0.9105 0.6512\n[17] 0.9292 0.5969 0.9150 0.0899 0.4021 0.7002 0.5365 0.0000\n\n$Izmir$day13$NO2\n [1] 0.321 0.908 0.232 0.561 0.403 0.526 0.479 0.489 0.492\n[10] 0.000 0.522 0.552 0.620 0.849 0.530 0.586 0.179 0.545\n[19] 0.149 1.000 0.436 0.606 0.627 0.208\n\n$Izmir$day13$SO2\n [1] 0.5161 0.1031 0.5139 0.2249 0.2085 0.5020 0.4892 0.3241\n [9] 0.1934 0.4429 0.3778 0.6483 0.2213 0.3579 1.0000 0.0465\n[17] 0.4760 0.5010 0.2705 0.2005 0.0000 0.0106 0.3201 0.7269\n\n\n$Izmir$day14\n$Izmir$day14$PM25\n [1] 0.4655 0.9392 0.2573 0.6322 0.4880 0.5636 0.5137 0.6954\n [9] 0.4460 0.7560 0.6041 0.4454 0.4127 0.0431 0.2425 0.3649\n[17] 0.7455 0.6997 0.1925 0.2972 1.0000 0.0000 0.5054 0.5366\n\n$Izmir$day14$NO2\n [1] 0.2662 0.0659 0.2910 1.0000 0.3563 0.3302 0.4228 0.1127\n [9] 0.5544 0.5470 0.3015 0.3952 0.2654 0.5403 0.0000 0.3304\n[17] 0.5250 0.7697 0.1726 0.1243 0.3567 0.3683 0.5559 0.3553\n\n$Izmir$day14$SO2\n [1] 0.2853 1.0000 0.3563 0.7073 0.6677 0.3242 0.9340 0.1165\n [9] 0.1798 0.7903 0.0000 0.6367 0.5091 0.6663 0.6785 0.2587\n[17] 0.2532 0.6880 0.7095 0.1287 0.0944 0.1400 0.4475 0.4457\n\n\n$Izmir$day15\n$Izmir$day15$PM25\n [1] 0.912 0.616 0.502 0.440 0.439 0.425 0.346 0.556 0.000\n[10] 0.334 0.691 0.552 0.619 0.430 0.760 0.478 0.624 0.529\n[19] 0.606 0.454 0.733 0.442 1.000 0.500\n\n$Izmir$day15$NO2\n [1] 0.631 0.416 0.806 0.649 0.777 0.800 0.373 0.832 0.251\n[10] 0.639 0.857 0.136 0.467 0.478 0.000 0.536 1.000 0.189\n[19] 0.277 0.481 0.577 0.625 0.649 0.514\n\n$Izmir$day15$SO2\n [1] 1.0000 0.2942 0.0710 0.0133 0.3566 0.2711 0.6707 0.3597\n [9] 0.4267 0.0000 0.3464 0.3384 0.0540 0.1772 0.1872 0.6148\n[17] 0.5471 0.5814 0.7603 0.3260 0.7043 0.3399 0.6975 0.0917\n\n\n$Izmir$day16\n$Izmir$day16$PM25\n [1] 0.352 0.698 0.868 0.481 0.414 0.633 0.462 0.493 0.547\n[10] 0.739 0.246 0.389 0.627 0.000 0.786 0.342 0.251 0.528\n[19] 1.000 0.336 0.148 0.459 0.757 0.426\n\n$Izmir$day16$NO2\n [1] 0.5752 0.7136 0.0000 0.5752 0.2975 0.4113 0.9842 0.4888\n [9] 0.6276 0.1800 0.5330 0.3953 0.3684 0.5648 0.0521 0.7718\n[17] 0.9935 0.3164 0.5550 0.9367 0.2068 0.4378 1.0000 0.1960\n\n$Izmir$day16$SO2\n [1] 0.6762 0.5681 0.3804 0.5430 0.3873 0.6324 0.3475 0.0676\n [9] 0.6443 0.7159 0.4868 0.2756 0.3536 0.1663 0.1506 0.7159\n[17] 0.0000 0.5872 0.3756 0.1644 0.4097 0.4194 0.7316 1.0000\n\n\n$Izmir$day17\n$Izmir$day17$PM25\n [1] 1.000 0.949 0.946 0.766 0.405 0.568 0.124 0.320 0.295\n[10] 0.239 0.893 0.654 0.593 0.521 0.781 0.755 0.287 0.000\n[19] 0.216 0.394 0.523 0.917 0.690 0.703\n\n$Izmir$day17$NO2\n [1] 0.6026 0.3590 0.1147 0.1604 0.0414 0.0581 0.0000 0.6152\n [9] 0.0783 0.5531 1.0000 0.3415 0.3452 0.6099 0.3890 0.1950\n[17] 0.0253 0.4170 0.2822 0.4944 0.4658 0.7288 0.5482 0.6870\n\n$Izmir$day17$SO2\n [1] 0.4736 0.6930 0.3804 0.4079 0.4751 0.1267 0.0986 0.3677\n [9] 0.0410 0.4813 0.6879 0.1936 0.4684 0.0000 0.7280 0.3481\n[17] 0.9032 0.4654 1.0000 0.5516 0.3973 0.7507 0.6089 0.2898\n\n\n$Izmir$day18\n$Izmir$day18$PM25\n [1] 0.5429 0.5269 0.4693 0.3064 0.3748 0.5823 0.6372 0.4525\n [9] 0.2058 0.5544 0.4195 0.6401 0.0283 0.2198 0.5050 0.0838\n[17] 1.0000 0.1957 0.4859 0.0000 0.8786 0.5481 0.2712 0.4443\n\n$Izmir$day18$NO2\n [1] 0.415 0.135 0.310 0.359 0.928 0.741 0.509 0.541 0.909\n[10] 0.333 0.778 0.353 0.811 0.960 0.490 0.739 0.000 0.702\n[19] 0.699 0.730 0.949 0.347 1.000 0.345\n\n$Izmir$day18$SO2\n [1] 0.156 1.000 0.695 0.683 0.654 0.469 0.737 0.831 0.172\n[10] 0.264 0.356 0.631 0.000 0.481 0.196 0.439 0.162 0.772\n[19] 0.455 0.472 0.843 0.325 0.175 0.379\n\n\n$Izmir$day19\n$Izmir$day19$PM25\n [1] 0.2698 0.6100 0.3841 0.0126 0.4288 0.6935 0.0356 0.8306\n [9] 0.7311 1.0000 0.3800 0.6345 0.1950 0.4041 0.1337 0.8559\n[17] 0.0000 0.6996 0.2593 0.1358 0.9866 0.5274 0.6042 0.5571\n\n$Izmir$day19$NO2\n [1] 0.697 0.889 0.560 0.830 0.000 0.692 0.644 0.588 0.575\n[10] 0.439 0.401 0.800 0.502 0.820 0.456 0.310 0.882 0.523\n[19] 0.829 0.259 0.629 0.472 1.000 0.850\n\n$Izmir$day19$SO2\n [1] 0.686 0.494 0.762 0.715 0.326 0.798 0.739 0.552 1.000\n[10] 0.756 0.493 0.752 0.659 0.554 0.000 0.508 0.590 0.715\n[19] 0.648 0.626 0.857 0.576 0.396 0.495\n\n\n$Izmir$day20\n$Izmir$day20$PM25\n [1] 0.517 0.397 0.000 0.757 0.818 0.347 0.708 0.477 0.483\n[10] 0.760 0.703 0.394 0.349 0.741 0.267 0.357 1.000 0.623\n[19] 0.437 0.211 0.795 0.404 0.604 0.941\n\n$Izmir$day20$NO2\n [1] 0.4665 0.8445 0.1864 0.0000 0.6318 0.8927 0.3738 0.4557\n [9] 0.8128 0.3954 0.1943 0.2833 0.4806 0.0647 0.7773 0.7063\n[17] 0.7875 1.0000 0.8313 0.9705 0.4270 0.8836 0.1248 0.7183\n\n$Izmir$day20$SO2\n [1] 0.902 1.000 0.565 0.682 0.228 0.116 0.491 0.566 0.461\n[10] 0.296 0.193 0.725 0.741 0.455 0.907 0.497 0.734 0.328\n[19] 0.643 0.656 0.565 0.762 0.461 0.000\n\n\n$Izmir$day21\n$Izmir$day21$PM25\n [1] 0.589 0.879 0.183 0.225 0.684 0.710 1.000 0.662 0.812\n[10] 0.750 0.875 0.920 0.326 0.498 0.921 0.106 0.000 0.714\n[19] 0.687 0.586 0.902 0.993 0.940 0.632\n\n$Izmir$day21$NO2\n [1] 0.542 0.628 0.000 0.290 0.755 0.613 0.213 0.882 0.676\n[10] 0.394 0.552 0.566 0.472 0.502 0.511 0.720 0.807 0.692\n[19] 1.000 0.709 0.632 0.766 0.514 0.738\n\n$Izmir$day21$SO2\n [1] 1.0000 0.4576 0.7621 0.5147 0.3253 0.7864 0.6211 0.4310\n [9] 0.9403 0.0536 0.4932 0.4575 0.4766 0.5383 0.9648 0.0000\n[17] 0.7628 0.3223 0.7395 0.3990 0.7198 0.4542 0.3590 0.2076\n\n\n$Izmir$day22\n$Izmir$day22$PM25\n [1] 0.289 0.448 0.529 0.668 0.520 0.848 0.228 0.678 0.769\n[10] 0.667 0.507 0.413 0.186 0.152 0.714 0.459 0.160 0.668\n[19] 0.737 0.000 1.000 0.849 0.222 0.338\n\n$Izmir$day22$NO2\n [1] 0.3517 0.3869 0.0363 0.1610 1.0000 0.5161 0.6182 0.1258\n [9] 0.2353 0.0000 0.3864 0.2934 0.8260 0.2330 0.3071 0.0925\n[17] 0.3566 0.1280 0.0706 0.2812 0.1010 0.1102 0.4196 0.5502\n\n$Izmir$day22$SO2\n [1] 0.7628 0.4908 0.5208 0.2567 0.5843 0.8032 0.1901 0.8033\n [9] 0.2903 0.6263 0.0605 0.5457 0.9002 0.4681 0.0000 1.0000\n[17] 0.2367 0.1874 0.3009 0.1827 0.5538 0.5961 0.3801 0.7483\n\n\n$Izmir$day23\n$Izmir$day23$PM25\n [1] 0.46953 0.00534 0.52707 0.00000 0.32702 0.27597 0.13459\n [8] 0.65262 0.35651 0.48911 0.33740 0.11159 0.50596 0.13513\n[15] 0.57818 1.00000 0.44191 0.53114 0.46722 0.68619 0.01341\n[22] 0.09214 0.36945 0.33349\n\n$Izmir$day23$NO2\n [1] 0.15258 0.00208 0.32212 0.85049 1.00000 0.64831 0.03540\n [8] 0.62695 0.30501 0.47179 0.60895 0.85417 0.47338 0.26426\n[15] 0.63078 0.64446 0.66545 0.72534 0.51192 0.20440 0.47309\n[22] 0.00000 0.72709 0.56606\n\n$Izmir$day23$SO2\n [1] 0.754 0.622 0.000 0.434 0.812 0.516 0.786 0.354 0.645\n[10] 0.449 0.424 0.537 1.000 0.624 0.637 0.970 0.512 0.708\n[19] 0.406 0.789 0.254 0.569 0.857 0.908\n\n\n$Izmir$day24\n$Izmir$day24$PM25\n [1] 0.37725 0.00000 0.66088 0.28945 0.50904 0.11352 0.31834\n [8] 0.65856 0.44758 0.44768 0.53849 0.16788 0.39662 0.46919\n[15] 0.57696 0.25884 0.42978 0.50053 1.00000 0.65181 0.00314\n[22] 0.39423 0.42271 0.52542\n\n$Izmir$day24$NO2\n [1] 0.146 0.685 0.148 0.335 0.560 0.175 0.395 0.869 0.221\n[10] 0.000 0.598 0.119 0.283 0.529 0.515 0.743 0.152 0.267\n[19] 0.159 0.316 1.000 0.349 0.359 0.531\n\n$Izmir$day24$SO2\n [1] 0.000 0.732 0.391 0.173 0.537 0.349 0.359 0.372 0.932\n[10] 0.224 0.732 0.466 0.317 0.193 0.287 0.317 0.778 0.147\n[19] 0.965 0.353 0.190 0.172 0.474 1.000\n\n\n$Izmir$day25\n$Izmir$day25$PM25\n [1] 0.3698 0.4142 0.5178 0.4690 0.1915 0.7878 0.0230 0.1093\n [9] 0.3039 0.3512 0.8105 0.2324 0.3857 0.3326 1.0000 0.9466\n[17] 0.0823 0.5976 0.0000 0.1614 0.2467 0.1551 0.5259 0.3392\n\n$Izmir$day25$NO2\n [1] 0.6081 0.8176 0.8043 0.0689 0.4810 0.6467 0.8029 0.4093\n [9] 0.5677 0.9089 0.5838 0.9642 0.0359 1.0000 0.0000 0.7957\n[17] 0.7798 0.4525 0.4636 0.6193 0.5772 0.5929 0.8367 0.5907\n\n$Izmir$day25$SO2\n [1] 0.170 0.790 0.605 0.897 0.467 0.623 0.301 0.315 0.249\n[10] 0.692 0.000 1.000 0.523 0.690 0.986 0.761 0.792 0.527\n[19] 0.362 0.847 0.635 0.686 0.480 0.547\n\n\n$Izmir$day26\n$Izmir$day26$PM25\n [1] 0.127 0.254 0.271 0.549 0.372 0.663 0.592 0.485 0.264\n[10] 0.451 0.763 0.680 0.523 0.136 0.488 0.000 0.940 0.592\n[19] 0.837 0.550 1.000 0.405 0.752 0.583\n\n$Izmir$day26$NO2\n [1] 0.727 0.355 1.000 0.650 0.505 0.380 0.319 0.266 0.284\n[10] 0.602 0.798 0.659 0.246 0.611 0.866 0.779 0.929 0.671\n[19] 0.000 0.711 0.634 0.284 0.571 0.474\n\n$Izmir$day26$SO2\n [1] 0.478 0.706 0.441 0.426 0.226 0.631 0.726 0.731 0.884\n[10] 0.000 0.597 0.257 0.740 0.608 0.323 0.495 0.937 0.454\n[19] 0.159 0.859 0.879 0.437 1.000 0.547\n\n\n$Izmir$day27\n$Izmir$day27$PM25\n [1] 0.0216 0.3736 0.5774 0.6894 0.6249 0.9344 0.5688 0.6728\n [9] 0.8578 0.4244 0.1970 0.3823 0.0000 0.5029 0.6681 0.1041\n[17] 0.1687 0.0818 0.4702 1.0000 0.2548 0.2563 0.4757 0.1301\n\n$Izmir$day27$NO2\n [1] 0.8149 0.4168 0.8500 0.7014 0.7484 0.0609 0.0000 0.5259\n [9] 0.3997 0.4055 0.4772 0.9919 0.3685 0.3214 1.0000 0.5757\n[17] 0.5813 0.1166 0.7346 0.8613 0.7240 0.1606 0.9465 0.4180\n\n$Izmir$day27$SO2\n [1] 0.9532 0.5774 0.5642 1.0000 0.7811 0.5763 0.2349 0.6971\n [9] 0.6607 0.3096 0.3901 0.3748 0.0000 0.6359 0.0425 0.5448\n[17] 0.0266 0.7121 0.6754 0.9630 0.1254 0.7117 0.3912 0.5093\n\n\n$Izmir$day28\n$Izmir$day28$PM25\n [1] 0.516 0.689 0.370 0.414 0.774 0.000 0.546 0.510 0.758\n[10] 0.692 0.320 0.912 0.823 0.903 0.399 1.000 0.854 0.844\n[19] 0.350 0.588 0.642 0.317 0.560 0.765\n\n$Izmir$day28$NO2\n [1] 0.4764 0.4612 0.7103 0.2554 0.5752 0.6320 0.1412 0.0000\n [9] 0.6098 0.3595 0.9063 0.4772 0.4057 0.0537 0.2441 0.1265\n[17] 1.0000 0.1469 0.5397 0.6885 0.3444 0.4412 0.1878 0.4101\n\n$Izmir$day28$SO2\n [1] 0.492 0.402 0.714 0.383 0.218 0.766 0.623 0.200 0.413\n[10] 0.773 0.345 0.755 0.500 0.248 0.685 0.000 0.426 0.556\n[19] 0.634 0.636 0.603 0.897 0.973 1.000\n\n\n$Izmir$day29\n$Izmir$day29$PM25\n [1] 0.0249 0.1758 0.0406 0.2917 0.5081 0.4727 0.3477 0.3704\n [9] 0.2919 0.1596 0.1975 0.1690 0.2652 0.0000 0.7853 1.0000\n[17] 0.0256 0.7921 0.4507 0.4248 0.4343 0.5535 0.4475 0.1595\n\n$Izmir$day29$NO2\n [1] 0.691 0.852 0.609 0.394 0.300 0.797 0.647 0.531 0.710\n[10] 0.509 0.643 0.723 0.216 0.446 0.372 0.391 1.000 0.919\n[19] 0.828 0.580 0.920 0.394 0.225 0.000\n\n$Izmir$day29$SO2\n [1] 0.707 0.660 0.460 0.770 0.662 0.578 0.960 1.000 0.904\n[10] 0.796 0.409 0.591 0.641 0.688 0.922 0.308 0.324 0.637\n[19] 0.296 0.922 0.611 0.000 0.594 0.703\n\n\n$Izmir$day30\n$Izmir$day30$PM25\n [1] 0.2241 0.0722 0.4649 0.8368 0.3137 0.8019 0.8913 0.0727\n [9] 0.7268 0.4278 0.5364 1.0000 0.7621 0.3128 0.0000 0.5725\n[17] 0.6230 0.8337 0.8999 0.5271 0.5124 0.5963 0.7937 0.5124\n\n$Izmir$day30$NO2\n [1] 0.4276 0.2321 0.5459 0.5375 0.5421 0.4261 0.3682 0.8141\n [9] 0.4998 1.0000 0.3118 0.0000 0.4949 0.8100 0.4968 0.0779\n[17] 0.3707 0.5305 0.9253 0.8721 0.7803 0.6805 0.3028 0.7803\n\n$Izmir$day30$SO2\n [1] 0.8914 0.7194 0.8763 0.5612 0.8192 0.9583 0.1018 1.0000\n [9] 0.7276 0.7061 0.4780 0.1066 0.0000 0.5607 0.3993 0.8360\n[17] 0.4455 0.3174 0.9972 0.3556 0.2079 0.6939 0.9943 0.0987\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#map-functioni",
    "href": "presentations/R/index.html#map-functioni",
    "title": "Introduction to R",
    "section": "Map function/I",
    "text": "Map function/I\n\nMap(f, ...)\n\nSimilar to mapply, but always returns a list.\nUseful when you want to ensure that the output format is consistent, especially with complex data structures.\n\n# Create a complex random example data\nset.seed(123)  # For reproducibility\nPM25 &lt;- list(Ankara = rnorm(10, mean = 35, sd = 5),\n             Istanbul = rnorm(10, mean = 30, sd = 4),\n             Izmir = rnorm(10, mean = 40, sd = 6))\n\nNO2 &lt;- list(Ankara = rnorm(10, mean = 50, sd = 10),\n            Istanbul = rnorm(10, mean = 45, sd = 7),\n            Izmir = rnorm(10, mean = 55, sd = 8))\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#map-functionii",
    "href": "presentations/R/index.html#map-functionii",
    "title": "Introduction to R",
    "section": "Map function/II",
    "text": "Map function/II\n\n\npollution_stats &lt;- Map(\n  function(pm25, no2)\n    list(mean_pm25 = mean(pm25),\n         sd_pm25 = sd(pm25),\n         mean_no2 = mean(no2),\n         sd_no2 = sd(no2)),\n  PM25, NO2)\nclass(pollution_stats)\n\n\n[1] \"list\"\n\n\n\n\n\npollution_stats2 &lt;- mapply(\n  function(pm25, no2) {\n    list(mean_pm25 = mean(pm25),\n         sd_pm25 = sd(pm25),\n         mean_no2 = mean(no2),\n         sd_no2 = sd(no2))\n    },\n  PM25, NO2)\nclass(pollution_stats2)\n\n\n[1] \"matrix\" \"array\" \n\n\n\n\n\nprint(pollution_stats2)\n\n\n          Ankara Istanbul Izmir\nmean_pm25 35.4   30.8     37.5 \nsd_pm25   4.77   4.15     5.58 \nmean_no2  53.2   44.9     56.8 \nsd_no2    5.27   7.58     6.85 \n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#reduce-function",
    "href": "presentations/R/index.html#reduce-function",
    "title": "Introduction to R",
    "section": "Reduce function",
    "text": "Reduce function\n\nReduce(f, x, init, right = FALSE, accumulate = FALSE)\n\n\nUsed to successively apply a function to elements of a vector or list.\nParticularly useful when you want to progressively reduce a list or vector to a single value by applying a function in a pairwise manner.\n\n\nweekly_AQI &lt;- list(\n    week1 = c(120, 110, 115, 130, 125, 140, 135),\n    week2 = c(128, 122, 118, 135, 140, 145, 130),\n    week3 = c(130, 125, 120, 140, 135, 150, 145)\n)\n(cumulative_product &lt;- Reduce(function(x, y) x * y, weekly_AQI))\n\n[1] 1996800 1677500 1628400 2457000 2362500 3045000 2544750\n\n\nIn this code, function(x, y) x * y is an anonymous function that takes two arguments and returns their product. Reduce applies this function cumulatively to the elements of weekly_AQI.\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#filter-functioni",
    "href": "presentations/R/index.html#filter-functioni",
    "title": "Introduction to R",
    "section": "Filter function/I",
    "text": "Filter function/I\n\nFilter(f, x)\n\n\nGreat for extracting elements from a vector or list based on a specified condition.\nIt’s very useful when you want to subset data according to certain criteria.\n\n\ndaily_PM25 &lt;- c(35, 40, 25, 20, 50, 45, 55, 30, 25, 40,\n                60, 20, 30, 35, 40, 45, 25, 50, 55, 60,\n                30, 25, 20, 35, 40, 45, 30, 50, 55, 60)\n\n\n\n(safe_days &lt;- Filter(function(x) x &lt; 40,\n                     daily_PM25))\n\n\n [1] 35 25 20 30 25 20 30 35 25 30 25 20 35 30\n\n\n\nIs there another way?\n\n\n# indices of the values lower than 40\ni &lt;- which(daily_PM25 &lt; 40)\ndaily_PM25[i]\n\n\n [1] 35 25 20 30 25 20 30 35 25 30 25 20 35 30\n\n\n\nor\n\n\ndaily_PM25[which(daily_PM25 &lt; 40)]\n\n\n [1] 35 25 20 30 25 20 30 35 25 30 25 20 35 30\n\n\n\nThen, why do we need Filter function?\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#filter-functionii",
    "href": "presentations/R/index.html#filter-functionii",
    "title": "Introduction to R",
    "section": "Filter function/II",
    "text": "Filter function/II\n\n# Create a complex example data\nset.seed(123)  # For reproducibility\n# 3 cities, 10 days, 2 pollutants\nair_quality_data &lt;- list(\n    Ankara = data.frame(day = 1:10, PM25 = rnorm(10, mean = 35, sd = 5),\n                        NO2 = rnorm(10, mean = 50, sd = 10)),\n    Istanbul = data.frame(day = 1:10, PM25 = rnorm(10, mean = 40, sd = 6),\n                          NO2 = rnorm(10, mean = 60, sd = 15)),\n    Izmir = data.frame(day = 1:10, PM25 = rnorm(10, mean = 30, sd = 4),\n                       NO2 = rnorm(10, mean = 45, sd = 7))\n)\n\n\n\n# PM2.5 mean values of all cities\nsapply(air_quality_data,\n       function(df) mean(df$PM25))\n\n\n  Ankara Istanbul    Izmir \n    35.4     37.5     30.0 \n\n\n\n\n\n# We want to extract the cities with\n# mean PM2.5 lower than 37\nsafe_cities &lt;- Filter(\n  function(df) mean(df$PM25) &lt; 37,\n  air_quality_data)\n\nnames(safe_cities)\n\n\n[1] \"Ankara\" \"Izmir\" \n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#find-functioni",
    "href": "presentations/R/index.html#find-functioni",
    "title": "Introduction to R",
    "section": "Find function/I",
    "text": "Find function/I\n\nFind(f, x, right = FALSE, nomatch = NULL)\n\n\nUsed to locate the first element of a list or vector that satisfies a given condition.\nIt’s quite useful when you want to quickly identify an element that meets certain criteria without having to process the entire dataset.\n\n\n# Toy data\ndaily_PM25 &lt;- list(\n    day1 = 30, day2 = 35, day3 = 40, day4 = 45,\n    day5 = 25, day6 = 50, day7 = 55, day8 = 20\n)\n\n\n\n# Assume the threshold for concern is a \n# PM2.5 level of 50.\n(first_high_day &lt;- Find(function(x) x &gt; 50,\n                        daily_PM25))\n\n\n[1] 55\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#find-functionii",
    "href": "presentations/R/index.html#find-functionii",
    "title": "Introduction to R",
    "section": "Find function/II",
    "text": "Find function/II\nA more complex example.\n\n\n# Create a complex example data\nset.seed(123)  # Ensuring reproducibility\nair_quality_data &lt;- list(\n    Ankara = data.frame(\n      day = 1:7,\n      PM25 = rnorm(7, mean = 35, sd = 5)),\n    Istanbul = data.frame(\n      day = 1:7,\n      PM25 = rnorm(7, mean = 40, sd = 6)),\n    Izmir = data.frame(\n      day = 1:7,\n      PM25 = rnorm(7, mean = 30, sd = 4))\n)\nprint(air_quality_data)\n\n\n$Ankara\n  day PM25\n1   1 32.2\n2   2 33.8\n3   3 42.8\n4   4 35.4\n5   5 35.6\n6   6 43.6\n7   7 37.3\n\n$Istanbul\n  day PM25\n1   1 32.4\n2   2 35.9\n3   3 37.3\n4   4 47.3\n5   5 42.2\n6   6 42.4\n7   7 40.7\n\n$Izmir\n  day PM25\n1   1 27.8\n2   2 37.1\n3   3 32.0\n4   4 22.1\n5   5 32.8\n6   6 28.1\n7   7 25.7\n\n\n\n\n\n(first_exceeding_city &lt;- Find(\n  function(df) any(df$PM25 &gt; 45),\n  air_quality_data))\n\n\n  day PM25\n1   1 32.4\n2   2 35.9\n3   3 37.3\n4   4 47.3\n5   5 42.2\n6   6 42.4\n7   7 40.7\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#position-function",
    "href": "presentations/R/index.html#position-function",
    "title": "Introduction to R",
    "section": "Position function",
    "text": "Position function\n\nPosition(f, x, right = FALSE, nomatch = NA_integer_)\n\n\nUsed to find the position or index of the first element in a vector or list that satisfies a specified condition.\nThis is particularly useful when you want to know where in your data a certain criterion is first met, rather than just retrieving the value itself.\n\n\n# Create a complex example data\nset.seed(123)  # For reproducibility\nenvironmental_data &lt;- list(\n    Ankara = data.frame(day = 1:10,\n                        PM25 = rnorm(10, mean = 35, sd = 5),\n                        Temp = rnorm(10, 20),\n                        Humidity = rnorm(10, 60)),\n    Istanbul = data.frame(day = 1:10,\n                          PM25 = rnorm(10, mean = 40, sd = 6),\n                          Temp = rnorm(10, 22),\n                          Humidity = rnorm(10, 65)),\n    Izmir = data.frame(day = 1:10,\n                       PM25 = rnorm(10, mean = 30, sd = 4),\n                       Temp = rnorm(10, 25),\n                       Humidity = rnorm(10, 70)))\n(first_exceeding_city_index &lt;- Position(\n  function(df) mean(df$PM25) &gt; 37, environmental_data))\n\n[1] 2\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#sweep-functioni",
    "href": "presentations/R/index.html#sweep-functioni",
    "title": "Introduction to R",
    "section": "sweep function/I",
    "text": "sweep function/I\n\nsweep(x, MARGIN, STATS, FUN = \"-\", check.margin = TRUE, ...)\n\n\nUseful for performing operations on arrays or matrices, such as standardizing data by subtracting the mean and dividing by the standard deviation.\nThis function is often used in data analysis for normalizing or scaling data.\n\n\n\n# Create a complex example data\nset.seed(123)  # For reproducibility\npollution_data &lt;- matrix(\n  rnorm(30), nrow = 10, ncol = 3)\nmycolnames &lt;- c(\"PM2.5\", \"NO2\", \"SO2\")\ncolnames(pollution_data) &lt;- mycolnames\nhead(pollution_data)\n\n\n       PM2.5    NO2    SO2\n[1,] -0.5605  1.224 -1.068\n[2,] -0.2302  0.360 -0.218\n[3,]  1.5587  0.401 -1.026\n[4,]  0.0705  0.111 -0.729\n[5,]  0.1293 -0.556 -0.625\n[6,]  1.7151  1.787 -1.687\n\n\n\nThese values are required for standardization.\n\nmeans &lt;- colMeans(pollution_data)\nsds &lt;- apply(pollution_data, 2, sd)\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#sweep-functionii",
    "href": "presentations/R/index.html#sweep-functionii",
    "title": "Introduction to R",
    "section": "sweep function/II",
    "text": "sweep function/II\n\n# Subtract the mean\n(centered_data &lt;- sweep(pollution_data, 2, means, FUN = \"-\"))\n\n         PM2.5     NO2    SO2\n [1,] -0.63510  1.0155 -0.643\n [2,] -0.30480  0.1512  0.207\n [3,]  1.48408  0.1921 -0.601\n [4,] -0.00412 -0.0979 -0.304\n [5,]  0.05466 -0.7645 -0.200\n [6,]  1.64044  1.5783 -1.262\n [7,]  0.38629  0.2892  1.262\n [8,] -1.33969 -2.1752  0.578\n [9,] -0.76148  0.4927 -0.714\n[10,] -0.52029 -0.6814  1.678\n\n# Divide by the standard deviation\n(standardized_data &lt;- sweep(centered_data, 2, sds, FUN = \"/\"))\n\n         PM2.5     NO2    SO2\n [1,] -0.66588  0.9782 -0.691\n [2,] -0.31957  0.1456  0.222\n [3,]  1.55599  0.1851 -0.646\n [4,] -0.00432 -0.0943 -0.327\n [5,]  0.05731 -0.7364 -0.215\n [6,]  1.71993  1.5204 -1.356\n [7,]  0.40501  0.2786  1.356\n [8,] -1.40460 -2.0955  0.621\n [9,] -0.79838  0.4747 -0.767\n[10,] -0.54550 -0.6564  1.803\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#sweep-functioniii",
    "href": "presentations/R/index.html#sweep-functioniii",
    "title": "Introduction to R",
    "section": "sweep function/III",
    "text": "sweep function/III\nCan’t we do it without sweep function?\n\n(standardized_data2 &lt;- apply(\n  pollution_data, 2, function(x) (x - mean(x)) / sd(x)))\n\n         PM2.5     NO2    SO2\n [1,] -0.66588  0.9782 -0.691\n [2,] -0.31957  0.1456  0.222\n [3,]  1.55599  0.1851 -0.646\n [4,] -0.00432 -0.0943 -0.327\n [5,]  0.05731 -0.7364 -0.215\n [6,]  1.71993  1.5204 -1.356\n [7,]  0.40501  0.2786  1.356\n [8,] -1.40460 -2.0955  0.621\n [9,] -0.79838  0.4747 -0.767\n[10,] -0.54550 -0.6564  1.803\n\n# Are they equal?\nall.equal(standardized_data, standardized_data2)\n\n[1] TRUE\n\n\nThen, why do we need sweep function?\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#sweep-functioniv",
    "href": "presentations/R/index.html#sweep-functioniv",
    "title": "Introduction to R",
    "section": "sweep function/IV",
    "text": "sweep function/IV\n\napply function can ONLY calculate the result in a single step.\nHowever, sweep function allows you to apply different set of operations on each mathematical step. Think that you will need mean of centered_data for another operation.\nAlso, you can keep mean and standard deviation values for later to de-standardize your data.\n\n\n# Get centered data from standardized data\ncentered_data2 &lt;- sweep(standardized_data, 2, sds, FUN = \"*\")\n# Get original data from centered data\noriginal_data &lt;- sweep(centered_data2, 2, means, FUN = \"+\")\n# Are they equal?\nall.equal(original_data, pollution_data)\n\n[1] TRUE\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#negate-functioni",
    "href": "presentations/R/index.html#negate-functioni",
    "title": "Introduction to R",
    "section": "Negate function/I",
    "text": "Negate function/I\n\nNegate(f)\n\n\nIt takes a function that tests for a condition and returns a new function that tests for the opposite condition.\n\n\n# We have a function that identifies days with poor\n# air quality based on certain criteria.\nis_poor_air_quality &lt;- function(pm25, no2) {\n    pm25 &gt; 35 && no2 &gt; 50\n}\n# Use Negate to create the OPPOSITE function\nis_good_air_quality &lt;- Negate(is_poor_air_quality)\n\nLet’s test the function with some example data.\n\n# Example data for a week\nair_quality_data &lt;- data.frame(\n    day = 1:7,\n    PM25 = c(30, 40, 36, 38, 50, 33, 45),\n    NO2 = c(45, 55, 60, 48, 53, 49, 52)\n)\nhead(air_quality_data)\n\n  day PM25 NO2\n1   1   30  45\n2   2   40  55\n3   3   36  60\n4   4   38  48\n5   5   50  53\n6   6   33  49\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#negate-functionii",
    "href": "presentations/R/index.html#negate-functionii",
    "title": "Introduction to R",
    "section": "Negate function/II",
    "text": "Negate function/II\n\n# Test the original function\n(poor_quality_days &lt;- apply(\n  air_quality_data, 1,\n  function(x) is_poor_air_quality(x[\"PM25\"], x[\"NO2\"])))\n\n[1] FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE\n\n# Test the negated function\n(good_quality_days &lt;- apply(\n  air_quality_data, 1,\n  function(x) is_good_air_quality(x[\"PM25\"], x[\"NO2\"])))\n\n[1]  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE\n\n\nDo we really need such a function?\n\nprint(is_poor_air_quality) # Original function\n\nfunction(pm25, no2) {\n    pm25 &gt; 35 && no2 &gt; 50\n}\n&lt;bytecode: 0x1158b7e10&gt;\n\nprint(is_good_air_quality) # Negated function\n\nfunction (...) \n!f(...)\n&lt;bytecode: 0x105a34a40&gt;\n&lt;environment: 0x115c35070&gt;\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/index.html#what-is-xts",
    "href": "presentations/R/index.html#what-is-xts",
    "title": "Introduction to R",
    "section": "What is xts?",
    "text": "What is xts?\n\nxts stands for eXtensible Time Series.\nIt’s an R package specifically designed for handling and analyzing time-series data.\nBuilt on top of the zoo package, it inherits all zoo functionalities and adds time-based - indexing and sub-setting, plus some performance optimizations.\n\n\ninstall.packages(\"xts\")\n\n\nlibrary(xts)\n\nLoading required package: zoo\n\n\n\nAttaching package: 'zoo'\n\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n\n\nxts Package"
  },
  {
    "objectID": "presentations/R/index.html#why-do-we-need",
    "href": "presentations/R/index.html#why-do-we-need",
    "title": "Introduction to R",
    "section": "Why do we need?",
    "text": "Why do we need?\nKey Features\n\nTime-based Indexing/Sub-setting/Aggregation/Plotting/Calculations etc…\nEfficient time-based operations (e.g. extracting data for a specific time period)\nDealing with Large datasets\nHandling Irregular Time Series\nMetadata handling\nAutomatic Time Zone Handling\nPeriodicity Recognition\n\nLimitations\n\nHandling of Non-numeric Data: xts primarily handles numeric time series data. Working with non-numeric data types (like strings or factors) can be cumbersome and might require additional data manipulation.\nHandling of Missing Data: xts does not provide any special handling of missing data. It is up to the user to decide how to handle missing data.\nTime Zone Management: Although xts handles time zones, managing time zone conversions and daylight saving time can be complex and may require extra caution and work.\n\n\nxts Package"
  },
  {
    "objectID": "presentations/R/index.html#creating-xts-objectsi",
    "href": "presentations/R/index.html#creating-xts-objectsi",
    "title": "Introduction to R",
    "section": "Creating xts Objects/I",
    "text": "Creating xts Objects/I\n\n\nUsing vector\n\nlibrary(xts)\n\n# Sample data vectors\ndates &lt;- seq(as.Date(\"2023-01-01\"),\n             by = \"days\", length.out = 5)\ntemperature &lt;- c(22, 23, 21, 20, 19)\n\n# Use just temperature vector to create xts object\nxts_object &lt;- xts(\n  temperature,\n  order.by = dates)\ncolnames(xts_object) &lt;- \"Temperature\"\nclass(xts_object)\n\n[1] \"xts\" \"zoo\"\n\nprint(xts_object)\n\n           Temperature\n2023-01-01          22\n2023-01-02          23\n2023-01-03          21\n2023-01-04          20\n2023-01-05          19\n\n\n\nConverting matrix\n\nhumidity &lt;- c(60, 65, 58, 55, 57)\n\n# Create a sample matrix\nsample_matrix &lt;- cbind(\n  temperature, humidity)\nrownames(sample_matrix) &lt;- as.character(dates)\n# Convert the matrix to an xts object\nxts_from_matrix &lt;- as.xts(sample_matrix)\nprint(xts_from_matrix)\n\n           temperature humidity\n2023-01-01          22       60\n2023-01-02          23       65\n2023-01-03          21       58\n2023-01-04          20       55\n2023-01-05          19       57\n\n\n\n\n\nxts Package"
  },
  {
    "objectID": "presentations/R/index.html#creating-xts-objectsii",
    "href": "presentations/R/index.html#creating-xts-objectsii",
    "title": "Introduction to R",
    "section": "Creating xts Objects/II",
    "text": "Creating xts Objects/II\n\n\ndirectly from matrix\n\nsample_matrix &lt;- matrix(\n  c(temperature, humidity),\n  ncol = 2,\n  dimnames = list(\n    dates, c(\"Temperature\", \"Humidity\")))\n# create xts object directly from matrix\nxts_from_matrix &lt;- xts(sample_matrix,\n                       order.by = dates)\nprint(xts_from_matrix)\n\n           Temperature Humidity\n2023-01-01          22       60\n2023-01-02          23       65\n2023-01-03          21       58\n2023-01-04          20       55\n2023-01-05          19       57\n\n\n\nUsing data.frame\n\n# Create a sample data.frame\nsample_df &lt;- data.frame(\n  date = dates,\n  temperature = temperature,\n  humidity = humidity\n)\nprint(sample_df)\n\n        date temperature humidity\n1 2023-01-01          22       60\n2 2023-01-02          23       65\n3 2023-01-03          21       58\n4 2023-01-04          20       55\n5 2023-01-05          19       57\n\n# Create xts object from data.frame\nxts_from_df &lt;- xts(\n  sample_df[, -1], order.by = sample_df$date)\nprint(xts_from_df)\n\n           temperature humidity\n2023-01-01          22       60\n2023-01-02          23       65\n2023-01-03          21       58\n2023-01-04          20       55\n2023-01-05          19       57\n\n\n\n\n\nxts Package"
  },
  {
    "objectID": "presentations/R/index.html#matrix-vs.-xtsi",
    "href": "presentations/R/index.html#matrix-vs.-xtsi",
    "title": "Introduction to R",
    "section": "Matrix vs. xts/I",
    "text": "Matrix vs. xts/I\n\n\n\nMatrix\n\n\ndata(sample_matrix)\nclass(sample_matrix)\n\n[1] \"matrix\" \"array\" \n\nhead(sample_matrix)\n\n           Open High  Low Close\n2007-01-02 50.0 50.1 50.0  50.1\n2007-01-03 50.2 50.4 50.2  50.4\n2007-01-04 50.4 50.4 50.3  50.3\n2007-01-05 50.4 50.4 50.2  50.3\n2007-01-06 50.2 50.2 50.1  50.2\n2007-01-07 50.1 50.2 50.0  50.0\n\ncolnames(sample_matrix)\n\n[1] \"Open\"  \"High\"  \"Low\"   \"Close\"\n\n\n\nrownames(sample_matrix)\n\n\n\n2007-01-02 2007-01-03 2007-01-04 2007-01-05 ...\n\n\n\nindex(sample_matrix)\n\n\n\n1 2 3 4 5 6 ... 175 176 177 178 179 180\n\n\n\n\nxts\n\n\nsample.xts &lt;- as.xts(sample_matrix)\nclass(sample.xts)\n\n[1] \"xts\" \"zoo\"\n\nhead(sample.xts)\n\n           Open High  Low Close\n2007-01-02 50.0 50.1 50.0  50.1\n2007-01-03 50.2 50.4 50.2  50.4\n2007-01-04 50.4 50.4 50.3  50.3\n2007-01-05 50.4 50.4 50.2  50.3\n2007-01-06 50.2 50.2 50.1  50.2\n2007-01-07 50.1 50.2 50.0  50.0\n\ncolnames(sample.xts)\n\n[1] \"Open\"  \"High\"  \"Low\"   \"Close\"\n\n\n\nrownames(sample.xts)\n\nNULL\n\n\n\nindex(sample.xts)\n\n\n\n2007-01-02 2007-01-03 ... 2007-06-29 2007-06-30\n\n\n\n\n\nxts Package"
  },
  {
    "objectID": "presentations/R/index.html#matrix-vs.-xtsii",
    "href": "presentations/R/index.html#matrix-vs.-xtsii",
    "title": "Introduction to R",
    "section": "Matrix vs. xts/II",
    "text": "Matrix vs. xts/II\n\n\n\nMatrix\n\n\nsample_matrix[31:58,]\n\n\n\n             Open   High    Low  Close\n2007-02-01 50.224 50.414 50.191 50.358\n2007-02-02 50.445 50.535 50.361 50.369\n2007-02-03 50.372 50.469 50.299 50.431\n2007-02-04 50.482 50.555 50.402 50.555\n              ...    ...    ...    ...\n2007-02-25  50.79 50.932  50.79 50.848\n2007-02-26 50.882 50.882 50.755 50.755\n2007-02-27 50.743 50.789 50.619 50.692\n2007-02-28 50.694 50.771 50.599 50.771\n\n\n\nsample_matrix[31:89,]\n\n\n\n             Open   High    Low  Close\n2007-02-01 50.224 50.414 50.191 50.358\n2007-02-02 50.445 50.535 50.361 50.369\n2007-02-03 50.372 50.469 50.299 50.431\n2007-02-04 50.482 50.555 50.402 50.555\n              ...    ...    ...    ...\n2007-03-28 48.331 48.536 48.331 48.536\n2007-03-29 48.592   48.7 48.574   48.7\n2007-03-30 48.746 49.002 48.746 48.935\n2007-03-31 48.956 49.097 48.956 48.975\n\n\n\n\nxts\n\n\nsample.xts['2007-02']\n\n\n\n             Open   High    Low  Close\n2007-02-01 50.224 50.414 50.191 50.358\n2007-02-02 50.445 50.535 50.361 50.369\n2007-02-03 50.372 50.469 50.299 50.431\n2007-02-04 50.482 50.555 50.402 50.555\n              ...    ...    ...    ...\n2007-02-25  50.79 50.932  50.79 50.848\n2007-02-26 50.882 50.882 50.755 50.755\n2007-02-27 50.743 50.789 50.619 50.692\n2007-02-28 50.694 50.771 50.599 50.771\n\n\n\nsample.xts['2007-02/2007-03']\n\n\n\n             Open   High    Low  Close\n2007-02-01 50.224 50.414 50.191 50.358\n2007-02-02 50.445 50.535 50.361 50.369\n2007-02-03 50.372 50.469 50.299 50.431\n2007-02-04 50.482 50.555 50.402 50.555\n              ...    ...    ...    ...\n2007-03-28 48.331 48.536 48.331 48.536\n2007-03-29 48.592   48.7 48.574   48.7\n2007-03-30 48.746 49.002 48.746 48.935\n2007-03-31 48.956 49.097 48.956 48.975\n\n\n\n\n\nxts Package"
  },
  {
    "objectID": "presentations/R/index.html#metadata",
    "href": "presentations/R/index.html#metadata",
    "title": "Introduction to R",
    "section": "Metadata",
    "text": "Metadata\n\n\n\n# Adding and viewing meta-data\nattr(sample.xts, \"description\") &lt;- \"Sample xts data\"\nattributes(sample.xts)\n\n$dim\n[1] 180   4\n\n$dimnames\n$dimnames[[1]]\nNULL\n\n$dimnames[[2]]\n[1] \"Open\"  \"High\"  \"Low\"   \"Close\"\n\n\n$index\n  [1] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n  [7] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [13] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [19] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [25] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [31] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [37] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [43] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [49] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [55] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [61] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [67] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [73] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [79] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [85] 1.17e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n [91] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n [97] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[103] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[109] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[115] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[121] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[127] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[133] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[139] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[145] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[151] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[157] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[163] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[169] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[175] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\nattr(,\"tzone\")\n[1] \"\"\nattr(,\"tclass\")\n[1] \"POSIXct\" \"POSIXt\" \n\n$class\n[1] \"xts\" \"zoo\"\n\n$description\n[1] \"Sample xts data\"\n\n\n\n\n# do some math\nsample.xts &lt;- sample.xts * sample_matrix\nattributes(sample.xts)\n\n$index\n  [1] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n  [7] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [13] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [19] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [25] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [31] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [37] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [43] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [49] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [55] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [61] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [67] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [73] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [79] 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09 1.17e+09\n [85] 1.17e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n [91] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n [97] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[103] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[109] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[115] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[121] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[127] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[133] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[139] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[145] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[151] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[157] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[163] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[169] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\n[175] 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09 1.18e+09\nattr(,\"tzone\")\n[1] \"\"\nattr(,\"tclass\")\n[1] \"POSIXct\" \"POSIXt\" \n\n$class\n[1] \"xts\" \"zoo\"\n\n$description\n[1] \"Sample xts data\"\n\n$dim\n[1] 180   4\n\n$dimnames\n$dimnames[[1]]\nNULL\n\n$dimnames[[2]]\n[1] \"Open\"  \"High\"  \"Low\"   \"Close\"\n\n\n\nNew description metadata is still there.\n\n\n\n\nxts Package"
  },
  {
    "objectID": "presentations/R/index.html#periodicityi",
    "href": "presentations/R/index.html#periodicityi",
    "title": "Introduction to R",
    "section": "Periodicity/I",
    "text": "Periodicity/I\nEstimate the periodicity of a time-series-like object by calculating the median time between observations in days.\n\n\n\np &lt;- periodicity(sample.xts)\nprint(p)\n\nDaily periodicity from 2007-01-02 to 2007-06-30 \n\n\n\n\n# Convert to a different time zone\nsample.xts.tz &lt;- as.xts(sample_matrix, tzone = \"GMT\")\np.tz &lt;- periodicity(sample.xts.tz)\nprint(p)\n\nDaily periodicity from 2007-01-02 to 2007-06-30 \n\n\n\n\n\n\n\nunclass(p)\n\n$difftime\nTime difference of 86400 days\n\n$frequency\n[1] 86400\n\n$start\n[1] \"2007-01-02 EET\"\n\n$end\n[1] \"2007-06-30 EEST\"\n\n$units\n[1] \"days\"\n\n$scale\n[1] \"daily\"\n\n$label\n[1] \"day\"\n\n\n\n\nunclass(p.tz)\n\n$difftime\nTime difference of 86400 days\n\n$frequency\n[1] 86400\n\n$start\n[1] \"2007-01-01 22:00:00 GMT\"\n\n$end\n[1] \"2007-06-29 21:00:00 GMT\"\n\n$units\n[1] \"days\"\n\n$scale\n[1] \"daily\"\n\n$label\n[1] \"day\"\n\n\n\n\n\nxts Package"
  },
  {
    "objectID": "presentations/R/index.html#periodicityii",
    "href": "presentations/R/index.html#periodicityii",
    "title": "Introduction to R",
    "section": "Periodicity/II",
    "text": "Periodicity/II\n\n# Change system time zone information\nSys.setenv(TZ = 'GMT')\n\n\n\n\nunclass(p)\n\n$difftime\nTime difference of 86400 days\n\n$frequency\n[1] 86400\n\n$start\n[1] \"2007-01-01 22:00:00 GMT\"\n\n$end\n[1] \"2007-06-29 21:00:00 GMT\"\n\n$units\n[1] \"days\"\n\n$scale\n[1] \"daily\"\n\n$label\n[1] \"day\"\n\n\n\n\nunclass(p.tz)\n\n$difftime\nTime difference of 86400 days\n\n$frequency\n[1] 86400\n\n$start\n[1] \"2007-01-01 22:00:00 GMT\"\n\n$end\n[1] \"2007-06-29 21:00:00 GMT\"\n\n$units\n[1] \"days\"\n\n$scale\n[1] \"daily\"\n\n$label\n[1] \"day\"\n\n\n\n\n\nActually both xts objects are the same. Just Time-zone information are different.\n\n\nxts Package"
  },
  {
    "objectID": "presentations/R/index.html#time-based-indexing",
    "href": "presentations/R/index.html#time-based-indexing",
    "title": "Introduction to R",
    "section": "Time-based Indexing",
    "text": "Time-based Indexing\nA more complex xts object.\n\n\n\nlibrary(xts)\n\n# Generate sample data\nset.seed(123)  # For reproducibility\ndates &lt;- seq(as.Date(\"2020-01-01\"),\n             by = \"day\", length.out = 730)\ndata &lt;- matrix(rnorm(730*3), ncol = 3)\n\n# Create xts object\nxts_data &lt;- xts(data, order.by = dates)\ncn &lt;- c(\"Temperature\", \"Humidity\", \"WindSpeed\")\ncolnames(xts_data) &lt;- cn\n\n\n\n           Temperature Humidity WindSpeed\n2020-01-01       -0.56    1.739    -0.868\n2020-01-02       -0.23    0.881      0.73\n2020-01-03       1.559   -1.944       0.5\n2020-01-04       0.071      1.4     0.634\n                   ...      ...       ...\n2021-12-27       0.564    0.869    -0.847\n2021-12-28       0.189    1.369     1.008\n2021-12-29      -0.733    0.763    -0.611\n2021-12-30       0.986    0.421     0.333\n\n\nData for the year 2021\n\ndata_2021 &lt;- xts_data[\"2021\"]\n\n\nData for all January months\n\ndata_january &lt;- xts_data[.indexmon(xts_data) == 0]\n\nData from March to April 2021\n\ndata_mar_apr_2021 &lt;- xts_data[\"2021-03/2021-04\"]\n\nData for all Mondays\n\ndata_mondays &lt;- xts_data[.indexwday(xts_data) == 1]\n\nLast day of each month\n\neom_dates &lt;- endpoints(xts_data, on = \"months\")\ndata_eom &lt;- xts_data[eom_dates]\n\nDays when temperature was above 1 standard deviation of the mean\n\nmean_plus_1std &lt;- mean(xts_data$Temperature) + sd(xts_data$Temperature)\nidx &lt;- xts_data$Temperature &gt; mean_plus_1std\nhigh_temp_days &lt;- xts_data[idx]\n\n\n\n\nxts Package"
  },
  {
    "objectID": "presentations/R/index.html#time-alignment-and-merging",
    "href": "presentations/R/index.html#time-alignment-and-merging",
    "title": "Introduction to R",
    "section": "Time alignment and merging",
    "text": "Time alignment and merging\n\n\n\n# First time series\nset.seed(123) # For reproducibility\ndates1 &lt;- seq(as.Date(\"2023-01-01\"),\n              by = \"days\", length.out = 6)\nxts1 &lt;- xts(rnorm(length(dates1)), order.by = dates1)\nprint(xts1)\n\n              [,1]\n2023-01-01 -0.5605\n2023-01-02 -0.2302\n2023-01-03  1.5587\n2023-01-04  0.0705\n2023-01-05  0.1293\n2023-01-06  1.7151\n\n\n\n\n# Second time series, offset by 2 days\ndates2 &lt;- seq(as.Date(\"2023-01-03\"),\n              by = \"days\", length.out = 6)\nxts2 &lt;- xts(rnorm(length(dates2)), order.by=dates2)\nprint(xts2)\n\n             [,1]\n2023-01-03  0.461\n2023-01-04 -1.265\n2023-01-05 -0.687\n2023-01-06 -0.446\n2023-01-07  1.224\n2023-01-08  0.360\n\n\n\n\n\n\n\n# Merging the two series\nmerged_xts &lt;- merge(xts1, xts2)\n\n\n\n              xts1   xts2\n2023-01-01 -0.5605     NA\n2023-01-02 -0.2302     NA\n2023-01-03  1.5587  0.461\n2023-01-04  0.0705 -1.265\n2023-01-05  0.1293 -0.687\n2023-01-06  1.7151 -0.446\n2023-01-07      NA  1.224\n2023-01-08      NA  0.360\n\n\n\n\nThe first two days will only have data from xts1.\nThe next three days will have data from both xts1 and xts2.\nThe last two days will only have data from xts2.\n\n\n\n\nxts Package"
  },
  {
    "objectID": "presentations/R/index.html#what-is-data-manipulation",
    "href": "presentations/R/index.html#what-is-data-manipulation",
    "title": "Introduction to R",
    "section": "What is data manipulation?",
    "text": "What is data manipulation?\nData manipulation/transformation is combination of following operations:\n\nCreating data: Creating/transforming data in/to specific formats.\nSubsetting/Filtering: Selecting a subset of the data based on certain criteria.\nSorting: Arranging data in a specific order (ascending or descending).\nMerging and joining: Combining data from different sources based on common identifiers or keys.\nReshaping: Changing shape of the data from wide to long formats (or vice versa).(wide to long or vice versa)\nTransforming: Creating new variables from existing ones, such as computing new columns as linear combinations of other columns or normalizing data etc.\nAggregating: Summarizing data, which could involve computing sums, averages, counts, maxima, minima, etc., often grouped by certain categories.\nCleaning: Improving data quality by handling missing values, removing duplicates, correcting errors, or standardizing formats.\n\n\nData Manipulation"
  },
  {
    "objectID": "presentations/R/index.html#why-do-we-need-1",
    "href": "presentations/R/index.html#why-do-we-need-1",
    "title": "Introduction to R",
    "section": "Why do we need?",
    "text": "Why do we need?\n\nEasier exploration: Data manipulation is a crucial step in the data analysis process, as it helps in preparing the raw data into a format that is more suitable for exploration, analysis, and visualization.\nSupporting Decision Making: Effective data manipulation leads to easier analysis and more accurate results, thereby forming a foundation for data-driven decision-making.\nImproving Efficiency: To automate repetitive tasks and streamline data processing workflows and to enhance performance and speed of data analysis.\nData Reduction: To reduce the size of the data by removing unnecessary information, which can be useful for speeding up analysis and reducing storage requirements or to focus on relevant information.\n\n\nData Manipulation"
  },
  {
    "objectID": "presentations/R/index.html#overview-1",
    "href": "presentations/R/index.html#overview-1",
    "title": "Introduction to R",
    "section": "Overview",
    "text": "Overview\n\nData manipulation with time series data (xts)\n\nIrregularr to Regular time-series\nImputation of missing values\nAggregation in time\nAverages for the same months/days/hours\n\nUsing sapply\nUsing aggregate\nUsing split-Apply-Combine\n\n\nReshaping data\n\nUnderstanding Long and Wide Data Formats\nUsing reshape function\nUsing tidyr package\n\n\n\nData Manipulation"
  },
  {
    "objectID": "presentations/R/index.html#data-manipulation-with-xts",
    "href": "presentations/R/index.html#data-manipulation-with-xts",
    "title": "Introduction to R",
    "section": "Data Manipulation with xts",
    "text": "Data Manipulation with xts\n\nIrregularr to Regular time-series\nImputation of missing values\nAggregation in time\nAverages for the same months/days/hours\n\nUsing sapply\nUsing aggregate\nUsing split-Apply-Combine\n\n\n\nData Manipulation with xts"
  },
  {
    "objectID": "presentations/R/index.html#reshaping-data",
    "href": "presentations/R/index.html#reshaping-data",
    "title": "Introduction to R",
    "section": "Reshaping data",
    "text": "Reshaping data\n\nUnderstanding Long and Wide Data Formats\nUsing reshape function\nUsing tidyr package\n\n\nData Manipulation"
  },
  {
    "objectID": "presentations/R/index.html#understanding-long-and-wide-data-formats",
    "href": "presentations/R/index.html#understanding-long-and-wide-data-formats",
    "title": "Introduction to R",
    "section": "Understanding Long and Wide Data Formats",
    "text": "Understanding Long and Wide Data Formats\n\n\n\nLong format\n\n\n# Example long format data\ndata_long &lt;- data.frame(\n  City = c(\"Ankara\", \"Ankara\", \"Ankara\", \"Ankara\",\n           \"Istanbul\", \"Istanbul\", \"Istanbul\",\n           \"Istanbul\"),\n  Year = c(2020, 2021, 2022, 2023,\n           2020, 2021, 2022, 2023),\n  Pollution = c(40, 35, 47, 12, 50, 45, 61, 25)\n)\nprint(data_long)\n\n      City Year Pollution\n1   Ankara 2020        40\n2   Ankara 2021        35\n3   Ankara 2022        47\n4   Ankara 2023        12\n5 Istanbul 2020        50\n6 Istanbul 2021        45\n7 Istanbul 2022        61\n8 Istanbul 2023        25\n\nstr(data_long)\n\n'data.frame':   8 obs. of  3 variables:\n $ City     : chr  \"Ankara\" \"Ankara\" \"Ankara\" \"Ankara\" ...\n $ Year     : num  2020 2021 2022 2023 2020 ...\n $ Pollution: num  40 35 47 12 50 45 61 25\n\n\n\n\nWide format\n\n\n# Example wide format data\ndata_wide &lt;- data.frame(\n  City = c(\"Ankara\", \"Istanbul\"),\n  Y2020 = c(40, 50),\n  Y2021 = c(35, 45),\n  Y2022 = c(47, 61),\n  Y2023 = c(12, 25)\n)\nprint(data_wide)\n\n      City Y2020 Y2021 Y2022 Y2023\n1   Ankara    40    35    47    12\n2 Istanbul    50    45    61    25\n\nstr(data_wide)\n\n'data.frame':   2 obs. of  5 variables:\n $ City : chr  \"Ankara\" \"Istanbul\"\n $ Y2020: num  40 50\n $ Y2021: num  35 45\n $ Y2022: num  47 61\n $ Y2023: num  12 25\n\n\n\n\n\nData Manipulation"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#part-i",
    "href": "presentations/R/apply_function_family.html#part-i",
    "title": "Introduction to R",
    "section": "Part I",
    "text": "Part I\n\napply: Used to apply a function to the rows or columns of a matrix or an array.\nlapply: Applies a function to each element of a list and returns a list. It is useful when you want to perform an operation on each element of a list and keep the results in a list.\nsapply: A user-friendly version of lapply. It applies a function to each element of a list, but tries to simplify the result to a vector or matrix if possible.\nvapply: Similar to sapply, but you can specify the type and structure of the output in advance, which makes it safer and can prevent unexpected results or errors.\ntapply: Applies a function to subsets of a vector broken down by factors and is particularly useful for data analysis.\nmapply: A multivariate version of sapply. It applies a function in parallel over sets of arguments (i.e., it can take multiple vectors/lists as input and apply a function to the corresponding elements of each).\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#apply-functioni",
    "href": "presentations/R/apply_function_family.html#apply-functioni",
    "title": "Introduction to R",
    "section": "apply function/I",
    "text": "apply function/I\n\napply(X, MARGIN, FUN, ..., simplify = TRUE)\n\nThis function is used to apply a function to the rows or columns of a matrix or array.\n\n\n(m &lt;- matrix(1:12, nrow = 3))\n\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\n\n\n\n\n# 1 indicates rows, 2 would indicate columns\napply(m, 1, mean)\n\n\n[1] 5.5 6.5 7.5\n\n\n\n\n\napply(m, 2, function(x) sum(x^3))\n\n\n[1]   36  405 1584 4059\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#apply-functionii",
    "href": "presentations/R/apply_function_family.html#apply-functionii",
    "title": "Introduction to R",
    "section": "apply function/II",
    "text": "apply function/II\n\napply(X, MARGIN, FUN, ..., simplify = TRUE)\n\nApply a complex function (is.prime3) to each column of a matrix.\n\n\n# or let's employ is.prime3 function\napply(m, 2, is.prime3)\n\n\n      [,1]  [,2]  [,3]  [,4]\n[1,] FALSE FALSE  TRUE FALSE\n[2,]  TRUE  TRUE FALSE  TRUE\n[3,]  TRUE FALSE FALSE FALSE\n\n\n\n\n\n# or let's normalize each column\napply(m, 2, function(x) {\n  return((x - min(x)) / (max(x) - min(x)))\n})\n\n\n     [,1] [,2] [,3] [,4]\n[1,]  0.0  0.0  0.0  0.0\n[2,]  0.5  0.5  0.5  0.5\n[3,]  1.0  1.0  1.0  1.0\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#tapply-functioni",
    "href": "presentations/R/apply_function_family.html#tapply-functioni",
    "title": "Introduction to R",
    "section": "tapply function/I",
    "text": "tapply function/I\n\ntapply(X, INDEX, FUN = NULL, ..., default = NA, simplify = TRUE)\n\nThis is used to apply a function over subsets of a vector and is particularly useful for data analysis.\n\n\nnumbers &lt;- c(1, 2, 3, 4, 5, 6)\ngroups &lt;- factor(c('A', 'B', 'A', 'B', 'A', 'B'))\ntapply(numbers, groups, mean)\n\n\nA B \n3 4 \n\n\n\n\n\n# or let's normalize each group\ntapply(numbers, groups, function(x) {\n  return((x - min(x)) / (max(x) - min(x)))\n})\n\n\n$A\n[1] 0.0 0.5 1.0\n\n$B\n[1] 0.0 0.5 1.0\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#tapply-functionii",
    "href": "presentations/R/apply_function_family.html#tapply-functionii",
    "title": "Introduction to R",
    "section": "tapply function/II",
    "text": "tapply function/II\n\ntapply(X, INDEX, FUN = NULL, ..., default = NA, simplify = TRUE)\n\nA more complex example.\n\n\n# Create random example pollution data\npollutant &lt;- runif(30)\ncity &lt;- factor(\n  rep(c(\"Istanbul\", \"Ankara\", \"Izmir\"), 10))\nyear &lt;- factor(\n  rep(c(\"2020\", \"2021\", \"2022\"), each = 10))\n\nair_data &lt;- data.frame(pollutant, city, year)\nhead(air_data)\n\n\n  pollutant     city year\n1 0.2252891 Istanbul 2020\n2 0.5028224   Ankara 2020\n3 0.8711306    Izmir 2020\n4 0.2496391 Istanbul 2020\n5 0.6407536   Ankara 2020\n6 0.1983938    Izmir 2020\n\n\n\n\n\ntapply(air_data$pollutant, \n       list(air_data$city, air_data$year), mean)\n\n\n              2020      2021      2022\nAnkara   0.6493675 0.3830728 0.3841522\nIstanbul 0.3111844 0.5345002 0.4606063\nIzmir    0.6819270 0.6283784 0.5563846\n\n\n\n\n\ntapply(pollutant, list(city, year), mean)\n\n\n              2020      2021      2022\nAnkara   0.6493675 0.3830728 0.3841522\nIstanbul 0.3111844 0.5345002 0.4606063\nIzmir    0.6819270 0.6283784 0.5563846\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#sapply-functioni",
    "href": "presentations/R/apply_function_family.html#sapply-functioni",
    "title": "Introduction to R",
    "section": "sapply function/I",
    "text": "sapply function/I\n\nsapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)\n\nIt applies a function over a list or vector and simplifies the result into a vector or matrix. It is a user-friendly version of lapply by default returning a vector, matrix or, if simplify = \"array\", an array if appropriate, by applying simplify2array().\n\n\nv &lt;- c(1, 4, 9, 16)\nsapply(v, sqrt)\n\n\n[1] 1 2 3 4\n\n\n\n\n\n# or let's calculate sqrt and cube of each value\nsapply(v, function(x) sqrt(x)^3)\n\n\n[1]  1  8 27 64\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#sapply-functionii",
    "href": "presentations/R/apply_function_family.html#sapply-functionii",
    "title": "Introduction to R",
    "section": "sapply function/II",
    "text": "sapply function/II\n\nsapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)\n\n\n# Create random example pollution data\nset.seed(123)  # For reproducibility\ncity_data &lt;- list(\n    Istanbul = data.frame(PM25 = rnorm(10), NO2 = rnorm(10)),\n    Ankara = data.frame(PM25 = rnorm(10), NO2 = rnorm(10)),\n    Izmir = data.frame(PM25 = rnorm(10), NO2 = rnorm(10))\n)\n\n\n\n# Let's calculate mean of PM25 for each city\nsapply(city_data,\n       function(x) mean(x$PM25, na.rm = TRUE))\n\n\n    Istanbul       Ankara        Izmir \n 0.074625644 -0.424558873 -0.008715537 \n\n\n\n\n\n# or let's calculate mean of each column\nsapply(city_data, function(x) colMeans(x))\n\n\n       Istanbul     Ankara        Izmir\nPM25 0.07462564 -0.4245589 -0.008715537\nNO2  0.20862196  0.3220446  0.221685996\n\n\n\n\n\n# or a shorter and tidier way\nsapply(city_data, colMeans)\n\n\n       Istanbul     Ankara        Izmir\nPM25 0.07462564 -0.4245589 -0.008715537\nNO2  0.20862196  0.3220446  0.221685996\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#vapply-functioni",
    "href": "presentations/R/apply_function_family.html#vapply-functioni",
    "title": "Introduction to R",
    "section": "vapply function/I",
    "text": "vapply function/I\n\nvapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE)\n\nThis is a safe version of sapply. You specify the type of output, which can avoid unexpected results.\n\n\nv &lt;- c(1, 4, 9, 16)\nvapply(v, sqrt, numeric(1))\n\n\n[1] 1 2 3 4\n\n\n\n\n\nv &lt;- 1:10\n# what are the results?\nvapply(v, is.prime2, numeric(1))\n\n\n [1] 0 1 1 0 1 0 1 0 0 0\n\n\n\n\n\n# what are the results?\nvapply(v, is.prime2, logical(1))\n\n\n [1] FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE\n[10] FALSE\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#vapply-functionii",
    "href": "presentations/R/apply_function_family.html#vapply-functionii",
    "title": "Introduction to R",
    "section": "vapply function/II",
    "text": "vapply function/II\n\nvapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE)\n\n\n# Create random example pollution data\nset.seed(123)  # For reproducibility\nmeasurements &lt;- list(\n    morning = rnorm(50, mean = 100, sd = 10),\n    afternoon = rnorm(60, mean = 120, sd = 15),\n    evening = rnorm(40, mean = 90, sd = 20)\n)\n\n\n\nvapply(measurements,\n       function(x) c(min(x),\n                     mean(x),\n                     median(x),\n                     max(x)),\n       numeric(4))\n\n\n       morning afternoon   evening\n[1,]  80.33383  85.36247  48.93506\n[2,] 100.34404 120.84048  85.63173\n[3,]  99.27360 119.82913  84.81710\n[4,] 121.68956 152.80999 132.00218\n\n\n\n\n\nvapply(measurements,\n       function(x) c(min = min(x),\n                     mean = mean(x),\n                     median = median(x),\n                     max = max(x)),\n       numeric(4))\n\n\n         morning afternoon   evening\nmin     80.33383  85.36247  48.93506\nmean   100.34404 120.84048  85.63173\nmedian  99.27360 119.82913  84.81710\nmax    121.68956 152.80999 132.00218\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#mapply-functioni",
    "href": "presentations/R/apply_function_family.html#mapply-functioni",
    "title": "Introduction to R",
    "section": "mapply function/I",
    "text": "mapply function/I\n\nmapply(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE)\n\nmapply in R is a multivariate version of sapply. It applies a function in parallel over a set of arguments. This is particularly useful when you have several lists or vectors and you want to apply a function to the 1st elements of each, then the 2nd elements, and so on.\n\n# Create random example pollution data\nset.seed(123)  # For reproducibility\npm25 &lt;- rnorm(7, mean = 35, sd = 5)  # PM2.5 readings for a week\nno2 &lt;- rnorm(7, mean = 50, sd = 10)  # NO2 readings for the same week\nso2 &lt;- rnorm(7, mean = 20, sd = 3)   # SO2 readings for the same week\n\n\n\n# let's calculate mean for the pollutants.\nmapply(mean, pm25, no2, so2)\n\n\n[1] 32.19762 33.84911 42.79354 35.35254 35.64644 43.57532\n[7] 37.30458\n\n\n\n\n\n# let's assume a hypothetical formula for an \n# air quality index\npollution_index &lt;- function(pm25, no2, so2) {\n  x &lt;- (pm25 * 0.4 + no2 * 0.3 + so2 * 0.2)\n  sqrt(x) / 3\n}\nmapply(pollution_index, pm25, no2, so2)\n\n\n[1] 1.755954 1.872350 1.974255 1.989788 1.965221 2.037121\n[7] 1.932563\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#mapply-functionii",
    "href": "presentations/R/apply_function_family.html#mapply-functionii",
    "title": "Introduction to R",
    "section": "mapply function/II",
    "text": "mapply function/II\n\n\nset.seed(123)  # For reproducibility\nactuals &lt;- list(\n  pm25 = rnorm(10), no2 = rnorm(10), so2 = rnorm(10))\npredicted &lt;- list(\n  pm25 = rnorm(10), no2 = rnorm(10), so2 = rnorm(10))\n# let's calculate RMSE for each pollutant\nmapply(function(a, p) {\n  sqrt(mean((a - p)^2))\n}, actuals, predicted)\n\n\n     pm25       no2       so2 \n0.7217496 1.6067028 1.6161172 \n\n\n\nor is there a tidier way?\n\nsqrt(mean((actuals$pm25 - predicted$pm25)^2))\n\n\nsapply(1:3, function(i) {\n  sqrt(mean((actuals[[i]] - predicted[[i]])^2))\n})\n\n\nfor (i in 1:3) {\n  print(sqrt(mean((actuals[[i]] - predicted[[i]])^2)))\n}\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#part-ii",
    "href": "presentations/R/apply_function_family.html#part-ii",
    "title": "Introduction to R",
    "section": "Part II",
    "text": "Part II\n\nrapply (Recursive Apply): This function is used to apply a function recursively to elements of a deeply nested list or expression at each level or at specific levels.\nMap: Similar to mapply (wrapper around mapply with SIMPLIFY = FALSE), but it always returns a list regardless of the output of the function being applied.\nReduce: This function applies a function successively over elements of a vector/list.\nFilter: This function is used to filter elements of a list/vector that satisfy a certain condition given by a function.\nFind: Similar to Filter, but it returns the first element of a list/vector.\nPosition: This function is used to find the position of the first or last element of a vector or list that satisfies a certain condition given by a function.\nsweep: It’s typically used for operations on arrays/matrices to apply a function to rows/columns, and it’s useful for data standardization.\nNegate: Used to create the negation of a given predicate function.\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#rapply-function-recursive-version-of-lapply",
    "href": "presentations/R/apply_function_family.html#rapply-function-recursive-version-of-lapply",
    "title": "Introduction to R",
    "section": "rapply function (Recursive version of lapply)",
    "text": "rapply function (Recursive version of lapply)\n\nrapply(object, f, classes = \"ANY\", deflt = NULL,\n       how = c(\"unlist\", \"replace\", \"list\"), ...)\n\nThis function is used to apply a function recursively to elements of a list or expression. It’s particularly useful when dealing with deeply nested lists where you need to perform an operation at each level or at specific levels.\nExample:\n\n\nset.seed(123)  # For reproducibility\n# Create a complex example data\nmeasurements  &lt;- sapply(\n  c(\"Ankara\", \"Istanbul\", \"Izmir\"),\n  function(city) {\n    sapply(paste0(\"day\", 1:30), function(day) {\n      sapply(c(\"PM25\", \"NO2\", \"SO2\"),\n             function(pol)\n               rnorm(24, mean = 50, sd = 10),\n             simplify = FALSE)\n    }, simplify = FALSE)\n  }, simplify = FALSE)\n\nnorm &lt;- function(x) { # normalize function\n    (x - min(x)) / (max(x) - min(x))\n}\n(normalized_measurements &lt;- rapply(\n  measurements, norm, how = \"replace\"))\n\n\n$Ankara\n$Ankara$day1\n$Ankara$day1$PM25\n [1] 0.3746184 0.4626151 0.9392026 0.5427226 0.5583823\n [6] 0.9808585 0.6467334 0.1869056 0.3409495 0.4052066\n[11] 0.8500528 0.6197981 0.6307099 0.5534256 0.3758531\n[16] 1.0000000 0.6565733 0.0000000 0.7107903 0.3979789\n[21] 0.2394528 0.4658660 0.2505941 0.3297498\n\n$Ankara$day1$NO2\n [1] 0.2753503 0.0000000 0.6547484 0.4772391 0.1422734\n [6] 0.7626493 0.5480679 0.3609306 0.6696198 0.6652127\n[11] 0.6505453 0.6160658 0.5811242 0.4214029 0.3581059\n[16] 0.3387814 0.2572813 0.3835349 0.1092674 1.0000000\n[21] 0.7507569 0.1461712 0.3329682 0.3164287\n\n$Ankara$day1$SO2\n [1] 0.7086383 0.5105920 0.5878271 0.5231680 0.5198822\n [6] 0.8436699 0.4779254 0.8775905 0.1744372 0.6638253\n[11] 0.5581284 0.5792529 0.6168048 0.4144850 0.4532798\n[16] 0.2960584 0.2838508 0.5993452 0.6325346 0.5418756\n[21] 0.7412820 1.0000000 0.4170755 0.0000000\n\n\n$Ankara$day2\n$Ankara$day2$PM25\n [1] 0.8625095 0.1981571 0.2063668 0.8701925 0.3625767\n [6] 0.0000000 0.5431306 0.4190900 0.4751283 0.6221495\n[11] 0.3293048 0.7225210 0.3874807 0.6014247 0.8978010\n[16] 0.6414807 0.3466322 0.9179332 0.8577699 0.6853394\n[21] 0.5653778 0.2296500 1.0000000 0.2403600\n\n$Ankara$day2$NO2\n [1] 1.00000000 0.83017492 0.37150180 0.16640085 0.24837019\n [6] 0.49927066 0.36865077 0.34249162 0.18580345 0.42095940\n[11] 0.22904656 0.00000000 0.33401390 0.67101273 0.28340261\n[16] 0.59033566 0.01298461 0.41822697 0.56736528 0.51075354\n[21] 0.46004971 0.26644946 0.21223845 0.16699539\n\n$Ankara$day2$SO2\n [1] 0.5478803 0.2790698 0.3943845 0.4535578 0.9835346\n [6] 0.3536530 0.5775949 0.5378646 0.2754402 0.5001927\n[11] 0.8827583 0.6321377 0.5285953 0.4115613 0.0000000\n[16] 0.8037109 0.1495595 0.7049337 1.0000000 0.1537860\n[21] 0.6953023 0.4520170 0.1214186 0.1359243\n\n\n$Ankara$day3\n$Ankara$day3$PM25\n [1] 0.00000000 0.22108680 0.02886492 0.47277583 0.76439586\n [6] 0.06494595 0.49338926 0.48952838 0.39932026 0.12248843\n[11] 0.30605272 0.27281777 0.44697815 0.25381066 0.53246650\n[16] 0.25336831 0.54810654 0.11406308 0.07049573 1.00000000\n[21] 0.24463809 0.39230437 0.46217257 0.23081837\n\n$Ankara$day3$NO2\n [1] 0.50019669 0.45432915 0.27310588 0.36015133 0.32933667\n [6] 1.00000000 0.10999097 0.00000000 0.35162130 0.43619154\n[11] 0.47528125 0.19774886 0.01013201 0.73165432 0.23146469\n[16] 0.07147995 0.26662444 0.27875169 0.68412219 0.36618159\n[21] 0.57375711 0.18505624 0.40640801 0.23920693\n\n$Ankara$day3$SO2\n [1] 0.40043888 0.11837154 0.00000000 0.94255862 0.54465007\n [6] 0.01696204 0.19934843 0.03570806 1.00000000 0.74743721\n[11] 0.29794077 0.52826229 0.25543041 0.23779115 0.14879101\n[16] 0.20406367 0.84388505 0.35809470 0.40746579 0.44292332\n[21] 0.72466059 0.22644604 0.09069219 0.85094836\n\n\n$Ankara$day4\n$Ankara$day4$PM25\n [1] 0.267655842 0.181507909 0.024674622 0.009870828\n [5] 0.227069755 0.591325972 0.741636397 0.618708015\n [9] 0.291341226 0.420732152 0.187152088 0.183294967\n[13] 0.672817235 0.092113383 1.000000000 0.374871727\n[17] 0.468034787 0.176782887 0.226942869 0.000000000\n[21] 0.346571905 0.530511622 0.501578526 0.163639640\n\n$Ankara$day4$NO2\n [1] 0.21665877 0.30003614 0.88172636 0.11515808 0.39410377\n [6] 1.00000000 0.41683177 0.05037788 0.25271205 0.58754206\n[11] 0.33688799 0.28266407 0.34611163 0.47256884 0.91154885\n[16] 0.42044424 0.76084447 0.62983696 0.41314501 0.00000000\n[21] 0.29452896 0.30362488 0.45995199 0.82471124\n\n$Ankara$day4$SO2\n [1] 1.00000000 0.81590855 0.40087265 0.00000000 0.33774827\n [6] 0.45578124 0.64241809 0.67143695 0.60273434 0.08920695\n[11] 0.64356142 0.32348087 0.47691798 0.45216211 0.53948309\n[16] 0.43984581 0.02199036 0.61562116 0.52907709 0.36815326\n[21] 0.46292695 0.46685180 0.48833064 0.83893921\n\n\n$Ankara$day5\n$Ankara$day5$PM25\n [1] 0.4430542 0.5385962 0.7854797 0.7572939 0.7797734\n [6] 0.3545950 0.9913393 0.5135790 0.9578649 0.1637076\n[11] 0.5022957 0.8056018 0.3205917 0.3113496 0.2654810\n[16] 0.2373515 0.3892238 0.5788535 0.0000000 0.5494347\n[21] 0.8023343 1.0000000 0.8182534 0.6838926\n\n$Ankara$day5$NO2\n [1] 0.08710788 0.38823888 0.45499913 0.73748958 0.52093374\n [6] 0.21237536 1.00000000 0.79311880 0.61275417 0.87520211\n[11] 0.19093223 0.72606129 0.40927220 0.73219651 0.53293627\n[16] 0.71860554 0.90662297 0.55116433 0.82153117 0.23116610\n[21] 0.35609847 0.95578456 0.65020948 0.00000000\n\n$Ankara$day5$SO2\n [1] 0.21873790 0.44966388 0.66139407 0.46929675 0.61343400\n [6] 0.67990099 0.82125479 0.50064255 0.47920300 0.14147517\n[11] 0.50924049 0.37600043 0.29616499 0.45380787 0.69100559\n[16] 0.09392818 0.40470016 0.51267675 0.31220555 0.55580764\n[21] 0.57119805 0.48296405 0.00000000 1.00000000\n\n\n$Ankara$day6\n$Ankara$day6$PM25\n [1] 0.37674386 0.58032870 0.49061587 0.66910339 0.61989704\n [6] 0.37567567 0.51543163 0.20082278 0.62922983 0.31595570\n[11] 1.00000000 0.03309497 0.31525476 0.62173215 0.54679913\n[16] 0.28542539 0.18861188 0.45988396 0.42214185 0.00000000\n[21] 0.43375532 0.47075965 0.46707443 0.17476935\n\n$Ankara$day6$NO2\n [1] 0.7193079 0.9657712 0.7138739 0.2791328 0.4702933\n [6] 0.6837957 0.4125581 0.0000000 0.8307683 0.3627343\n[11] 0.4326275 1.0000000 0.3778461 0.8202484 0.2449684\n[16] 0.4924432 0.5691830 0.2701030 0.4159166 0.5813949\n[21] 0.7724446 0.1384933 0.4937509 0.7958529\n\n$Ankara$day6$SO2\n [1] 0.4174779 0.5694640 0.6220245 0.5775073 0.6539709\n [6] 0.5000277 0.4423029 0.0000000 0.5059333 0.6097355\n[11] 0.6305890 0.4142106 0.8774056 0.5811952 0.5494314\n[16] 0.7767755 0.3818359 0.4350295 1.0000000 0.5265797\n[21] 0.8484538 0.2389878 0.4865753 0.5994469\n\n\n$Ankara$day7\n$Ankara$day7$PM25\n [1] 0.7237169 0.4045845 0.6550890 0.3870389 0.8245803\n [6] 0.9155219 0.1065511 0.9524093 0.3470461 0.7615362\n[11] 0.8116748 0.6015247 0.4927032 0.6907893 0.7576375\n[16] 0.8662782 0.1487503 0.2504185 1.0000000 0.9061982\n[21] 0.7567748 0.8251853 0.8745572 0.0000000\n\n$Ankara$day7$NO2\n [1] 0.7377062 0.2540538 0.4710108 0.3116064 0.6654547\n [6] 0.2954425 0.5582924 0.2826445 0.0697811 0.7679434\n[11] 0.6257185 0.9238543 0.4208457 0.7421707 1.0000000\n[16] 0.3157526 0.0000000 0.3285258 0.3361993 0.4470789\n[21] 0.9202291 0.3022121 0.5141799 0.3320631\n\n$Ankara$day7$SO2\n [1] 0.46182516 0.56018726 0.89994288 0.49561713 0.69378524\n [6] 0.71590202 0.76143470 0.26254437 1.00000000 0.32734852\n[11] 0.41953486 0.92534877 0.88850863 0.08981265 0.16248392\n[16] 0.00000000 0.51589506 0.51019772 0.57695701 0.63995383\n[21] 0.25333209 0.12207213 0.79896009 0.70658909\n\n\n$Ankara$day8\n$Ankara$day8$PM25\n [1] 0.1697950 0.5973234 0.3552016 0.0000000 0.6714801\n [6] 0.6021416 0.5966517 0.6914450 0.8929045 0.6882536\n[11] 0.4397120 0.4039248 0.5862407 0.7198249 0.3117441\n[16] 0.5703655 0.9185444 0.5933528 0.4149239 0.5426593\n[21] 0.9631051 0.7923970 1.0000000 0.6681475\n\n$Ankara$day8$NO2\n [1] 0.47544519 0.22387825 0.52610894 0.23741400 0.00000000\n [6] 0.40214024 0.87421408 0.57688905 0.67150311 0.46209225\n[11] 0.21086787 0.31638286 0.29794322 0.24718699 0.55176512\n[16] 0.05796262 0.59388602 0.59331117 0.05763571 0.53496980\n[21] 1.00000000 0.22420063 0.58831265 0.16577463\n\n$Ankara$day8$SO2\n [1] 0.8260289986 0.5492954041 1.0000000000 0.0000000000\n [5] 0.4524989948 0.2996077376 0.4055776427 0.2666095620\n [9] 0.2009482584 0.6550201532 0.1193839955 0.9460332350\n[13] 0.0876805298 0.5014808706 0.6403191690 0.6575959352\n[17] 0.3719917798 0.4945448546 0.7779889031 0.0008051762\n[21] 0.2176971419 0.5719827001 0.3260128179 0.9093790686\n\n\n$Ankara$day9\n$Ankara$day9$PM25\n [1] 0.7458807 0.6171596 0.2788233 0.6072946 0.5339458\n [6] 0.5797881 0.3486778 0.7084915 0.3792157 0.5532605\n[11] 0.6833866 0.4339176 0.7265513 0.3197783 0.0000000\n[16] 0.7012769 0.7817046 0.5404923 0.7096625 0.3541691\n[21] 0.5744768 0.1859346 0.8546519 1.0000000\n\n$Ankara$day9$NO2\n [1] 0.8569513 0.6001817 0.5987867 0.2531030 0.7908268\n [6] 0.5574270 0.4534450 0.2773592 0.5366710 0.4086082\n[11] 0.5139941 0.3226874 1.0000000 0.6028265 0.8571688\n[16] 0.0000000 0.5008993 0.4490761 0.3214457 0.9671320\n[21] 0.2766001 0.6807864 0.8038945 0.6481004\n\n$Ankara$day9$SO2\n [1] 0.26495964 0.71572101 0.52449518 0.21824558 0.13770528\n [6] 1.00000000 0.31378551 0.02168532 0.61449533 0.55914864\n[11] 0.14619597 0.00000000 0.45330068 0.76491369 0.64002213\n[16] 0.35983532 0.27515085 0.54942987 0.52121086 0.63843086\n[21] 0.38394136 0.70534504 0.27598881 0.40013455\n\n\n$Ankara$day10\n$Ankara$day10$PM25\n [1] 0.70928908 0.76839688 0.07367126 0.55897374 0.67796615\n [6] 0.18936421 0.64756418 0.33707616 0.77558057 0.66128952\n[11] 0.71598795 0.56218322 0.73842910 0.86104581 1.00000000\n[16] 0.52680865 0.00000000 0.54102379 0.58231035 0.49669209\n[21] 0.66836057 0.77330908 0.41066330 0.46377629\n\n$Ankara$day10$NO2\n [1] 0.5458623 0.3368784 0.4782834 0.0257424 0.2113037\n [6] 0.1654856 0.2699994 0.3053388 0.5424374 0.6746542\n[11] 0.2978267 0.2384302 0.2285438 0.3667767 0.4054756\n[16] 0.5647699 0.3873350 0.0000000 0.4380102 0.7198590\n[21] 0.7208321 0.2842526 0.1169860 1.0000000\n\n$Ankara$day10$SO2\n [1] 0.47508327 0.49634679 0.66588540 0.00000000 0.28991000\n [6] 0.02408674 0.30140549 0.56713736 0.08160036 0.72132916\n[11] 0.62293658 0.23231031 0.60231179 0.77307141 0.87551420\n[16] 0.45857981 0.49759518 0.49986081 1.00000000 0.89645238\n[21] 0.80132222 0.43420001 0.65039440 0.66022876\n\n\n$Ankara$day11\n$Ankara$day11$PM25\n [1] 0.20847369 0.04977292 0.59758108 0.09576631 0.44962434\n [6] 0.50707486 0.57956161 0.49301719 0.27985101 0.67721350\n[11] 0.85108486 0.65290166 0.00000000 0.77271862 0.43627900\n[16] 0.57055840 0.59300546 0.42688818 0.43183964 0.68479252\n[21] 0.61370743 0.67811407 1.00000000 0.60280134\n\n$Ankara$day11$NO2\n [1] 0.49323604 0.00000000 1.00000000 0.35247530 0.93534132\n [6] 0.52735488 0.76474864 0.42855447 0.55526543 0.49457760\n[11] 0.41296799 0.42637521 0.65753554 0.40983939 0.03527915\n[16] 0.41097536 0.56104222 0.57668067 0.57670354 0.10577211\n[21] 0.52615107 0.64836134 0.71133514 0.40504513\n\n$Ankara$day11$SO2\n [1] 0.42655972 0.89832660 0.07567046 0.39659743 0.62972463\n [6] 0.08874486 0.58336618 1.00000000 0.50941326 0.43788343\n[11] 0.63427346 0.43772229 0.72251188 0.74624322 0.51117348\n[16] 0.20372756 0.16683339 0.35588717 0.71833576 0.00000000\n[21] 0.01873794 0.34004218 0.61328404 0.27232020\n\n\n$Ankara$day12\n$Ankara$day12$PM25\n [1] 0.7270131 0.6084996 0.5005593 0.7124670 0.6202776\n [6] 0.4416011 0.5866003 0.6757776 0.6134068 0.3961824\n[11] 0.7202569 0.7840207 0.5962719 0.5679659 0.5209079\n[16] 1.0000000 0.5962807 0.5032032 0.0000000 0.2018781\n[21] 0.5204693 0.5812846 0.5963999 0.7130406\n\n$Ankara$day12$NO2\n [1] 0.49225632 0.91039116 0.27636423 0.19120023 0.18510263\n [6] 0.77020811 0.52527173 0.78431300 0.47042442 0.37420140\n[11] 0.44055118 0.00000000 0.20272478 0.12186675 0.86282173\n[16] 0.37258733 0.78420672 1.00000000 0.49296202 0.63414295\n[21] 0.03014131 0.30689050 0.56656896 0.63865691\n\n$Ankara$day12$SO2\n [1] 0.16879839 1.00000000 0.24144056 0.36756760 0.50887781\n [6] 0.34578465 0.19675179 0.60432705 0.74194283 0.34489769\n[11] 0.48775555 0.32855519 0.59736458 0.07304617 0.91215628\n[16] 0.20641370 0.00000000 0.26737682 0.38746884 0.74389178\n[21] 0.57196570 0.38644318 0.01674005 0.14306308\n\n\n$Ankara$day13\n$Ankara$day13$PM25\n [1] 0.3845106 1.0000000 0.0000000 0.6777952 0.3020432\n [6] 0.7990065 0.1633776 0.4540529 0.1723619 0.6262373\n[11] 0.7577192 0.8635236 0.6022378 0.8391754 0.7039368\n[16] 0.3916278 0.5296013 0.2012650 0.3795443 0.6981677\n[21] 0.5441590 0.5251420 0.1862790 0.2845326\n\n$Ankara$day13$NO2\n [1] 0.11186175 0.42028571 0.05179333 0.46462421 0.01831353\n [6] 0.80139026 0.43764812 0.12877396 0.37926985 0.22145533\n[11] 0.41386465 0.37993110 0.04551623 0.10475999 0.39483800\n[16] 0.75100693 0.60357980 0.14909873 0.53479168 0.30225990\n[21] 0.39529535 0.38440595 1.00000000 0.00000000\n\n$Ankara$day13$SO2\n [1] 0.45909798 0.03289446 0.56988434 0.68471691 0.76381105\n [6] 0.00000000 0.52976182 0.79728101 0.34241568 0.38815753\n[11] 0.42795078 0.51894170 0.58695244 0.73484273 0.41459287\n[16] 0.48070575 1.00000000 0.53391520 0.47900064 0.13208321\n[21] 0.43687713 0.38607837 0.43372702 0.30584270\n\n\n$Ankara$day14\n$Ankara$day14$PM25\n [1] 0.27056859 0.26137236 0.39847616 0.82707346 0.74067194\n [6] 0.35908096 0.00000000 0.22784317 0.33259949 0.48463301\n[11] 0.27712451 1.00000000 0.38283324 0.12781573 0.41831119\n[16] 0.18429816 0.49885544 0.51983739 0.55286401 0.01734773\n[21] 0.51633787 0.54064022 0.07171321 0.71529116\n\n$Ankara$day14$NO2\n [1] 0.65561640 0.99876760 0.51353544 0.48863446 0.49992279\n [6] 0.49384988 0.05949264 0.09964999 0.46049477 0.34647811\n[11] 0.49044663 0.00000000 0.13869398 0.22863748 0.70133084\n[16] 0.22931530 0.29701407 0.49613860 0.40497113 0.51120637\n[21] 1.00000000 0.22340224 0.40888320 0.36103970\n\n$Ankara$day14$SO2\n [1] 0.8179835 0.3584412 0.4968746 0.6719248 0.3002189\n [6] 0.8467377 0.6494960 0.2970741 0.6049522 0.4704485\n[11] 0.5764863 0.4952860 0.7289945 0.2413111 0.4081574\n[16] 0.4632220 0.3128644 0.3039719 0.5097849 0.4867875\n[21] 0.0000000 0.7229644 0.5636976 1.0000000\n\n\n$Ankara$day15\n$Ankara$day15$PM25\n [1] 0.52082983 0.26815674 0.99222561 1.00000000 0.09591827\n [6] 0.47258619 0.32076265 0.40965417 0.41869101 0.08627950\n[11] 0.43164581 0.75830258 0.33128706 0.33154668 0.68003942\n[16] 0.56841101 0.00000000 0.41891737 0.73694438 0.68376747\n[21] 0.46163251 0.52886928 0.10077834 0.43489127\n\n$Ankara$day15$NO2\n [1] 0.11449083 0.27280967 0.71725542 0.05630679 0.50400215\n [6] 0.55547930 0.43639034 1.00000000 0.09283706 0.61218167\n[11] 0.39051691 0.33569503 0.56688341 0.09345791 0.00000000\n[16] 0.26118117 0.97753834 0.43666231 0.52457726 0.35833335\n[21] 0.56892494 0.11537402 0.78815221 0.60534894\n\n$Ankara$day15$SO2\n [1] 0.09855925 0.39874463 0.62947029 0.57417499 0.89639366\n [6] 0.16600986 0.76886026 0.74111210 0.32307600 0.03947305\n[11] 0.00000000 0.53933001 0.35492695 1.00000000 0.56629804\n[16] 0.25004824 0.02217484 0.17667354 0.49927121 0.22250885\n[21] 0.55900863 0.26315966 0.34292200 0.12503645\n\n\n$Ankara$day16\n$Ankara$day16$PM25\n [1] 1.0000000 0.6328219 0.6090066 0.1600823 0.7092198\n [6] 0.3161235 0.3469708 0.7695940 0.4494404 0.1468866\n[11] 0.9684434 0.0000000 0.6889089 0.7926901 0.4078130\n[16] 0.6588970 0.6576929 0.7981482 0.6681937 0.4979680\n[21] 0.7690454 0.7421053 0.3364517 0.2280516\n\n$Ankara$day16$NO2\n [1] 0.4173301 0.3336535 0.1965350 0.4026183 0.1320861\n [6] 0.4175129 0.2660235 0.5708875 0.8536362 0.2099389\n[11] 0.5902535 0.5454488 0.3729189 0.2990290 0.6900017\n[16] 0.0000000 0.2625036 0.1095701 0.6553174 0.3496972\n[21] 0.2853427 1.0000000 0.3768031 0.3009361\n\n$Ankara$day16$SO2\n [1] 0.5935658 0.0000000 0.6540687 0.4677454 0.6471499\n [6] 0.1861925 0.1732895 0.2779954 0.2543025 0.9110121\n[11] 1.0000000 0.4484515 0.3842609 0.3937595 0.5202938\n[16] 0.5290839 0.5904424 0.2610730 0.2292334 0.8786150\n[21] 0.3239951 0.5945762 0.4801971 0.1939830\n\n\n$Ankara$day17\n$Ankara$day17$PM25\n [1] 0.7454106 0.6260315 0.9764018 0.6101378 0.4818906\n [6] 0.6560764 0.2379535 0.3378360 0.7223353 0.4814407\n[11] 0.5577483 0.5436782 0.3907856 0.0000000 0.6762245\n[16] 0.7941318 0.2084985 1.0000000 0.6865983 0.9597947\n[21] 0.3031964 0.6242253 0.5480219 0.7960935\n\n$Ankara$day17$NO2\n [1] 0.36950683 0.49830824 0.09567737 0.32357371 0.52907230\n [6] 0.33980586 0.49068804 0.39407901 0.63878085 0.76662524\n[11] 0.31335633 0.43070710 0.82838326 0.00000000 0.42779277\n[16] 0.97065785 1.00000000 0.53625758 0.30399778 0.53827513\n[21] 0.35199640 0.83135560 0.31700316 0.58550417\n\n$Ankara$day17$SO2\n [1] 0.851271431 0.431615731 0.921858316 0.434534634\n [5] 0.854436993 0.996546924 0.361254871 1.000000000\n [9] 0.513263359 0.752098726 0.723910870 0.532256111\n[13] 0.744100688 0.287525689 0.620936459 0.914017697\n[17] 0.000000000 0.209071736 0.308394327 0.178249123\n[21] 0.790253840 0.359888246 0.002918103 0.468159613\n\n\n$Ankara$day18\n$Ankara$day18$PM25\n [1] 0.39705874 0.71788816 0.21364918 0.79620478 0.59998447\n [6] 0.59072276 0.27826318 1.00000000 0.45527836 0.02817473\n[11] 0.44509716 0.00000000 0.41766646 0.38893352 0.67289054\n[16] 0.75716448 0.31077786 0.70485443 0.86385557 0.29585055\n[21] 0.32973323 0.66490432 0.54460676 0.63866963\n\n$Ankara$day18$NO2\n [1] 0.9888412 0.5879251 0.8497724 0.6808348 0.6062600\n [6] 0.5875317 0.9441790 0.0405497 0.0000000 0.6686373\n[11] 0.3882660 0.4645782 0.7274711 0.7322059 0.3319342\n[16] 0.3122850 0.4644180 0.8542309 0.6032657 1.0000000\n[21] 0.4324128 0.8789138 0.7833081 0.6765711\n\n$Ankara$day18$SO2\n [1] 0.66759324 0.49764280 0.53944509 0.62225280 0.57808648\n [6] 0.79691232 0.53937667 0.54890455 0.44762127 0.53227626\n[11] 0.54929880 0.00000000 0.23217764 0.54838828 0.50121479\n[16] 0.27229592 0.07883524 0.47941738 0.72602156 1.00000000\n[21] 0.55671476 0.93147650 0.58643820 0.59439273\n\n\n$Ankara$day19\n$Ankara$day19$PM25\n [1] 0.6658122 0.2733093 0.5421765 0.8574410 0.3129901\n [6] 0.4535605 0.1822945 0.6755072 0.6986382 0.7720386\n[11] 0.1586409 0.5943678 0.2491824 0.5590315 1.0000000\n[16] 0.3938285 0.7944763 0.3130089 0.4020361 0.7032094\n[21] 0.3361756 0.0000000 0.9745680 0.6774789\n\n$Ankara$day19$NO2\n [1] 0.26194680 0.00000000 0.72361872 1.00000000 0.40887358\n [6] 0.52816641 0.59776566 0.24000120 0.30511615 0.04957939\n[11] 0.23354301 0.48593427 0.31634854 0.33055695 0.34943576\n[16] 0.02422008 0.52590495 0.10225481 0.33160467 0.28889031\n[21] 0.32974307 0.64148520 0.26224015 0.22490343\n\n$Ankara$day19$SO2\n [1] 0.000000000 0.202527627 0.100268511 0.546801679\n [5] 0.186271607 0.517327222 0.389542688 0.024421635\n [9] 0.206808286 0.682159267 0.687255004 1.000000000\n[13] 0.430064098 0.006759048 0.213103131 0.546955516\n[17] 0.970090740 0.462285973 0.754572859 0.648961081\n[21] 0.099727577 0.382540256 0.801342812 0.679601603\n\n\n$Ankara$day20\n$Ankara$day20$PM25\n [1] 0.7452183 0.7492985 0.4525787 0.1989151 1.0000000\n [6] 0.1680231 0.3154835 0.7958202 0.2164363 0.4340543\n[11] 0.2407601 0.7932769 0.7398621 0.7323781 0.7386832\n[16] 0.7738480 0.7990038 0.0000000 0.5575357 0.6375826\n[21] 0.8251427 0.2393243 0.4500680 0.2742018\n\n$Ankara$day20$NO2\n [1] 0.8997367 0.9720831 0.8118237 0.1562743 0.7023335\n [6] 0.9301350 0.6097087 0.3703121 0.2007211 0.3379620\n[11] 0.7880721 0.4141598 0.6291702 0.9772599 0.7435509\n[16] 1.0000000 0.0000000 0.4634007 0.5761586 0.7436338\n[21] 0.1736234 0.8178598 0.6551873 0.6409732\n\n$Ankara$day20$SO2\n [1] 0.7492968 0.6031607 0.8468376 0.7819799 0.5952437\n [6] 0.8736939 0.6987968 0.7867794 0.4914100 1.0000000\n[11] 0.6294412 0.8286646 0.6069593 0.5649753 0.8138358\n[16] 0.2597696 0.7422528 0.7224201 0.0000000 0.7165290\n[21] 0.1232322 0.7846869 0.5242144 0.4678448\n\n\n$Ankara$day21\n$Ankara$day21$PM25\n [1] 0.51669480 0.87574809 0.35316343 0.66369621 0.60724643\n [6] 0.21156228 0.06545757 0.00000000 0.66191927 0.50943624\n[11] 1.00000000 0.66774804 0.73956940 0.86568645 0.38818776\n[16] 0.65120509 0.74453859 0.87478525 0.71692012 0.62805986\n[21] 0.29256197 0.70830981 0.64864676 0.68350986\n\n$Ankara$day21$NO2\n [1] 0.71714723 0.52000566 0.55939475 0.80026697 0.63771688\n [6] 0.32198554 0.49216837 0.16785570 0.27882965 0.53804263\n[11] 0.01688094 0.05142185 0.93113126 0.40188114 0.00000000\n[16] 0.54804900 1.00000000 0.79235279 0.72273800 0.95671803\n[21] 0.34045750 0.81360711 0.39858222 0.58386242\n\n$Ankara$day21$SO2\n [1] 0.9818710 0.6578105 0.6053826 0.1170043 0.2008393\n [6] 1.0000000 0.1209156 0.4613086 0.6378043 0.6706486\n[11] 0.6889606 0.3630235 0.1917943 0.3255094 0.1706824\n[16] 0.5686986 0.6970926 0.9591608 0.5007766 0.1777925\n[21] 0.6721366 0.6409766 0.3434711 0.0000000\n\n\n$Ankara$day22\n$Ankara$day22$PM25\n [1] 0.6792612 0.7971562 0.3406678 0.6071248 0.3468272\n [6] 0.6539426 0.3976601 0.3247807 0.4710287 0.3444186\n[11] 0.2458257 0.3339919 0.4326402 0.5017576 0.9264116\n[16] 0.0000000 0.3712730 0.6376631 1.0000000 0.5717953\n[21] 0.4308450 0.3366778 0.5680434 0.7522569\n\n$Ankara$day22$NO2\n [1] 0.43606152 0.54733756 0.56435931 0.72836412 0.85067847\n [6] 0.58427789 0.47053325 0.94135969 0.54758491 1.00000000\n[11] 0.47509416 0.69143811 0.00000000 0.45893851 0.48793952\n[16] 0.25216330 0.16331799 0.79843001 0.78754614 0.07918096\n[21] 0.63076340 0.13878090 0.15845864 0.66310514\n\n$Ankara$day22$SO2\n [1] 0.30882799 0.88579875 0.55773647 0.72868890 0.36461737\n [6] 0.14901577 0.85875291 0.62628843 0.46237373 0.56828706\n[11] 1.00000000 0.30465655 0.28705312 0.33164188 0.00000000\n[16] 0.82607432 0.61058819 0.61567333 0.52961081 0.36924352\n[21] 0.26162794 0.83714590 0.05455585 0.69576093\n\n\n$Ankara$day23\n$Ankara$day23$PM25\n [1] 0.30800596 0.53538543 0.31898890 0.36496495 0.84994405\n [6] 0.61703062 0.02195546 0.50240819 0.38009551 0.23523616\n[11] 0.52004427 0.50315978 0.40617864 0.89295630 0.00000000\n[16] 0.65297754 0.41453059 0.61454107 0.37963336 0.35004716\n[21] 0.11386942 0.43136315 1.00000000 0.68502088\n\n$Ankara$day23$NO2\n [1] 0.70012150 0.55888475 0.60146288 0.55663996 0.47726065\n [6] 0.28081571 0.29002481 0.09172594 0.38790494 0.55598620\n[11] 0.58060249 0.40665038 0.28729649 1.00000000 0.52578005\n[16] 0.65277125 0.32628146 0.38193689 0.47228689 0.70029794\n[21] 0.33114765 0.54749276 0.00000000 0.29479337\n\n$Ankara$day23$SO2\n [1] 0.23036684 0.86684568 0.52872634 0.46894600 0.93451558\n [6] 0.86761572 0.33461889 0.68545840 0.24718647 0.44639063\n[11] 1.00000000 0.95595620 0.86569623 0.42117650 0.07440139\n[16] 0.26114354 0.82429519 0.49535545 0.00000000 0.52456290\n[21] 0.94540136 0.74250829 0.35493084 0.16318105\n\n\n$Ankara$day24\n$Ankara$day24$PM25\n [1] 0.31414929 0.55710580 0.79793801 0.00000000 0.83606505\n [6] 0.54890357 0.70812959 0.08088947 0.35926384 0.42089217\n[11] 0.84190272 0.83746801 0.67012656 1.00000000 0.40193785\n[16] 0.83305599 0.53722299 0.35906980 0.80789986 0.93704789\n[21] 0.79516632 0.40363296 0.41481076 0.93608166\n\n$Ankara$day24$NO2\n [1] 0.6916864 0.7886549 0.5510322 0.8764124 0.4554253\n [6] 0.7471169 0.4537127 0.1190448 0.3467706 0.6476448\n[11] 0.7995059 0.2637149 0.3653881 0.9788245 0.5316694\n[16] 0.7227803 0.5127463 0.5591923 0.6376680 0.6221525\n[21] 0.5807569 0.5243681 0.0000000 1.0000000\n\n$Ankara$day24$SO2\n [1] 0.8315437 0.2124978 0.4122394 0.7426640 0.6619548\n [6] 0.7215388 0.2187782 1.0000000 0.2055659 0.6096365\n[11] 0.4784756 0.3617989 0.3670001 0.2359804 0.7956268\n[16] 0.4673937 0.5037260 0.4931102 0.3679090 0.2054458\n[21] 0.5025503 0.0000000 0.1445271 0.2177827\n\n\n$Ankara$day25\n$Ankara$day25$PM25\n [1] 0.1284945 0.4774675 0.9163218 0.0000000 0.5735451\n [6] 0.7106393 0.1547282 0.4303868 0.6882938 0.3707340\n[11] 0.3809821 0.5364812 0.4282639 0.2824088 0.4051332\n[16] 1.0000000 0.7030246 0.1767799 0.0795743 0.3399900\n[21] 0.8369516 0.5320530 0.2394878 0.7055453\n\n$Ankara$day25$NO2\n [1] 0.43340346 0.20950034 0.56823926 0.80929663 0.56217871\n [6] 0.50719150 0.31482564 0.59255160 0.22086389 0.08874592\n[11] 0.45381778 0.45580422 1.00000000 0.18780443 0.50240776\n[16] 0.64622046 0.70190430 0.46121727 0.29509271 0.44873078\n[21] 0.90354997 0.57312561 0.00000000 0.78646344\n\n$Ankara$day25$SO2\n [1] 0.61406324 0.39797633 0.40388902 0.35423082 0.50718441\n [6] 0.22095290 0.51488264 0.06004206 0.48595018 0.82723686\n[11] 0.60228293 0.79972596 0.00000000 0.43123756 0.64295176\n[16] 0.00860618 1.00000000 0.02110178 0.47253941 0.46776414\n[21] 0.45641088 0.33140730 0.57997341 0.02247324\n\n\n$Ankara$day26\n$Ankara$day26$PM25\n [1] 0.03849655 0.25066084 0.45027465 0.88946981 1.00000000\n [6] 0.57621234 0.59697108 0.38800166 0.48549430 0.00000000\n[11] 0.56633676 0.29043860 0.58129166 0.35379830 0.24830552\n[16] 0.39620136 0.34680513 0.83526874 0.53935626 0.61398305\n[21] 0.05470999 0.96970841 0.52269930 0.18324347\n\n$Ankara$day26$NO2\n [1] 0.6133418 0.7705145 0.1394265 1.0000000 0.4825732\n [6] 0.8407138 0.5470485 0.4337483 0.0130911 0.2187999\n[11] 0.5152432 0.7585929 0.0000000 0.9119024 0.9184955\n[16] 0.2067208 0.6590483 0.2374273 0.4917649 0.7868169\n[21] 0.7699282 0.2890722 0.4185700 0.2535189\n\n$Ankara$day26$SO2\n [1] 0.6055458 0.2182938 0.0000000 0.8360812 1.0000000\n [6] 0.4434798 0.6915291 0.5347605 0.8369994 0.6493168\n[11] 0.5778311 0.1693296 0.7571760 0.4647288 0.2500277\n[16] 0.4951313 0.5104324 0.7523320 0.2981827 0.4225509\n[21] 0.8398154 0.8134112 0.7735460 0.8751837\n\n\n$Ankara$day27\n$Ankara$day27$PM25\n [1] 0.49536509 0.31587579 0.57556694 0.69056198 1.00000000\n [6] 0.00000000 0.51117025 0.59831169 0.43629856 0.09298831\n[11] 0.61811391 0.27083825 0.56429796 0.65603704 0.74200150\n[16] 0.09297883 0.69581906 0.27588651 0.15437821 0.74893603\n[21] 0.71055388 0.39336613 0.62223389 0.25228444\n\n$Ankara$day27$NO2\n [1] 0.4855481 0.4968917 0.4598736 0.6607508 0.8197419\n [6] 0.4252280 0.5089789 0.8394230 0.4503127 0.0000000\n[11] 0.6171812 0.3399758 0.3177926 0.7966798 1.0000000\n[16] 0.3096287 0.7195244 0.4968077 0.5435127 0.7573728\n[21] 0.5577380 0.3469240 0.4223306 0.6512569\n\n$Ankara$day27$SO2\n [1] 0.00000000 0.94332962 0.21136365 0.64824607 0.58988166\n [6] 0.99771722 0.69413652 0.67024250 0.83415348 0.41484741\n[11] 0.58835859 0.96596718 0.83012244 0.29154724 0.81760849\n[16] 0.26347907 0.47772440 0.97513216 0.02334195 0.15311634\n[21] 1.00000000 0.41820751 0.98414611 0.59595997\n\n\n$Ankara$day28\n$Ankara$day28$PM25\n [1] 0.5040127 0.5840713 0.2799361 0.3519199 0.3289707\n [6] 1.0000000 0.4413726 0.5133631 0.3444099 0.3649618\n[11] 0.7015054 0.3447982 0.4193570 0.4934601 0.3255179\n[16] 0.8220200 0.1185227 0.8328666 0.3421591 0.6970124\n[21] 0.0000000 0.6137274 0.5971864 0.1511778\n\n$Ankara$day28$NO2\n [1] 0.2755659 0.5557001 0.8324737 0.2762430 0.4340611\n [6] 0.9569845 0.1710020 0.7753775 0.6300385 0.1772733\n[11] 0.3048233 0.7274629 0.5718451 0.9143903 0.3240699\n[16] 0.0000000 0.8045117 0.3220785 0.5343855 1.0000000\n[21] 0.4264049 0.9506378 0.1797998 0.7688878\n\n$Ankara$day28$SO2\n [1] 0.5330234 0.2777436 0.1367496 0.4888606 0.5351946\n [6] 0.5409778 0.6083059 0.3494519 0.3361845 0.5304640\n[11] 0.3284020 0.7854113 0.5141641 0.3092790 0.0000000\n[16] 0.3019046 1.0000000 0.3234257 0.2519896 0.6384367\n[21] 0.5835031 0.6640489 0.3968214 0.7603463\n\n\n$Ankara$day29\n$Ankara$day29$PM25\n [1] 0.00000000 0.34778518 0.14498688 0.57360092 0.40314806\n [6] 0.70635699 1.00000000 0.40644376 0.19745297 0.10804094\n[11] 0.28150541 0.34137096 0.97935726 0.01346266 0.02457095\n[16] 0.23665002 0.54475659 0.61703900 0.08191432 0.40222944\n[21] 0.34963711 0.73281799 0.70000752 0.26626399\n\n$Ankara$day29$NO2\n [1] 0.5338631 0.7244561 0.0000000 0.4219489 0.7000010\n [6] 0.3550510 0.5005928 0.5128159 0.2920923 0.2070170\n[11] 0.4566303 0.4104024 0.7814310 1.0000000 0.5156698\n[16] 0.6446506 0.4972953 0.7083214 0.5880514 0.5937372\n[21] 0.8690173 0.2092344 0.9742355 0.6290824\n\n$Ankara$day29$SO2\n [1] 0.78370653 0.55154316 0.67571770 0.84412734 0.08052947\n [6] 0.53861077 0.91063965 0.63480151 0.47626553 0.52790505\n[11] 0.80091429 0.21489126 1.00000000 0.04756561 0.56936975\n[16] 0.48044632 0.33589158 0.38936690 0.80540312 0.68953464\n[21] 0.63280563 0.00000000 0.31216956 0.68592151\n\n\n$Ankara$day30\n$Ankara$day30$PM25\n [1] 0.12187877 0.15890019 1.00000000 0.60186463 0.04634306\n [6] 0.30835620 0.39208423 0.21196066 0.08269244 0.49827436\n[11] 0.85953074 0.62521817 0.43069565 0.69854842 0.88354938\n[16] 0.45786193 0.72951946 0.00000000 0.40814389 0.33040414\n[21] 0.61101047 0.68465359 0.46555901 0.17281961\n\n$Ankara$day30$NO2\n [1] 0.3955655 0.6983533 0.9685831 0.4312962 0.5321232\n [6] 0.7114248 0.4895653 0.6590216 0.6166274 0.4340238\n[11] 0.8369171 0.8406428 0.8852080 0.9463194 0.5016591\n[16] 0.5121544 0.6940172 0.7864556 0.5434436 0.5224634\n[21] 0.4736141 1.0000000 0.0000000 0.5865595\n\n$Ankara$day30$SO2\n [1] 0.57783320 0.30139398 0.66526381 0.07288478 0.80867863\n [6] 0.14936534 0.01354720 0.37594033 0.60902389 0.40414186\n[11] 0.42737864 0.65211423 0.30157243 0.54659343 0.69359387\n[16] 0.97966072 0.68894020 1.00000000 0.68231973 0.56739480\n[21] 0.00000000 0.25983352 0.48789396 0.74756551\n\n\n\n$Istanbul\n$Istanbul$day1\n$Istanbul$day1$PM25\n [1] 0.5349496 0.8198668 0.2911057 0.5508651 0.7124203\n [6] 0.5228208 0.6781530 0.4204007 0.7641758 0.6143755\n[11] 0.6255614 0.0000000 0.4194400 0.1510314 0.1128498\n[16] 0.4785790 0.5881446 0.7343259 1.0000000 0.7872198\n[21] 0.9739503 0.4679123 0.5397763 0.9979955\n\n$Istanbul$day1$NO2\n [1] 0.4243721 0.0000000 0.2104101 0.6783678 0.2699269\n [6] 0.5082234 0.4276570 0.2987945 0.3355344 0.5229315\n[11] 0.4769618 0.7356787 0.3736360 0.1910642 0.4659387\n[16] 0.6020827 1.0000000 0.3070411 0.3417009 0.6467948\n[21] 0.7474439 0.2578264 0.5917945 0.2814305\n\n$Istanbul$day1$SO2\n [1] 0.3263735 0.7137513 0.5874717 0.6565733 0.4196240\n [6] 1.0000000 0.7239949 0.4699785 0.7331474 0.2647229\n[11] 0.5277972 0.9043197 0.5153151 0.7839026 0.5072324\n[16] 0.0000000 0.3463993 0.6158709 0.9148730 0.4164726\n[21] 0.6288792 0.3257282 0.3131123 0.3715388\n\n\n$Istanbul$day2\n$Istanbul$day2$PM25\n [1] 1.00000000 0.87608160 0.77589387 0.92670437 0.48164425\n [6] 0.82384589 0.66489936 0.30109967 0.36411748 0.61877842\n[11] 0.66374351 0.51143267 0.31630498 0.00000000 0.72721412\n[16] 0.51897228 0.76303119 0.15751658 0.24207143 0.57213479\n[21] 0.19597902 0.03119639 0.83078773 0.86468238\n\n$Istanbul$day2$NO2\n [1] 0.2580745 0.5167293 0.2225787 0.7175644 0.5994473\n [6] 0.3128503 0.3453543 0.2471136 0.7584995 0.8044470\n[11] 0.7380573 0.3219182 0.0000000 0.7907505 0.5491499\n[16] 0.5961321 0.9618156 0.3046408 1.0000000 0.4685636\n[21] 0.3661823 0.5393596 0.7426799 0.5388581\n\n$Istanbul$day2$SO2\n [1] 0.3934383 0.5417804 0.0000000 0.4873970 0.7185758\n [6] 0.5687134 0.7742713 0.7257705 0.7640410 0.7665334\n[11] 0.1925577 0.6102809 1.0000000 0.4941147 0.7178175\n[16] 0.6436543 0.7427959 0.5440800 0.4538908 0.6265323\n[21] 0.6590956 0.5648609 0.6168199 0.7078821\n\n\n$Istanbul$day3\n$Istanbul$day3$PM25\n [1] 0.29343786 0.74815759 1.00000000 0.82826802 0.36980735\n [6] 0.04500828 0.49052465 0.68658930 0.66234061 0.18578708\n[11] 0.21346107 0.50940464 0.62625819 0.68484682 0.67142742\n[16] 0.24791713 0.16612110 0.00000000 0.59750419 0.67420900\n[21] 0.55737346 0.22628340 0.84975043 0.38980868\n\n$Istanbul$day3$NO2\n [1] 1.0000000 0.6680261 0.8407979 0.6083180 0.5014344\n [6] 0.2451071 0.3678857 0.5061787 0.5951952 0.5099344\n[11] 0.4707908 0.5685351 0.3771183 0.3739908 0.1252700\n[16] 0.7477638 0.5316088 0.4963041 0.3185604 0.4519152\n[21] 0.2250328 0.2351695 0.0000000 0.7843857\n\n$Istanbul$day3$SO2\n [1] 0.30026004 0.00000000 0.55100961 0.42073407 0.44919360\n [6] 0.21527700 0.16765508 0.24613503 0.36760351 0.46309406\n[11] 0.65385929 0.14682858 0.02445387 0.29419429 1.00000000\n[16] 0.16626731 0.54663515 0.21109045 0.15420429 0.09818096\n[21] 0.21878663 0.66649926 0.34275526 0.38756989\n\n\n$Istanbul$day4\n$Istanbul$day4$PM25\n [1] 0.7494038 1.0000000 0.7365759 0.2888927 0.3688880\n [6] 0.2558979 0.0000000 0.8412679 0.4785945 0.6592129\n[11] 0.8190912 0.4749141 0.5515082 0.6501251 0.6248467\n[16] 0.4215671 0.7274701 0.6898340 0.5203145 0.3305022\n[21] 0.7076578 0.8690683 0.8595155 0.7562934\n\n$Istanbul$day4$NO2\n [1] 0.48400459 0.47121379 0.45626714 0.50295717 0.80033210\n [6] 0.68020538 0.11968231 0.11856085 0.60612430 0.65196164\n[11] 0.00000000 0.39557553 0.61949437 1.00000000 0.07816006\n[16] 0.27910783 0.32557250 0.65871557 0.69995527 0.52710213\n[21] 0.18442496 0.44489417 0.46348308 0.55843665\n\n$Istanbul$day4$SO2\n [1] 0.72020082 0.14173469 0.33115661 0.13453351 0.00000000\n [6] 0.47194201 0.04769266 1.00000000 0.33525642 0.32712917\n[11] 0.29523361 0.77573192 0.47898003 0.24883735 0.01862387\n[16] 0.05068627 0.11451283 0.61758651 0.26443540 0.12150343\n[21] 0.51121105 0.65034557 0.13726701 0.20005230\n\n\n$Istanbul$day5\n$Istanbul$day5$PM25\n [1] 0.5823857 0.4755720 0.6010200 1.0000000 0.4586278\n [6] 0.3914162 0.6251352 0.4619964 0.6685620 0.4087231\n[11] 0.6123553 0.0000000 0.4812915 0.3195681 0.1138514\n[16] 0.3510350 0.5905343 0.5052210 0.6886108 0.7640898\n[21] 0.7297892 0.3780581 0.0718697 0.3915282\n\n$Istanbul$day5$NO2\n [1] 0.74586523 0.40278420 0.00000000 0.56563396 0.50994839\n [6] 0.32861425 0.48112886 0.79893832 0.78028693 0.31381530\n[11] 0.43789692 0.04868078 0.24168358 0.96869500 0.83311591\n[16] 0.37414520 0.25106039 0.07192231 1.00000000 0.46552258\n[21] 0.27723824 0.72152834 0.14287981 0.62812652\n\n$Istanbul$day5$SO2\n [1] 0.8149104 0.3065125 0.8181161 0.5687795 0.1622069\n [6] 0.5480750 0.1542911 0.2068018 0.6096823 0.2247732\n[11] 0.3637075 0.6850081 0.0000000 0.8624614 1.0000000\n[16] 0.5604439 0.5011528 0.2183683 0.5224090 0.2166560\n[21] 0.4599642 0.1597994 0.6139991 0.5841196\n\n\n$Istanbul$day6\n$Istanbul$day6$PM25\n [1] 0.83029592 1.00000000 0.39652809 0.76674741 0.21727028\n [6] 0.43990809 0.76199002 0.37541932 0.62428515 0.33821546\n[11] 0.45991163 0.53556885 0.40436189 0.09821637 0.60074356\n[16] 0.65395984 0.57632100 0.43273067 0.75159878 0.79230972\n[21] 0.00000000 0.80310873 0.13639564 0.46583474\n\n$Istanbul$day6$NO2\n [1] 0.2538345 0.3793521 0.8894712 0.6844870 0.6738456\n [6] 0.0000000 0.5958804 0.7091913 0.7700140 0.2894476\n[11] 0.7900824 0.1788928 1.0000000 0.3351970 0.7448818\n[16] 0.6277364 0.2657748 0.8442427 0.5531872 0.7588685\n[21] 0.6016096 0.7719921 0.5501227 0.8366367\n\n$Istanbul$day6$SO2\n [1] 0.3894207 0.6470395 0.6034766 0.7397713 0.3106644\n [6] 0.5446338 0.3226384 0.7587465 0.3060819 1.0000000\n[11] 0.7241033 0.4885680 0.8459089 0.4678046 0.6575772\n[16] 0.6473049 0.6165021 0.3177761 0.1261795 0.0000000\n[21] 0.3589227 0.6925908 0.4225633 0.1400915\n\n\n$Istanbul$day7\n$Istanbul$day7$PM25\n [1] 1.0000000 0.6855130 0.9546239 0.7960079 0.4015304\n [6] 0.4446575 0.2222177 0.6938297 0.8847933 0.3346952\n[11] 0.2737829 0.7245774 0.2058285 0.9492170 0.6574315\n[16] 0.1629267 0.6104646 0.5564662 0.0000000 0.5246730\n[21] 0.4067453 0.3418711 0.5853393 0.7177042\n\n$Istanbul$day7$NO2\n [1] 1.0000000 0.0000000 0.7744251 0.3853997 0.8690959\n [6] 0.6831880 0.9353021 0.2637325 0.7173133 0.6715577\n[11] 0.8442152 0.5508269 0.8662714 0.5017866 0.5053933\n[16] 0.6096747 0.3585846 0.4991232 0.8584694 0.9827549\n[21] 0.8594445 0.5063962 0.6769071 0.6264450\n\n$Istanbul$day7$SO2\n [1] 0.00000000 0.55103057 0.15797030 0.07209423 0.72112410\n [6] 0.20025282 0.40515227 0.10367441 0.47782423 0.63640063\n[11] 0.64010656 0.06677673 0.91463316 1.00000000 0.59300087\n[16] 0.51471927 0.48559984 0.55108062 0.59427745 0.50721348\n[21] 0.69507675 0.33548663 0.86786814 0.44380270\n\n\n$Istanbul$day8\n$Istanbul$day8$PM25\n [1] 0.1249312 0.6102708 0.7705119 1.0000000 0.6571440\n [6] 0.0708938 0.6409134 0.2880273 0.3534162 0.3389023\n[11] 0.4052565 0.9727717 0.3957894 0.5108149 0.6934756\n[16] 0.9004534 0.4440966 0.3973442 0.4874992 0.2960851\n[21] 0.9091444 0.0000000 0.4848391 0.2171220\n\n$Istanbul$day8$NO2\n [1] 0.1441524 0.6172895 0.9770265 1.0000000 0.4763489\n [6] 0.4443735 0.4821992 0.7796816 0.0000000 0.6694880\n[11] 0.5138187 0.4331774 0.1323957 0.5614111 0.2174849\n[16] 0.6068123 0.3972024 0.6214983 0.7203189 0.4904177\n[21] 0.3668195 0.4646802 0.4514183 0.2546080\n\n$Istanbul$day8$SO2\n [1] 0.15547642 0.35522013 0.34589029 0.53310335 0.86044648\n [6] 0.53450795 0.92300489 0.20061240 0.88044513 0.62285920\n[11] 0.01564169 0.55780859 0.00000000 0.74321359 0.23741036\n[16] 0.34069378 0.18985991 0.13113487 1.00000000 0.75837563\n[21] 0.65068533 0.44605017 0.67147588 0.64609313\n\n\n$Istanbul$day9\n$Istanbul$day9$PM25\n [1] 0.9367622384 0.7572878093 0.5057007043 0.5036274808\n [5] 0.4433216751 0.4681733836 0.4984370015 0.8460962019\n [9] 0.0002129048 0.3876383425 0.5231622808 0.2491494954\n[13] 0.9404733000 0.4990886135 0.2887707103 0.3424367991\n[17] 0.7626127223 1.0000000000 0.5252136568 0.5803072329\n[21] 0.3288785070 0.8684301923 0.7269460089 0.0000000000\n\n$Istanbul$day9$NO2\n [1] 0.4024294 0.5121356 0.2788968 0.5017000 0.2721507\n [6] 0.6704914 0.6641769 0.7910215 0.6857415 1.0000000\n[11] 0.4715689 0.0000000 0.5814571 0.7480224 0.4675401\n[16] 0.9484345 0.8667495 0.7180403 0.5932294 0.4274418\n[21] 0.5273925 0.6998103 0.8328670 0.4955916\n\n$Istanbul$day9$SO2\n [1] 0.17987806 1.00000000 0.49903584 0.13499208 0.60460735\n [6] 0.38208636 0.57793691 0.37955484 0.35133926 0.38949060\n[11] 0.47195927 0.21012651 0.19853640 0.31899622 0.41014553\n[16] 0.28505405 0.44743741 0.08427432 0.00000000 0.85061164\n[21] 0.46814424 0.26466487 0.29463245 0.56727006\n\n\n$Istanbul$day10\n$Istanbul$day10$PM25\n [1] 0.4205435 0.5004242 0.4097446 0.3627681 0.5818211\n [6] 0.4903764 0.7206913 0.2389074 0.4354332 0.4208079\n[11] 0.2489381 0.6603586 0.4409726 0.1872673 0.3447550\n[16] 0.2428898 0.6685424 0.9670393 0.3285629 0.4439837\n[21] 0.5178161 1.0000000 0.0000000 0.3602741\n\n$Istanbul$day10$NO2\n [1] 0.023493929 0.288276666 0.275168971 0.151921302\n [5] 0.848101025 0.419882017 1.000000000 0.573714691\n [9] 0.006518912 0.145490942 0.424219103 0.193168584\n[13] 0.446280831 0.548994000 0.464427530 0.313531715\n[17] 0.175345704 0.000000000 0.442643814 0.600519352\n[21] 0.328450213 0.554708240 0.954911777 0.875162688\n\n$Istanbul$day10$SO2\n [1] 0.34606819 0.57666078 0.30017510 0.60834052 0.44270966\n [6] 0.51708222 0.26546193 0.72247587 0.43699435 0.35691257\n[11] 0.43866766 0.47254308 0.81799799 0.20973867 1.00000000\n[16] 0.28443464 0.49429250 0.00000000 0.31074599 0.61762959\n[21] 0.56747824 0.54652228 0.35229784 0.04750113\n\n\n$Istanbul$day11\n$Istanbul$day11$PM25\n [1] 0.2506888 0.4927094 0.7371616 0.7991193 0.4717343\n [6] 0.5151821 0.5119382 0.5752994 1.0000000 0.3500561\n[11] 0.4999057 0.5812942 0.1744817 0.2942686 0.6161866\n[16] 0.6813020 0.8860073 0.4249900 0.9761009 0.3104818\n[21] 0.1004061 0.0000000 0.8756604 0.6462197\n\n$Istanbul$day11$NO2\n [1] 0.5243985 0.4791866 1.0000000 0.8933062 0.2824478\n [6] 0.1751535 0.8612103 0.7158478 0.4189654 0.6703677\n[11] 0.0000000 0.3762556 0.6810493 0.5403315 0.2053875\n[16] 0.8418087 0.8827545 0.3000957 0.5091484 0.7629465\n[21] 0.7998245 0.4140432 0.3171341 0.6561339\n\n$Istanbul$day11$SO2\n [1] 0.00000000 0.24859162 0.69218888 0.05461626 0.18407233\n [6] 0.43113305 0.41536004 0.04168501 0.62419302 0.23022180\n[11] 0.45242320 0.44251154 0.67238310 0.47611999 0.45852538\n[16] 0.91895999 0.58881055 0.65357331 0.61531929 0.64021498\n[21] 0.83686197 0.47840463 0.55559838 1.00000000\n\n\n$Istanbul$day12\n$Istanbul$day12$PM25\n [1] 0.258795465 0.780990228 0.236703878 0.901178131\n [5] 0.219736808 0.177261225 0.707980534 0.687485828\n [9] 0.568992649 0.489124931 0.480141256 1.000000000\n[13] 0.000000000 0.127949644 0.043986632 0.686288326\n[17] 0.340347602 0.373506103 0.922159189 0.244747861\n[21] 0.990833554 0.006622233 0.788682905 0.503443327\n\n$Istanbul$day12$NO2\n [1] 0.32271642 0.36107465 0.62984291 0.69470222 0.09340517\n [6] 1.00000000 0.85010534 0.29841025 0.38035566 0.27383666\n[11] 0.37526778 0.52333284 0.41017714 0.42593621 0.65470227\n[16] 0.00000000 0.30443319 0.41747576 0.25258261 0.58041887\n[21] 0.31259989 0.31550222 0.60318267 0.54012133\n\n$Istanbul$day12$SO2\n [1] 0.36186522 0.32067020 0.06056688 0.23488421 1.00000000\n [6] 0.38807327 0.60882678 0.35392126 0.53833020 0.38451863\n[11] 0.71339435 0.27984043 0.00000000 0.60535794 0.34156911\n[16] 0.73648999 0.42563366 0.73424585 0.47806455 0.31573274\n[21] 0.56520726 0.29014675 0.78787689 0.43078873\n\n\n$Istanbul$day13\n$Istanbul$day13$PM25\n [1] 0.04387469 0.50410270 0.16131408 0.00000000 0.66110175\n [6] 0.83502253 0.41864004 0.25099373 0.46573459 0.18549617\n[11] 0.85131431 0.81334857 0.17226971 0.45922329 0.95301449\n[16] 0.59395408 0.64641973 0.76688434 0.82881014 1.00000000\n[21] 0.87186729 0.23659771 0.53652698 0.73292411\n\n$Istanbul$day13$NO2\n [1] 0.5450380 0.1433588 0.4190993 0.7630673 0.5968713\n [6] 0.2804683 0.6081021 0.5354083 0.6965703 0.9749603\n[11] 0.2720587 0.4682014 0.5392783 0.1516948 0.5601459\n[16] 0.4511054 1.0000000 0.0000000 0.8549781 0.7618009\n[21] 0.7088410 0.5946912 0.4282802 0.7807405\n\n$Istanbul$day13$SO2\n [1] 0.27837178 0.78309227 0.68980568 0.90491312 0.37072526\n [6] 0.37569381 0.65769197 0.65884434 1.00000000 0.71623438\n[11] 0.60747998 0.83030932 0.38763070 0.91025687 0.23468775\n[16] 0.66921084 0.01616172 0.63992792 0.06051257 0.48730417\n[21] 0.00000000 0.35697018 0.31336517 0.73838870\n\n\n$Istanbul$day14\n$Istanbul$day14$PM25\n [1] 0.33698379 0.28206662 0.86816358 1.00000000 0.83045659\n [6] 0.06924357 0.88440181 0.14661141 0.48723157 0.72472287\n[11] 0.44543074 0.46413010 0.54534720 0.63442768 0.62956619\n[16] 0.00000000 0.45669226 0.59289678 0.68239719 0.41495739\n[21] 0.30148728 0.10566046 0.29378433 0.47263183\n\n$Istanbul$day14$NO2\n [1] 0.43449928 0.98342242 0.88201966 0.00000000 0.85962846\n [6] 0.95976876 0.60136602 0.70617404 0.52508623 0.58705737\n[11] 0.26854523 0.90777471 0.17134896 0.45446790 0.31023170\n[16] 0.32929831 0.55350858 0.50142535 0.40559797 0.60488881\n[21] 0.01064045 0.76755718 1.00000000 0.14533696\n\n$Istanbul$day14$SO2\n [1] 0.00000000 1.00000000 0.45337820 0.40226454 0.33321278\n [6] 0.52282504 0.39788828 0.23790546 0.26902559 0.29316523\n[11] 0.29997309 0.18144966 0.68234169 0.41341080 0.17558755\n[16] 0.54987534 0.48375359 0.34992780 0.49764989 0.13901455\n[21] 0.33312148 0.11356236 0.06290371 0.29675527\n\n\n$Istanbul$day15\n$Istanbul$day15$PM25\n [1] 0.446286989 0.205478876 0.369862535 0.001111681\n [5] 0.309343847 0.669633582 0.152371069 0.143123022\n [9] 0.359882236 0.527960289 0.684211284 1.000000000\n[13] 0.587263471 0.558429745 0.860594368 0.341824842\n[17] 0.361332848 0.465276069 0.092522210 0.000000000\n[21] 0.811334843 0.280773248 0.306861521 0.187669325\n\n$Istanbul$day15$NO2\n [1] 0.5866711 0.6863754 0.5035558 0.5578197 0.7667183\n [6] 0.5521388 0.4293504 0.5410231 0.3666861 0.5772632\n[11] 0.3542864 0.8654111 0.0000000 0.6440362 0.4457013\n[16] 0.9977107 0.5022506 0.6619988 0.6408247 0.6097757\n[21] 0.6700904 1.0000000 0.7613917 0.5983464\n\n$Istanbul$day15$SO2\n [1] 0.9186398 0.5167882 0.5391388 0.7371224 0.3762676\n [6] 0.5641597 0.2312541 0.3641926 0.3358304 0.1096558\n[11] 1.0000000 0.1365672 0.2041884 0.7635516 0.3157673\n[16] 0.7115200 0.1204343 0.3183576 0.2390920 0.0000000\n[21] 0.2216556 0.1044843 0.6080901 0.2257599\n\n\n$Istanbul$day16\n$Istanbul$day16$PM25\n [1] 0.5856932 0.4334906 0.6465650 0.2733153 0.0000000\n [6] 0.9866746 0.7572983 0.7322671 0.1457269 0.7409287\n[11] 0.7087922 0.5867404 0.7711439 0.8315152 0.5776481\n[16] 1.0000000 0.8045080 0.8527230 0.5382312 0.5758179\n[21] 0.4141368 0.6858218 0.6565365 0.6212514\n\n$Istanbul$day16$NO2\n [1] 0.28971999 0.38793444 0.87320457 0.23533497 0.34982325\n [6] 0.13152704 0.16713924 0.37594087 0.35306329 0.30368131\n[11] 0.26933001 0.39567015 0.68691949 0.36039266 0.15784245\n[16] 0.20471561 0.00000000 0.06431319 0.27511366 0.22499166\n[21] 0.18721100 0.87410894 0.82199136 1.00000000\n\n$Istanbul$day16$SO2\n [1] 0.65562419 0.42621330 0.21043683 0.19636860 0.34410552\n [6] 0.77892946 0.62870746 0.68326969 0.41988373 0.08557794\n[11] 0.54551286 0.41315841 0.39130062 1.00000000 0.67842362\n[16] 0.40978378 0.00000000 0.39553703 0.70795123 0.55686869\n[21] 0.53223000 0.72133425 0.42431454 0.38106393\n\n\n$Istanbul$day17\n$Istanbul$day17$PM25\n [1] 0.5576706 0.7708847 0.5543527 0.7764471 0.3475328\n [6] 0.3382833 0.6399274 0.7764648 0.5245205 0.4879016\n[11] 0.0000000 0.6931915 0.4177059 0.6992859 0.9202992\n[16] 0.5054816 0.7627339 0.5795469 0.6919586 0.3631460\n[21] 0.7025750 0.8939299 1.0000000 0.3563339\n\n$Istanbul$day17$NO2\n [1] 0.73899411 0.26472225 0.73400222 0.41476526 0.38309153\n [6] 0.80656462 0.83574914 0.62307558 0.70729024 0.66832308\n[11] 0.62275550 0.53755220 0.91287794 0.81922138 0.85748037\n[16] 1.00000000 0.74612034 0.42635927 0.00000000 0.27382413\n[21] 0.09994155 0.36011101 0.25685934 0.40646913\n\n$Istanbul$day17$SO2\n [1] 0.1922259 0.3172968 0.6218441 0.5776264 0.3852617\n [6] 0.8265291 0.0000000 0.6614495 1.0000000 0.3840850\n[11] 0.6318093 0.3372329 0.5042462 0.7651085 0.2264478\n[16] 0.3383127 0.6768545 0.6405683 0.7623853 0.9012500\n[21] 0.7508602 0.1754917 0.5589951 0.3868133\n\n\n$Istanbul$day18\n$Istanbul$day18$PM25\n [1] 0.42975119 0.75424215 0.52887238 0.48635518 0.38959234\n [6] 0.57135302 0.01754979 0.28364534 1.00000000 0.64836326\n[11] 0.09376105 0.00000000 0.09462701 0.63572202 0.58405558\n[16] 0.23196611 0.30222573 0.77563508 0.32388052 0.41128042\n[21] 0.55571763 0.36772592 0.17346476 0.28667042\n\n$Istanbul$day18$NO2\n [1] 0.4329399 0.7606565 0.9430262 0.7130838 0.8332504\n [6] 0.5238080 0.6317902 0.6326773 0.3590304 0.6802406\n[11] 0.7627544 0.8059132 0.9395624 0.3501502 0.7920134\n[16] 0.8130301 0.6170529 0.7888020 0.3624354 0.7067700\n[21] 0.0000000 0.7274149 1.0000000 0.9874063\n\n$Istanbul$day18$SO2\n [1] 0.0000000 0.7508884 0.5429353 0.6192566 0.1042497\n [6] 0.7156353 0.5013329 0.7130143 0.5801902 0.3841134\n[11] 0.7034497 0.7650008 0.6379018 0.7584273 0.5160724\n[16] 0.9271169 0.5409959 0.4888919 0.8699528 0.8871789\n[21] 0.7851173 0.6769629 1.0000000 0.3875913\n\n\n$Istanbul$day19\n$Istanbul$day19$PM25\n [1] 0.75693189 0.90617463 0.47658651 0.61404991 0.62025650\n [6] 0.77137725 0.24017362 0.69428053 0.02013984 1.00000000\n[11] 0.31457726 0.38061529 0.52945746 0.13884452 0.39440949\n[16] 0.47836665 0.37446142 0.98690117 0.00000000 0.43517556\n[21] 0.76756358 0.24603480 0.42648881 0.96541660\n\n$Istanbul$day19$NO2\n [1] 0.01930089 0.29917162 0.19529741 0.67622355 0.28271988\n [6] 0.63367633 0.34068637 0.47046795 0.73586633 0.54664276\n[11] 0.00000000 0.36960590 0.69834324 1.00000000 0.21728784\n[16] 0.45044733 0.48913104 0.31785989 0.14682823 0.99438239\n[21] 0.89954524 0.14047337 0.01492647 0.43762253\n\n$Istanbul$day19$SO2\n [1] 0.71618029 0.57049629 0.89823806 0.53982273 0.30040401\n [6] 1.00000000 0.54307963 0.53006770 0.53549041 0.61863719\n[11] 0.00000000 0.78205665 0.79193925 0.76797529 0.49694264\n[16] 0.62991858 0.23023031 0.69777554 0.39119168 0.94711814\n[21] 0.36285588 0.06762369 0.64902759 0.17926217\n\n\n$Istanbul$day20\n$Istanbul$day20$PM25\n [1] 0.2567292 0.7126459 0.9938754 0.4318346 0.7567715\n [6] 0.1383938 0.9565386 0.4996454 0.2956813 0.6056379\n[11] 0.2879500 0.5142321 0.5277760 0.8087560 0.3518296\n[16] 0.4021763 0.5336258 0.7372182 1.0000000 0.9174948\n[21] 0.7537715 0.0000000 0.7503676 0.6993223\n\n$Istanbul$day20$NO2\n [1] 0.24587173 0.27681478 0.08952197 0.40545792 0.42948655\n [6] 0.00000000 0.04010621 0.44901534 0.16923154 0.33869621\n[11] 0.64306455 0.30919056 0.43797164 0.55178531 0.14646125\n[16] 0.69778387 0.62194135 0.70483763 0.30912305 0.06735825\n[21] 0.52742340 0.55242837 1.00000000 0.80882833\n\n$Istanbul$day20$SO2\n [1] 0.3061363 0.1625487 0.5938635 0.9574741 0.1158189\n [6] 0.2225058 0.8924106 0.9161236 0.4808702 0.0000000\n[11] 0.2855512 0.7386528 1.0000000 0.4251111 0.2620018\n[16] 0.5102109 0.4677069 0.1883683 0.5861515 0.7977487\n[21] 0.4327945 0.5951251 0.4961137 0.5516206\n\n\n$Istanbul$day21\n$Istanbul$day21$PM25\n [1] 0.5712456 0.8984110 0.6744891 0.5042089 0.7668914\n [6] 0.8426483 0.6034963 0.0000000 1.0000000 0.4467749\n[11] 0.5398338 0.9959360 0.1808218 0.3642792 0.4470484\n[16] 0.3164532 0.8764869 0.9138526 0.7368563 0.5189124\n[21] 0.5225574 0.4890891 0.4991409 0.7326725\n\n$Istanbul$day21$NO2\n [1] 0.87956052 0.53815327 0.73201519 0.05592438 0.67123627\n [6] 0.43270360 0.92687063 0.94869005 0.10324138 0.88282355\n[11] 0.51086983 0.61130108 0.87687030 0.82454505 0.44755595\n[16] 0.73228424 0.53552929 0.96519522 0.25947282 0.85718677\n[21] 1.00000000 0.00000000 0.81419148 0.56154916\n\n$Istanbul$day21$SO2\n [1] 0.6353359 0.4838056 0.8671865 0.9612945 0.8277526\n [6] 0.5490649 0.4224218 0.5355091 0.5008526 0.6731254\n[11] 0.2628544 0.8243460 0.1936417 0.0000000 0.6941301\n[16] 0.7568915 1.0000000 0.8807254 0.6789928 0.8669882\n[21] 0.2007346 0.1369373 0.1071018 0.6092399\n\n\n$Istanbul$day22\n$Istanbul$day22$PM25\n [1] 0.5669648 0.6289384 0.7750176 0.4828890 0.3671530\n [6] 0.2322640 0.4638779 0.3833058 0.3173209 0.2282797\n[11] 0.1450713 0.1508703 0.7712547 0.4630049 0.2907669\n[16] 0.0000000 0.4483911 0.2737558 0.3778564 0.3471741\n[21] 0.5959587 0.3822228 0.3545494 1.0000000\n\n$Istanbul$day22$NO2\n [1] 0.91751779 0.57343846 0.26385734 0.95056222 0.19144162\n [6] 0.50942324 0.83317958 0.37884662 0.39470005 0.68497864\n[11] 0.57683649 0.43710210 0.45143723 0.61689152 0.69447566\n[16] 0.99194873 0.37599956 1.00000000 0.00000000 0.29481179\n[21] 0.04037366 0.63793571 0.67798776 0.03565613\n\n$Istanbul$day22$SO2\n [1] 0.54739131 0.21893475 0.69970476 0.00000000 0.82636823\n [6] 0.51587784 0.17724241 0.50272423 0.44031199 0.40657110\n[11] 0.01965989 0.33117953 0.47184835 0.02447435 0.63430876\n[16] 1.00000000 0.79814785 0.25832414 0.30670709 0.37199807\n[21] 0.73797300 0.51754736 0.20828246 0.01466147\n\n\n$Istanbul$day23\n$Istanbul$day23$PM25\n [1] 0.74588857 0.29299279 0.72829402 0.60853734 0.79178487\n [6] 0.89698212 0.18583780 0.87668059 0.78219285 0.50104482\n[11] 0.58231717 0.72586079 0.77447700 0.10370582 1.00000000\n[16] 0.19018775 0.00000000 0.85745351 0.16089505 0.52457907\n[21] 0.20752284 0.08095427 0.46300575 0.77069488\n\n$Istanbul$day23$NO2\n [1] 0.8717035 0.5563549 0.7625734 0.7352830 0.7600176\n [6] 0.6209912 0.8865272 0.4114996 0.8919787 0.6560775\n[11] 0.6573309 1.0000000 0.6270675 0.4435329 0.3719036\n[16] 0.9879005 0.0000000 0.6305739 0.8274656 0.3153334\n[21] 0.7700493 0.9882978 0.1674378 0.4758242\n\n$Istanbul$day23$SO2\n [1] 1.00000000 0.15542293 0.04658025 0.08445203 0.23240816\n [6] 0.44914973 0.13828499 0.45467092 0.62947655 0.50165841\n[11] 0.64620568 0.10431335 0.34128857 0.61631488 0.40338528\n[16] 0.45850627 0.40195352 0.44810033 0.37555843 0.00000000\n[21] 0.44498412 0.22505320 0.88591086 0.19911594\n\n\n$Istanbul$day24\n$Istanbul$day24$PM25\n [1] 0.5385169 0.0000000 0.3330258 0.2900607 0.8120435\n [6] 0.4616855 0.5366938 0.5760526 0.3653982 0.5761585\n[11] 0.8817003 0.6562940 0.6809741 0.2885227 0.5453316\n[16] 0.5742915 0.3339828 0.5297171 1.0000000 0.2530482\n[21] 0.6400668 0.2278916 0.5891518 0.2359985\n\n$Istanbul$day24$NO2\n [1] 0.5728991 0.1534620 0.4443069 0.7423548 0.3894847\n [6] 0.4156774 0.7565423 0.8991774 1.0000000 0.3508643\n[11] 0.2015940 0.5866194 0.5379784 0.7296940 0.4735818\n[16] 0.4759751 0.7812665 0.4762394 0.5936328 0.5490177\n[21] 0.4296510 0.3190057 0.3635182 0.0000000\n\n$Istanbul$day24$SO2\n [1] 0.89218941 0.10371844 0.37931623 0.43978288 0.87217923\n [6] 0.55727066 0.80048090 0.46066356 1.00000000 0.67502333\n[11] 0.69156792 0.78218081 0.13469093 0.53850949 0.60023251\n[16] 0.33101611 0.54473659 0.34347027 0.60169313 0.05166233\n[21] 0.61943562 0.36681156 0.79914041 0.00000000\n\n\n$Istanbul$day25\n$Istanbul$day25$PM25\n [1] 0.67084604 0.57569511 0.99521609 0.08477447 0.45728285\n [6] 0.91262112 0.87686573 0.78420116 0.75972422 0.05279635\n[11] 0.96290175 0.73343023 0.00000000 0.59283752 1.00000000\n[16] 0.90970473 0.42746357 0.98332078 0.51210281 0.79345711\n[21] 0.99088485 0.79656970 0.41972732 0.95167542\n\n$Istanbul$day25$NO2\n [1] 0.9561668 0.2363432 0.4597720 0.8144614 0.2594351\n [6] 0.0000000 0.3663016 0.8332543 0.1069369 0.4399986\n[11] 0.8019804 0.5283025 0.6838323 1.0000000 0.7836877\n[16] 0.6910920 0.6611208 0.1677833 0.7652708 0.6764109\n[21] 0.6349897 0.5313751 0.1340952 0.5602064\n\n$Istanbul$day25$SO2\n [1] 0.7721791 0.3004858 0.0000000 0.9195169 0.3124723\n [6] 0.7432207 0.6127547 0.8739586 0.4444251 0.3791410\n[11] 0.8927897 1.0000000 0.5355484 0.4979802 0.6426472\n[16] 0.2851161 0.5808580 0.2049936 0.3798902 0.6559222\n[21] 0.2622685 0.6700672 0.5819580 0.8173571\n\n\n$Istanbul$day26\n$Istanbul$day26$PM25\n [1] 0.83661127 0.22243119 0.43888450 0.70060195 0.39595448\n [6] 0.20485588 0.12783063 0.66514997 0.93381856 0.11668783\n[11] 0.37612261 0.00000000 0.36696581 0.28252541 0.34865394\n[16] 1.00000000 0.03795464 0.44817764 0.76199532 0.21444387\n[21] 0.16776591 0.36217932 0.64276712 0.27447127\n\n$Istanbul$day26$NO2\n [1] 0.28358529 0.52666961 0.06362935 0.18388424 0.75192170\n [6] 0.61275754 0.02900120 0.64796739 0.00000000 0.41192386\n[11] 0.57743147 0.19430093 0.79206135 0.78031184 0.36139591\n[16] 0.75958427 0.55460705 0.65517273 0.65980475 0.22629936\n[21] 0.06179119 1.00000000 0.56233193 0.59431606\n\n$Istanbul$day26$SO2\n [1] 0.204236952 0.776020397 0.949835033 0.873219192\n [5] 0.000000000 0.241722960 0.521600719 0.668891070\n [9] 0.363828553 0.286461790 0.554054634 0.265785337\n[13] 1.000000000 0.048715325 0.622654896 0.006712303\n[17] 0.376015423 0.862515623 0.773369568 0.153367650\n[21] 0.134622893 0.511843040 0.263244606 0.597324488\n\n\n$Istanbul$day27\n$Istanbul$day27$PM25\n [1] 0.3837574 0.2479677 0.5038437 0.3316538 0.8327679\n [6] 0.5245235 0.5889210 0.8965115 1.0000000 0.5856445\n[11] 0.6694116 0.8810079 0.5592943 0.3708140 0.8127217\n[16] 0.2665061 0.5439431 0.5099185 0.4837685 0.0000000\n[21] 0.4698561 0.8717300 0.4954511 0.4628858\n\n$Istanbul$day27$NO2\n [1] 0.4085901 0.3502559 0.6357085 0.7606432 1.0000000\n [6] 0.1569214 0.7054333 0.5520226 0.6746533 0.3063575\n[11] 0.6076011 0.2722695 0.7793579 0.3302749 0.6126448\n[16] 0.0000000 0.6863092 0.9046452 0.8091290 0.8895303\n[21] 0.2156888 0.5475294 0.5753823 0.7962744\n\n$Istanbul$day27$SO2\n [1] 0.33600947 0.32850169 0.72642795 0.60223390 0.00000000\n [6] 0.29014916 0.16165009 1.00000000 0.26694209 0.61431180\n[11] 0.39185792 0.39451420 0.47624100 0.34132636 0.54766611\n[16] 0.48990141 0.01509057 0.25398155 0.26080452 0.26445272\n[21] 0.59680876 0.68600916 0.17653097 0.48601220\n\n\n$Istanbul$day28\n$Istanbul$day28$PM25\n [1] 0.2015050 0.4340002 0.7586523 0.5737041 0.3871853\n [6] 0.1682331 0.5270889 0.6653155 0.8587438 0.3130500\n[11] 0.8680492 0.2037546 0.4381623 0.8162978 0.3826069\n[16] 0.3495626 0.6274330 0.6588405 1.0000000 0.5568318\n[21] 0.0000000 0.3965248 0.4061510 0.2916060\n\n$Istanbul$day28$NO2\n [1] 0.35566558 1.00000000 0.49525969 0.21474741 0.40939215\n [6] 0.68697637 0.16910092 0.45692615 0.42660464 0.22426665\n[11] 0.27722982 0.45320489 0.25275992 0.16016189 0.08494111\n[16] 0.34651970 0.24425199 0.15063539 0.31271258 0.03200865\n[21] 0.02333243 0.66652127 0.00000000 0.35385789\n\n$Istanbul$day28$SO2\n [1] 0.24790697 0.51700046 0.74349101 0.23289803 0.81814377\n [6] 0.68095817 0.48563443 0.69064238 0.62848352 0.29486177\n[11] 0.09155309 0.63982203 0.23465445 0.58826602 0.00000000\n[16] 0.26226081 0.70036050 0.98237841 0.66285391 0.23840619\n[21] 0.44962368 1.00000000 0.79029460 0.88817361\n\n\n$Istanbul$day29\n$Istanbul$day29$PM25\n [1] 0.82221348 0.56606262 0.86882410 0.00734184 0.53387061\n [6] 0.26949019 0.49337083 0.95818172 0.61831821 0.14946542\n[11] 0.26507571 0.01639075 0.37276745 0.20325746 0.73736047\n[16] 0.20609900 0.70374743 0.70805586 0.22984191 1.00000000\n[21] 0.42105732 0.13987611 0.44069577 0.00000000\n\n$Istanbul$day29$NO2\n [1] 0.78656965 0.36390919 0.96206743 0.04160582 0.30450996\n [6] 0.51612273 0.41706987 0.97681588 0.59209525 0.70560312\n[11] 0.80198074 0.65040426 0.87131620 0.72881471 0.79947791\n[16] 0.20239662 0.30072073 0.00000000 0.53937840 1.00000000\n[21] 0.34115602 0.69473942 0.72915366 0.67381722\n\n$Istanbul$day29$SO2\n [1] 0.5636743 0.4716848 0.4665543 0.6467807 1.0000000\n [6] 0.4233753 0.6082165 0.6693192 0.8599930 0.5782458\n[11] 0.8176524 0.2296492 0.8398790 0.6685211 0.3401417\n[16] 0.0000000 0.5413288 0.8262319 0.7298667 0.5416512\n[21] 0.6557647 0.6849453 0.4346968 0.6570016\n\n\n$Istanbul$day30\n$Istanbul$day30$PM25\n [1] 0.5741258 0.4143029 0.5905707 0.6120752 0.6533684\n [6] 0.6887210 0.6311656 0.6103219 0.5343761 0.6385242\n[11] 0.3097293 0.6778550 0.4502678 1.0000000 0.4385114\n[16] 0.0000000 0.8152317 0.4380685 0.6661196 0.5958426\n[21] 0.7624538 0.3797710 0.3250750 0.7564553\n\n$Istanbul$day30$NO2\n [1] 0.19340298 0.05204442 0.62022089 0.41296661 0.98895883\n [6] 0.51346096 0.34222069 0.27485254 0.84306086 0.13039297\n[11] 0.58064738 0.56705979 0.28821808 0.80646546 0.24524237\n[16] 0.42422031 0.52428019 1.00000000 0.58020255 0.85459793\n[21] 0.24993514 0.00000000 0.64759842 0.02875001\n\n$Istanbul$day30$SO2\n [1] 0.176851996 0.703827233 0.523972052 0.767574624\n [5] 0.925737699 0.785309446 0.642186917 0.687974217\n [9] 0.578101090 1.000000000 0.553158624 0.756814980\n[13] 0.285349555 0.549611113 0.000000000 0.576455916\n[17] 0.137438712 0.503168666 0.474231288 0.801303532\n[21] 0.365728199 0.359806214 0.006641524 0.706420716\n\n\n\n$Izmir\n$Izmir$day1\n$Izmir$day1$PM25\n [1] 0.8976223 0.5538724 1.0000000 0.5058483 0.3509179\n [6] 0.6728934 0.7924155 0.2224908 0.1853344 0.6251186\n[11] 0.7385948 0.0000000 0.1668876 0.6934503 0.8453474\n[16] 0.5133836 0.9268403 0.4525032 0.5693980 0.9658811\n[21] 0.5916581 0.6197465 0.3777045 0.6305022\n\n$Izmir$day1$NO2\n [1] 0.29442728 0.02800903 0.21918958 0.38797479 0.48075299\n [6] 0.68933610 0.45190169 0.41363066 0.69812254 1.00000000\n[11] 0.42330998 0.71469384 0.55514309 0.42547601 0.00000000\n[16] 0.21986743 0.31461244 0.18696698 0.17519497 0.34778135\n[21] 0.66254919 0.23079291 0.47026930 0.39619821\n\n$Izmir$day1$SO2\n [1] 0.48813874 0.33229681 0.28963284 0.20372116 0.50854123\n [6] 0.55963776 0.32837437 1.00000000 0.32374128 0.92814465\n[11] 0.29671256 0.00000000 0.03013749 0.14439620 0.62965854\n[16] 0.67610475 0.40646769 0.38806532 0.21347526 0.18462227\n[21] 0.17610857 0.14458617 0.21286253 0.19577063\n\n\n$Izmir$day2\n$Izmir$day2$PM25\n [1] 0.5050643 0.5461664 0.6873737 0.0000000 0.4993951\n [6] 0.3613728 0.3702076 0.1368906 0.4098222 0.2837530\n[11] 0.4757531 0.2266157 1.0000000 0.2827196 0.3675250\n[16] 0.2069441 0.3602354 0.7774685 0.3497650 0.5189187\n[21] 0.2559696 0.6763777 0.4948540 0.2938256\n\n$Izmir$day2$NO2\n [1] 0.50730853 0.28247605 0.60865918 0.12858214 0.59208997\n [6] 1.00000000 0.88329859 0.53446225 0.54490951 0.57689742\n[11] 0.75058431 0.56394006 0.64412729 0.65568078 0.50634513\n[16] 0.68577896 0.44444472 0.79170689 0.26740193 0.49395339\n[21] 0.43520261 0.03215264 0.86001211 0.00000000\n\n$Izmir$day2$SO2\n [1] 0.87036708 0.32580026 0.34561885 0.76844628 0.55218077\n [6] 0.14759875 0.91586042 0.00000000 0.41205113 0.22212844\n[11] 0.44062821 0.59128110 0.49441202 0.43813052 0.53335608\n[16] 0.63268906 0.37460095 0.09490732 0.35852127 0.13402426\n[21] 0.71669909 1.00000000 0.30813542 0.36779251\n\n\n$Izmir$day3\n$Izmir$day3$PM25\n [1] 0.4161113 0.9389826 0.7010887 0.8448858 0.9336655\n [6] 0.7691184 0.8319655 0.3259146 0.6718226 0.4976347\n[11] 0.2812096 0.3238975 0.9858732 0.2825552 0.5641829\n[16] 1.0000000 0.7947054 0.8962324 0.7953715 0.6444563\n[21] 0.0000000 0.4999176 0.2581196 0.5724298\n\n$Izmir$day3$NO2\n [1] 1.0000000 0.5429397 0.3384018 0.7219741 0.6271880\n [6] 0.4907955 0.4556595 0.4752565 0.4929259 0.6577617\n[11] 0.5404184 0.3602947 0.7090151 0.3433502 0.8223017\n[16] 0.2761291 0.6884064 0.8100291 0.8015330 0.4832066\n[21] 0.6750981 0.0000000 0.6159428 0.4838922\n\n$Izmir$day3$SO2\n [1] 0.5194159 0.4207421 0.6590624 0.3645980 0.5463246\n [6] 0.3775976 0.5306560 0.1514798 0.5207712 0.3206046\n[11] 0.4782217 0.2230033 0.5077246 1.0000000 0.7084377\n[16] 0.5958838 0.2745045 0.4641651 0.3670720 0.0000000\n[21] 0.3506293 0.3352837 0.3808781 0.2919877\n\n\n$Izmir$day4\n$Izmir$day4$PM25\n [1] 0.6507646 1.0000000 0.7896668 0.6530683 0.4862416\n [6] 0.4919384 0.7901811 0.8244020 0.3078634 0.7329142\n[11] 0.1448835 0.1422510 0.9110068 0.4812434 0.4803729\n[16] 0.7409699 0.4168425 0.2376394 0.5092037 0.0000000\n[21] 0.3408035 0.4278472 0.0733540 0.5219978\n\n$Izmir$day4$NO2\n [1] 0.38468361 0.86630567 0.50247824 0.29125261 0.63815593\n [6] 0.56189161 0.58628436 0.63195757 0.47301493 0.49059975\n[11] 0.74476024 1.00000000 0.07357636 0.54038650 0.83125730\n[16] 0.26824826 0.88005843 0.47687289 0.76034176 0.96010727\n[21] 0.81010614 0.89244619 0.00000000 0.24369504\n\n$Izmir$day4$SO2\n [1] 0.7541177 0.2970455 0.4069778 1.0000000 0.6116976\n [6] 0.5898965 0.5007934 0.0865838 0.0000000 0.5093144\n[11] 0.6846715 0.1720258 0.0222966 0.9667014 0.7313082\n[16] 0.7236803 0.8569204 0.7459325 0.2527175 0.9589355\n[21] 0.1847631 0.4294252 0.6781953 0.6620849\n\n\n$Izmir$day5\n$Izmir$day5$PM25\n [1] 0.49261111 0.56801001 0.12540052 0.00000000 0.03141699\n [6] 0.48871267 0.21645933 0.44630362 0.64843092 0.16160648\n[11] 0.58063707 0.16865181 0.49982361 0.34686662 0.11470000\n[16] 0.58671383 0.52759143 0.10993159 0.34781868 1.00000000\n[21] 0.14057433 0.29416407 0.70615312 0.04560015\n\n$Izmir$day5$NO2\n [1] 0.8471708 0.3024812 0.3285511 0.4148515 0.6138086\n [6] 1.0000000 0.5081201 0.5324800 0.1762639 0.4469846\n[11] 0.0000000 0.3755830 0.6829286 0.3863426 0.4114399\n[16] 0.4287199 0.3996288 0.4396227 0.1516532 0.3358002\n[21] 0.3606930 0.5235720 0.4588043 0.2861657\n\n$Izmir$day5$SO2\n [1] 0.78695030 0.91717362 0.05286056 0.55759282 0.23579116\n [6] 0.28437930 0.63893766 0.78447944 0.62524294 0.30966171\n[11] 0.88376227 0.85002362 0.15289281 0.60213884 0.09416298\n[16] 1.00000000 0.58727069 0.86217976 0.62799759 0.45678580\n[21] 0.75296922 0.11359690 0.00000000 0.27644491\n\n\n$Izmir$day6\n$Izmir$day6$PM25\n [1] 0.56226782 0.36222381 0.34703363 0.75638338 0.33608374\n [6] 0.77221586 0.25611906 0.40865461 0.24035391 0.35852858\n[11] 0.14129755 0.61642632 0.83360707 0.56809830 0.99013016\n[16] 0.00000000 0.26243484 0.63936263 0.67147775 0.58098690\n[21] 1.00000000 0.97923807 0.05339844 0.36112622\n\n$Izmir$day6$NO2\n [1] 0.00000000 0.11066975 0.46168446 0.48999313 0.17936773\n [6] 0.47632410 0.19380764 0.46200211 0.42460481 0.31560955\n[11] 0.13006746 0.26585050 0.52834268 0.25793109 0.30422169\n[16] 0.09997032 0.27441578 0.38673182 0.19345817 0.28852258\n[21] 0.09148100 0.59915281 1.00000000 0.27685405\n\n$Izmir$day6$SO2\n [1] 0.6602804 0.8827824 0.4904843 0.4895424 0.6963117\n [6] 0.3771882 0.5326400 0.4568245 0.3740977 0.6511093\n[11] 0.5394874 1.0000000 0.0000000 0.6959141 0.4033274\n[16] 0.5100781 0.3499654 0.6825713 0.8375858 0.6647583\n[21] 0.3852657 0.8892681 0.5345173 0.6028390\n\n\n$Izmir$day7\n$Izmir$day7$PM25\n [1] 0.4836803 0.4300685 0.5255932 0.1678220 0.8707162\n [6] 0.7075646 0.5249016 0.8038293 0.1061524 0.8488024\n[11] 0.5677665 0.6615020 0.3528476 0.2477298 0.3237209\n[16] 0.8330705 0.8506202 1.0000000 0.4795736 0.2561748\n[21] 0.9734757 0.0000000 0.4483880 0.6937009\n\n$Izmir$day7$NO2\n [1] 0.4032537 0.3179631 0.7573285 1.0000000 0.4992079\n [6] 0.5052216 0.4505677 0.9707721 0.5006661 0.4728995\n[11] 0.4800634 0.5264008 0.5242967 0.7824694 0.7171377\n[16] 0.7542331 0.5173325 0.8077829 0.0000000 0.8942263\n[21] 0.6952942 0.5655934 0.7544002 0.3902102\n\n$Izmir$day7$SO2\n [1] 0.29880615 0.53721183 0.00000000 0.48919648 0.49045473\n [6] 0.41249634 0.08658073 0.87708221 0.02480270 0.02745502\n[11] 0.31489724 1.00000000 0.53647636 0.58554147 0.43272118\n[16] 0.58916654 0.70560551 0.72947550 0.94259951 0.25210014\n[21] 0.45131943 0.63502054 0.76726846 0.39511231\n\n\n$Izmir$day8\n$Izmir$day8$PM25\n [1] 0.8715273 0.4589964 0.5301957 0.9958376 0.0000000\n [6] 0.7238742 0.9661837 0.5290603 0.8626115 0.4046298\n[11] 0.7065576 0.6510266 0.6378272 0.2087952 0.5917328\n[16] 0.3676651 0.5239587 1.0000000 0.4527563 0.6364040\n[21] 0.6831026 0.5824869 0.9249558 0.6330608\n\n$Izmir$day8$NO2\n [1] 0.5729911 0.3203168 0.4431322 0.3791295 0.6502018\n [6] 0.8139285 0.4241855 0.0000000 0.3311397 0.3096810\n[11] 0.8209939 0.5701131 0.9138225 0.6324635 0.1614191\n[16] 0.6551897 0.3547489 0.5356900 0.5109692 0.5007178\n[21] 0.4554350 1.0000000 0.9005545 0.3205578\n\n$Izmir$day8$SO2\n [1] 0.61656957 0.87206291 0.85896511 0.32316091 0.94137099\n [6] 0.37432671 0.59725032 0.60854436 0.04837891 0.52753628\n[11] 0.00000000 0.03594935 0.64924365 0.65480253 0.82458656\n[16] 0.66507467 0.38259384 0.34854598 0.77905447 0.95242943\n[21] 0.77750953 0.62146245 0.54478316 1.00000000\n\n\n$Izmir$day9\n$Izmir$day9$PM25\n [1] 0.0000000 0.8280545 0.5522568 0.3242704 0.7909251\n [6] 0.3591603 0.6738538 0.6361958 0.6256604 0.1519875\n[11] 0.6307030 0.4749112 0.4248642 0.3108395 0.3215146\n[16] 0.3911635 0.8884326 0.7573007 0.6574159 1.0000000\n[21] 0.9751902 0.8066798 0.3108820 0.9326536\n\n$Izmir$day9$NO2\n [1] 0.40001575 0.39002101 0.50839879 0.46535724 0.32809509\n [6] 0.61867075 0.33101319 0.31061368 0.38715602 0.26257156\n[11] 0.48772678 0.42586821 0.37689937 0.56417239 0.00000000\n[16] 0.51207226 0.67201067 0.66688136 1.00000000 0.29211552\n[21] 0.20823524 0.53022935 0.03440529 0.74829210\n\n$Izmir$day9$SO2\n [1] 0.32888558 0.67680650 0.49499571 0.01686482 0.63483992\n [6] 0.31579667 0.79009500 0.00000000 0.54342570 0.32741409\n[11] 0.83807148 0.40365626 0.79314867 0.46443749 0.60450725\n[16] 0.91656758 0.41435042 1.00000000 0.80504949 0.87494066\n[21] 0.04802932 0.53464072 0.23064383 0.75191658\n\n\n$Izmir$day10\n$Izmir$day10$PM25\n [1] 0.8416297 0.4863994 0.5068142 0.2925914 0.7582729\n [6] 0.8877139 0.2774674 0.2557359 0.8264508 0.8659057\n[11] 0.6773210 0.6523611 0.4856807 0.6710440 0.5183251\n[16] 1.0000000 0.5188661 0.0000000 0.7021068 0.3629380\n[21] 0.7644158 0.3071619 0.5556487 0.6809597\n\n$Izmir$day10$NO2\n [1] 0.4899116 0.0000000 0.1454076 0.3070297 1.0000000\n [6] 0.5096886 0.9023169 0.5954065 0.4067783 0.8608744\n[11] 0.2240006 0.9598337 0.8016816 0.6389843 0.7060569\n[16] 0.6021610 0.4199755 0.4489599 0.3760729 0.8919767\n[21] 0.7130056 0.5147018 0.2262665 0.6347071\n\n$Izmir$day10$SO2\n [1] 0.115811559 0.160796015 1.000000000 0.002742483\n [5] 0.151684225 0.239422347 0.235081863 0.081267466\n [9] 0.353550170 0.106667554 0.797827457 0.443915756\n[13] 0.657211118 0.000000000 0.403857263 0.566458304\n[17] 0.436540827 0.413163806 0.107759799 0.225511772\n[21] 0.290494878 0.175092695 0.629820069 0.918944319\n\n\n$Izmir$day11\n$Izmir$day11$PM25\n [1] 0.87143061 0.67412006 0.55446364 0.70798739 0.40624820\n [6] 0.63920075 0.61743168 0.06210139 1.00000000 0.28619392\n[11] 0.00000000 0.58054763 0.60437392 0.57885323 0.61170443\n[16] 0.31861705 0.71163390 0.88591536 0.39516711 0.64825702\n[21] 0.52072298 0.56718262 0.79636803 0.64204233\n\n$Izmir$day11$NO2\n [1] 1.0000000 0.1656888 0.8342169 0.1202299 0.2028946\n [6] 0.1675949 0.3942239 0.4600482 0.3416252 0.5089805\n[11] 0.0000000 0.2001102 0.5284405 0.6706569 0.4128102\n[16] 0.5495382 0.5976894 0.5126594 0.2056969 0.2275755\n[21] 0.5173336 0.1203301 0.2394999 0.2543047\n\n$Izmir$day11$SO2\n [1] 0.0000000 0.5681953 0.6379458 0.4512752 1.0000000\n [6] 0.4173553 0.6405464 0.6268810 0.7014419 0.5928999\n[11] 0.4127712 0.6359778 0.5443356 0.5413777 0.6821898\n[16] 0.6979084 0.4668275 0.3542691 0.8622151 0.4850286\n[21] 0.3580562 0.1894688 0.5492063 0.5838604\n\n\n$Izmir$day12\n$Izmir$day12$PM25\n [1] 0.2574491 0.1946503 0.6522898 0.3527523 1.0000000\n [6] 0.2666623 0.1347639 0.5764287 0.7370385 0.6441329\n[11] 0.5611960 0.7104010 0.3678364 0.6650689 0.3483365\n[16] 0.3570836 0.6291528 0.7201549 0.3377554 0.1341445\n[21] 0.2908050 0.0000000 0.6358124 0.7719057\n\n$Izmir$day12$NO2\n [1] 0.9646329 0.2064945 0.3251892 0.4275323 0.5248326\n [6] 0.2335908 0.7193109 0.3512926 0.7350093 0.0000000\n[11] 0.4124278 0.5552496 0.3196639 0.3234605 0.2787458\n[16] 0.4871142 0.8129210 0.1700670 0.4302046 0.3223696\n[21] 0.8553464 1.0000000 0.5988146 0.4766811\n\n$Izmir$day12$SO2\n [1] 0.8419012 0.2681445 0.3952073 0.7427039 0.4462259\n [6] 0.2638134 0.4711091 0.2725331 1.0000000 0.2927511\n[11] 0.7083431 0.4134009 0.8306328 0.7051922 0.2094017\n[16] 0.5015792 0.3672719 0.5708637 0.3984905 0.5606784\n[21] 0.3763238 0.7130138 0.5113443 0.0000000\n\n\n$Izmir$day13\n$Izmir$day13$PM25\n [1] 0.65839322 0.57981735 0.94121832 0.37711679 0.15493743\n [6] 0.77986462 0.89782466 0.77619242 1.00000000 0.88787465\n[11] 0.43217112 0.89498014 0.51711405 0.93839566 0.91048895\n[16] 0.65116611 0.92915597 0.59692002 0.91499650 0.08991469\n[21] 0.40205674 0.70024797 0.53654255 0.00000000\n\n$Izmir$day13$NO2\n [1] 0.3213432 0.9079075 0.2318809 0.5613558 0.4030899\n [6] 0.5257618 0.4788976 0.4888247 0.4920354 0.0000000\n[11] 0.5215093 0.5521147 0.6201271 0.8488198 0.5301791\n[16] 0.5862233 0.1794612 0.5452228 0.1488550 1.0000000\n[21] 0.4358708 0.6057154 0.6270722 0.2082395\n\n$Izmir$day13$SO2\n [1] 0.51611896 0.10308622 0.51387239 0.22489320 0.20849499\n [6] 0.50198944 0.48917317 0.32411521 0.19336832 0.44292260\n[11] 0.37780448 0.64825987 0.22133126 0.35787048 1.00000000\n[16] 0.04648289 0.47598217 0.50103566 0.27047130 0.20051785\n[21] 0.00000000 0.01062440 0.32006101 0.72693136\n\n\n$Izmir$day14\n$Izmir$day14$PM25\n [1] 0.46551895 0.93922522 0.25726006 0.63217043 0.48796296\n [6] 0.56360660 0.51368098 0.69539160 0.44601221 0.75596163\n[11] 0.60409826 0.44543898 0.41265043 0.04313038 0.24253962\n[16] 0.36486821 0.74552619 0.69970682 0.19247879 0.29723698\n[21] 1.00000000 0.00000000 0.50541040 0.53662139\n\n$Izmir$day14$NO2\n [1] 0.26615939 0.06585423 0.29104511 1.00000000 0.35631562\n [6] 0.33024102 0.42282437 0.11270501 0.55436100 0.54704602\n[11] 0.30148199 0.39521344 0.26539219 0.54025920 0.00000000\n[16] 0.33044114 0.52496925 0.76969908 0.17258453 0.12425098\n[21] 0.35667349 0.36833400 0.55593571 0.35525259\n\n$Izmir$day14$SO2\n [1] 0.28527025 1.00000000 0.35629927 0.70729763 0.66771371\n [6] 0.32422009 0.93400735 0.11651096 0.17976445 0.79032953\n[11] 0.00000000 0.63665865 0.50905292 0.66627987 0.67845212\n[16] 0.25871903 0.25324493 0.68798387 0.70947498 0.12873088\n[21] 0.09443835 0.14004722 0.44749095 0.44566891\n\n\n$Izmir$day15\n$Izmir$day15$PM25\n [1] 0.9119964 0.6160835 0.5022633 0.4399391 0.4387627\n [6] 0.4247417 0.3463376 0.5561055 0.0000000 0.3338900\n[11] 0.6911332 0.5518789 0.6189025 0.4297310 0.7602343\n[16] 0.4780433 0.6243122 0.5294750 0.6064153 0.4542365\n[21] 0.7328656 0.4416429 1.0000000 0.5004787\n\n$Izmir$day15$NO2\n [1] 0.6306910 0.4156208 0.8055962 0.6487760 0.7774405\n [6] 0.7998733 0.3727537 0.8323514 0.2514244 0.6385404\n[11] 0.8573539 0.1356925 0.4671337 0.4782114 0.0000000\n[16] 0.5359643 1.0000000 0.1887404 0.2774874 0.4810604\n[21] 0.5772053 0.6245810 0.6488093 0.5141660\n\n$Izmir$day15$SO2\n [1] 1.00000000 0.29420735 0.07098490 0.01329482 0.35660723\n [6] 0.27106109 0.67068705 0.35969715 0.42668320 0.00000000\n[11] 0.34643375 0.33840002 0.05396645 0.17720089 0.18719878\n[16] 0.61476954 0.54708624 0.58138426 0.76026870 0.32595105\n[21] 0.70425336 0.33994703 0.69749498 0.09168236\n\n\n$Izmir$day16\n$Izmir$day16$PM25\n [1] 0.3516945 0.6983779 0.8683458 0.4808369 0.4140381\n [6] 0.6327361 0.4621583 0.4928307 0.5473334 0.7386038\n[11] 0.2463012 0.3889182 0.6268545 0.0000000 0.7856478\n[16] 0.3415525 0.2511448 0.5279990 1.0000000 0.3361426\n[21] 0.1482893 0.4592990 0.7570451 0.4264152\n\n$Izmir$day16$NO2\n [1] 0.57516194 0.71360255 0.00000000 0.57524605 0.29751972\n [6] 0.41125074 0.98418275 0.48878039 0.62762800 0.18003337\n[11] 0.53300926 0.39534618 0.36840721 0.56477330 0.05209272\n[16] 0.77175553 0.99353665 0.31638167 0.55504220 0.93666245\n[21] 0.20678276 0.43778143 1.00000000 0.19604275\n\n$Izmir$day16$SO2\n [1] 0.67618537 0.56805429 0.38035737 0.54300637 0.38729813\n [6] 0.63241626 0.34750375 0.06761021 0.64426480 0.71586109\n[11] 0.48684859 0.27558718 0.35355655 0.16631644 0.15056903\n[16] 0.71587593 0.00000000 0.58716712 0.37563582 0.16441593\n[21] 0.40966223 0.41941157 0.73155975 1.00000000\n\n\n$Izmir$day17\n$Izmir$day17$PM25\n [1] 1.0000000 0.9488029 0.9459010 0.7663350 0.4048644\n [6] 0.5683692 0.1236640 0.3203755 0.2954974 0.2387553\n[11] 0.8927929 0.6543106 0.5927592 0.5206785 0.7812825\n[16] 0.7548114 0.2871803 0.0000000 0.2156800 0.3943189\n[21] 0.5227909 0.9165076 0.6895160 0.7027584\n\n$Izmir$day17$NO2\n [1] 0.60262344 0.35902918 0.11472211 0.16042720 0.04141697\n [6] 0.05812412 0.00000000 0.61523098 0.07833862 0.55306523\n[11] 1.00000000 0.34152740 0.34515716 0.60993958 0.38903969\n[16] 0.19504390 0.02528589 0.41695348 0.28220898 0.49437713\n[21] 0.46580725 0.72884715 0.54818856 0.68700548\n\n$Izmir$day17$SO2\n [1] 0.47360527 0.69303454 0.38039624 0.40794173 0.47507741\n [6] 0.12665060 0.09862199 0.36765044 0.04097125 0.48125284\n[11] 0.68785873 0.19363915 0.46840498 0.00000000 0.72801324\n[16] 0.34809255 0.90315894 0.46541172 1.00000000 0.55158956\n[21] 0.39734789 0.75071034 0.60894672 0.28977009\n\n\n$Izmir$day18\n$Izmir$day18$PM25\n [1] 0.54286484 0.52692076 0.46929840 0.30636881 0.37477620\n [6] 0.58231671 0.63722916 0.45253896 0.20575569 0.55438299\n[11] 0.41947911 0.64006255 0.02826841 0.21976494 0.50498094\n[16] 0.08377648 1.00000000 0.19572095 0.48589402 0.00000000\n[21] 0.87856146 0.54812890 0.27119899 0.44432759\n\n$Izmir$day18$NO2\n [1] 0.4147317 0.1348453 0.3096030 0.3589908 0.9284229\n [6] 0.7411417 0.5090716 0.5407311 0.9092604 0.3332527\n[11] 0.7780895 0.3526256 0.8106145 0.9604888 0.4904893\n[16] 0.7385399 0.0000000 0.7016504 0.6990301 0.7298861\n[21] 0.9492247 0.3473004 1.0000000 0.3453268\n\n$Izmir$day18$SO2\n [1] 0.1558616 1.0000000 0.6946248 0.6829847 0.6539174\n [6] 0.4693199 0.7368748 0.8307835 0.1719659 0.2639786\n[11] 0.3563796 0.6307560 0.0000000 0.4805906 0.1963257\n[16] 0.4393247 0.1620097 0.7724291 0.4545238 0.4723981\n[21] 0.8431191 0.3251232 0.1752908 0.3790676\n\n\n$Izmir$day19\n$Izmir$day19$PM25\n [1] 0.26978910 0.60996094 0.38405484 0.01257040 0.42875251\n [6] 0.69345081 0.03555412 0.83060380 0.73108841 1.00000000\n[11] 0.37995918 0.63446355 0.19502136 0.40412362 0.13374792\n[16] 0.85587027 0.00000000 0.69960298 0.25930199 0.13575934\n[21] 0.98658310 0.52741778 0.60418009 0.55710877\n\n$Izmir$day19$NO2\n [1] 0.6974327 0.8886107 0.5601408 0.8295590 0.0000000\n [6] 0.6922105 0.6440248 0.5877737 0.5752690 0.4393318\n[11] 0.4008678 0.8004376 0.5023268 0.8203922 0.4557651\n[16] 0.3101061 0.8820184 0.5228238 0.8287150 0.2593040\n[21] 0.6289298 0.4723267 1.0000000 0.8497334\n\n$Izmir$day19$SO2\n [1] 0.6857453 0.4942903 0.7616703 0.7147027 0.3256837\n [6] 0.7983524 0.7389771 0.5515800 1.0000000 0.7561713\n[11] 0.4930310 0.7522770 0.6586583 0.5538449 0.0000000\n[16] 0.5078023 0.5895877 0.7150073 0.6484924 0.6259084\n[21] 0.8567004 0.5757414 0.3958408 0.4948972\n\n\n$Izmir$day20\n$Izmir$day20$PM25\n [1] 0.5173917 0.3971797 0.0000000 0.7574754 0.8178480\n [6] 0.3474611 0.7084461 0.4769317 0.4831777 0.7601422\n[11] 0.7028702 0.3944222 0.3487739 0.7414196 0.2665084\n[16] 0.3572742 1.0000000 0.6234884 0.4374836 0.2114480\n[21] 0.7949947 0.4036118 0.6039601 0.9405777\n\n$Izmir$day20$NO2\n [1] 0.46650043 0.84452222 0.18643562 0.00000000 0.63176397\n [6] 0.89265028 0.37375817 0.45573453 0.81277337 0.39544126\n[11] 0.19425606 0.28325755 0.48056200 0.06471037 0.77730148\n[16] 0.70634403 0.78754122 1.00000000 0.83131861 0.97051780\n[21] 0.42698403 0.88360972 0.12476976 0.71828230\n\n$Izmir$day20$SO2\n [1] 0.9016906 1.0000000 0.5652849 0.6818237 0.2282416\n [6] 0.1162344 0.4906456 0.5657635 0.4610873 0.2962198\n[11] 0.1929035 0.7253165 0.7412476 0.4545198 0.9073888\n[16] 0.4974535 0.7341450 0.3284546 0.6427576 0.6561418\n[21] 0.5649707 0.7621585 0.4608532 0.0000000\n\n\n$Izmir$day21\n$Izmir$day21$PM25\n [1] 0.5892764 0.8786186 0.1834149 0.2253880 0.6841913\n [6] 0.7100167 1.0000000 0.6619472 0.8122758 0.7503197\n[11] 0.8747194 0.9200356 0.3260795 0.4977326 0.9207003\n[16] 0.1060934 0.0000000 0.7141339 0.6870273 0.5864546\n[21] 0.9021185 0.9929281 0.9404653 0.6315495\n\n$Izmir$day21$NO2\n [1] 0.5421077 0.6278702 0.0000000 0.2897729 0.7549073\n [6] 0.6129315 0.2126845 0.8820002 0.6756007 0.3935481\n[11] 0.5520271 0.5663707 0.4721837 0.5018927 0.5108137\n[16] 0.7195854 0.8072798 0.6916977 1.0000000 0.7093560\n[21] 0.6324311 0.7661628 0.5140622 0.7382349\n\n$Izmir$day21$SO2\n [1] 1.00000000 0.45762309 0.76212112 0.51470339 0.32533970\n [6] 0.78643655 0.62113853 0.43097998 0.94030875 0.05364689\n[11] 0.49321364 0.45754063 0.47655479 0.53832327 0.96484995\n[16] 0.00000000 0.76279103 0.32228939 0.73950341 0.39897580\n[21] 0.71978519 0.45423248 0.35902085 0.20762998\n\n\n$Izmir$day22\n$Izmir$day22$PM25\n [1] 0.2891288 0.4482374 0.5290891 0.6681340 0.5200896\n [6] 0.8481414 0.2283996 0.6782973 0.7689895 0.6671146\n[11] 0.5068572 0.4125199 0.1858488 0.1522463 0.7143306\n[16] 0.4594573 0.1596072 0.6683966 0.7371387 0.0000000\n[21] 1.0000000 0.8488093 0.2217835 0.3376052\n\n$Izmir$day22$NO2\n [1] 0.35167667 0.38686457 0.03626615 0.16104937 1.00000000\n [6] 0.51608014 0.61822847 0.12580344 0.23533653 0.00000000\n[11] 0.38641934 0.29336966 0.82595273 0.23296216 0.30711300\n[16] 0.09248730 0.35663538 0.12796209 0.07055699 0.28120633\n[21] 0.10102895 0.11023128 0.41963758 0.55021268\n\n$Izmir$day22$SO2\n [1] 0.76280270 0.49082964 0.52076427 0.25674687 0.58426713\n [6] 0.80316233 0.19005834 0.80333087 0.29030149 0.62628647\n[11] 0.06045852 0.54568719 0.90023273 0.46809464 0.00000000\n[16] 1.00000000 0.23671808 0.18737890 0.30093963 0.18269301\n[21] 0.55380377 0.59609686 0.38009014 0.74828603\n\n\n$Izmir$day23\n$Izmir$day23$PM25\n [1] 0.469525978 0.005343144 0.527066422 0.000000000\n [5] 0.327017000 0.275969712 0.134586686 0.652623982\n [9] 0.356505849 0.489109455 0.337400035 0.111594056\n[13] 0.505962681 0.135127541 0.578177776 1.000000000\n[17] 0.441909879 0.531137866 0.467217104 0.686194957\n[21] 0.013405026 0.092143010 0.369454115 0.333487493\n\n$Izmir$day23$NO2\n [1] 0.152576982 0.002081645 0.322118732 0.850488440\n [5] 1.000000000 0.648314386 0.035396676 0.626950434\n [9] 0.305007903 0.471791724 0.608952513 0.854171989\n[13] 0.473384740 0.264262670 0.630776289 0.644460075\n[17] 0.665446981 0.725339494 0.511916297 0.204396325\n[21] 0.473093613 0.000000000 0.727090125 0.566059419\n\n$Izmir$day23$SO2\n [1] 0.7535146 0.6216078 0.0000000 0.4338879 0.8123623\n [6] 0.5157178 0.7862327 0.3540198 0.6452397 0.4489050\n[11] 0.4242754 0.5371155 1.0000000 0.6243177 0.6365494\n[16] 0.9700632 0.5123080 0.7084656 0.4062687 0.7889896\n[21] 0.2543221 0.5687789 0.8570274 0.9083480\n\n\n$Izmir$day24\n$Izmir$day24$PM25\n [1] 0.377247696 0.000000000 0.660882166 0.289445950\n [5] 0.509039215 0.113521389 0.318336091 0.658558323\n [9] 0.447579361 0.447680601 0.538489407 0.167884037\n[13] 0.396615289 0.469189253 0.576955823 0.258841059\n[17] 0.429776248 0.500534843 1.000000000 0.651811433\n[21] 0.003137681 0.394232266 0.422707522 0.525415540\n\n$Izmir$day24$NO2\n [1] 0.1459076 0.6845817 0.1479670 0.3351606 0.5598674\n [6] 0.1748741 0.3949943 0.8693218 0.2207435 0.0000000\n[11] 0.5979310 0.1188059 0.2827707 0.5293494 0.5145876\n[16] 0.7427156 0.1522076 0.2668197 0.1589985 0.3163755\n[21] 1.0000000 0.3486399 0.3592000 0.5305332\n\n$Izmir$day24$SO2\n [1] 0.0000000 0.7320437 0.3907157 0.1726286 0.5366553\n [6] 0.3486205 0.3592630 0.3716551 0.9322617 0.2239093\n[11] 0.7322658 0.4658591 0.3167268 0.1930437 0.2865795\n[16] 0.3173380 0.7782596 0.1468504 0.9646818 0.3527969\n[21] 0.1899331 0.1716291 0.4738480 1.0000000\n\n\n$Izmir$day25\n$Izmir$day25$PM25\n [1] 0.36984112 0.41415050 0.51783168 0.46900144 0.19149283\n [6] 0.78780609 0.02298355 0.10931120 0.30394492 0.35116531\n[11] 0.81049007 0.23237597 0.38572104 0.33257063 1.00000000\n[16] 0.94655022 0.08231465 0.59760939 0.00000000 0.16136307\n[21] 0.24666294 0.15507978 0.52593930 0.33918886\n\n$Izmir$day25$NO2\n [1] 0.60813586 0.81758561 0.80430903 0.06888339 0.48097978\n [6] 0.64673864 0.80288757 0.40928246 0.56767777 0.90886106\n[11] 0.58381933 0.96416883 0.03588929 1.00000000 0.00000000\n[16] 0.79568544 0.77984019 0.45251541 0.46360822 0.61932830\n[21] 0.57721780 0.59294747 0.83672183 0.59068757\n\n$Izmir$day25$SO2\n [1] 0.1695039 0.7902380 0.6053076 0.8970014 0.4671216\n [6] 0.6233652 0.3012245 0.3148252 0.2494608 0.6921333\n[11] 0.0000000 1.0000000 0.5232554 0.6897395 0.9858845\n[16] 0.7614463 0.7915930 0.5267615 0.3621900 0.8466175\n[21] 0.6352678 0.6860589 0.4797198 0.5467561\n\n\n$Izmir$day26\n$Izmir$day26$PM25\n [1] 0.1265768 0.2543924 0.2706167 0.5488147 0.3715902\n [6] 0.6626975 0.5919239 0.4851828 0.2637803 0.4506861\n[11] 0.7634278 0.6802398 0.5225014 0.1359908 0.4876337\n[16] 0.0000000 0.9396568 0.5916196 0.8370982 0.5500836\n[21] 1.0000000 0.4051428 0.7524803 0.5826881\n\n$Izmir$day26$NO2\n [1] 0.7266354 0.3553380 1.0000000 0.6498031 0.5052272\n [6] 0.3804859 0.3191355 0.2664909 0.2843645 0.6022731\n[11] 0.7979921 0.6591164 0.2455489 0.6106025 0.8664695\n[16] 0.7786582 0.9286746 0.6709963 0.0000000 0.7113037\n[21] 0.6336399 0.2842290 0.5713073 0.4735374\n\n$Izmir$day26$SO2\n [1] 0.4781415 0.7057184 0.4412213 0.4262810 0.2260430\n [6] 0.6313337 0.7255457 0.7307097 0.8843268 0.0000000\n[11] 0.5967368 0.2565113 0.7399308 0.6083804 0.3225824\n[16] 0.4945395 0.9374935 0.4537658 0.1593281 0.8594516\n[21] 0.8794963 0.4374166 1.0000000 0.5471519\n\n\n$Izmir$day27\n$Izmir$day27$PM25\n [1] 0.02158116 0.37358080 0.57736021 0.68941015 0.62492418\n [6] 0.93440018 0.56884787 0.67279308 0.85781670 0.42439182\n[11] 0.19702200 0.38226775 0.00000000 0.50294282 0.66807384\n[16] 0.10408882 0.16869288 0.08180075 0.47016285 1.00000000\n[21] 0.25479533 0.25629924 0.47566108 0.13014447\n\n$Izmir$day27$NO2\n [1] 0.81488418 0.41679721 0.84997530 0.70136591 0.74837507\n [6] 0.06092565 0.00000000 0.52589051 0.39974873 0.40550872\n[11] 0.47716849 0.99191211 0.36846143 0.32135757 1.00000000\n[16] 0.57567256 0.58134506 0.11657972 0.73455498 0.86134193\n[21] 0.72399028 0.16055325 0.94650447 0.41804389\n\n$Izmir$day27$SO2\n [1] 0.95315201 0.57744582 0.56417404 1.00000000 0.78108952\n [6] 0.57633655 0.23489545 0.69709531 0.66069371 0.30963450\n[11] 0.39014983 0.37481815 0.00000000 0.63592288 0.04249331\n[16] 0.54477864 0.02662617 0.71209747 0.67539013 0.96296923\n[21] 0.12541406 0.71168289 0.39117293 0.50931334\n\n\n$Izmir$day28\n$Izmir$day28$PM25\n [1] 0.5159894 0.6890745 0.3704635 0.4141337 0.7737292\n [6] 0.0000000 0.5455027 0.5097553 0.7582628 0.6923256\n[11] 0.3197591 0.9119687 0.8228072 0.9025453 0.3993618\n[16] 1.0000000 0.8540952 0.8439039 0.3498346 0.5882398\n[21] 0.6417402 0.3167846 0.5603860 0.7647315\n\n$Izmir$day28$NO2\n [1] 0.47641772 0.46120137 0.71030936 0.25541498 0.57522831\n [6] 0.63195787 0.14124947 0.00000000 0.60983659 0.35954054\n[11] 0.90628183 0.47718870 0.40565770 0.05367775 0.24409692\n[16] 0.12645864 1.00000000 0.14692997 0.53974950 0.68854820\n[21] 0.34443632 0.44118222 0.18779788 0.41011229\n\n$Izmir$day28$SO2\n [1] 0.4924722 0.4016709 0.7141840 0.3832961 0.2184476\n [6] 0.7664915 0.6227715 0.2004364 0.4131320 0.7730310\n[11] 0.3451617 0.7553605 0.5002325 0.2478556 0.6849821\n[16] 0.0000000 0.4263199 0.5561221 0.6340943 0.6355019\n[21] 0.6025387 0.8965516 0.9728493 1.0000000\n\n\n$Izmir$day29\n$Izmir$day29$PM25\n [1] 0.02487646 0.17577400 0.04060760 0.29174988 0.50808588\n [6] 0.47273296 0.34771892 0.37040235 0.29185806 0.15957739\n[11] 0.19753780 0.16902197 0.26521836 0.00000000 0.78532141\n[16] 1.00000000 0.02560233 0.79208991 0.45066924 0.42481794\n[21] 0.43429363 0.55346203 0.44752173 0.15949751\n\n$Izmir$day29$NO2\n [1] 0.6911481 0.8519586 0.6094786 0.3936251 0.3004102\n [6] 0.7969676 0.6470343 0.5314504 0.7102555 0.5090137\n[11] 0.6430061 0.7234168 0.2157752 0.4460539 0.3723968\n[16] 0.3908106 1.0000000 0.9194466 0.8278942 0.5800272\n[21] 0.9196485 0.3943406 0.2251470 0.0000000\n\n$Izmir$day29$SO2\n [1] 0.7065791 0.6604009 0.4603980 0.7699376 0.6618277\n [6] 0.5783661 0.9598991 1.0000000 0.9038114 0.7959330\n[11] 0.4092519 0.5914887 0.6408313 0.6877713 0.9220772\n[16] 0.3081074 0.3235575 0.6370468 0.2956612 0.9217851\n[21] 0.6108898 0.0000000 0.5938714 0.7027312\n\n\n$Izmir$day30\n$Izmir$day30$PM25\n [1] 0.22407090 0.07218061 0.46494008 0.83682242 0.31368573\n [6] 0.80194050 0.89128082 0.07271716 0.72678886 0.42777617\n[11] 0.53641850 1.00000000 0.76207171 0.31276593 0.00000000\n[16] 0.57245996 0.62296897 0.83365565 0.89994007 0.52711174\n[21] 0.51239877 0.59629576 0.79369035 0.51235333\n\n$Izmir$day30$NO2\n [1] 0.42759772 0.23211436 0.54595000 0.53745143 0.54206445\n [6] 0.42609576 0.36824407 0.81408742 0.49977504 1.00000000\n[11] 0.31183181 0.00000000 0.49492499 0.80996434 0.49683316\n[16] 0.07790941 0.37069289 0.53046783 0.92528080 0.87208320\n[21] 0.78033074 0.68048195 0.30282191 0.78034135\n\n$Izmir$day30$SO2\n [1] 0.89140240 0.71944037 0.87628697 0.56123968 0.81923424\n [6] 0.95826866 0.10176368 1.00000000 0.72762614 0.70614120\n[11] 0.47798180 0.10655603 0.00000000 0.56073041 0.39930142\n[16] 0.83601813 0.44552925 0.31741890 0.99719748 0.35560427\n[21] 0.20786696 0.69393110 0.99425407 0.09866172\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#map-functioni",
    "href": "presentations/R/apply_function_family.html#map-functioni",
    "title": "Introduction to R",
    "section": "Map function/I",
    "text": "Map function/I\n\nMap(f, ...)\n\nSimilar to mapply, but always returns a list.\nUseful when you want to ensure that the output format is consistent, especially with complex data structures.\n\n# Create a complex random example data\nset.seed(123)  # For reproducibility\nPM25 &lt;- list(Ankara = rnorm(10, mean = 35, sd = 5),\n             Istanbul = rnorm(10, mean = 30, sd = 4),\n             Izmir = rnorm(10, mean = 40, sd = 6))\n\nNO2 &lt;- list(Ankara = rnorm(10, mean = 50, sd = 10),\n            Istanbul = rnorm(10, mean = 45, sd = 7),\n            Izmir = rnorm(10, mean = 55, sd = 8))\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#map-functionii",
    "href": "presentations/R/apply_function_family.html#map-functionii",
    "title": "Introduction to R",
    "section": "Map function/II",
    "text": "Map function/II\n\n\npollution_stats &lt;- Map(\n  function(pm25, no2)\n    list(mean_pm25 = mean(pm25),\n         sd_pm25 = sd(pm25),\n         mean_no2 = mean(no2),\n         sd_no2 = sd(no2)),\n  PM25, NO2)\nclass(pollution_stats)\n\n\n[1] \"list\"\n\n\n\n\n\npollution_stats2 &lt;- mapply(\n  function(pm25, no2) {\n    list(mean_pm25 = mean(pm25),\n         sd_pm25 = sd(pm25),\n         mean_no2 = mean(no2),\n         sd_no2 = sd(no2))\n    },\n  PM25, NO2)\nclass(pollution_stats2)\n\n\n[1] \"matrix\" \"array\" \n\n\n\n\n\nprint(pollution_stats2)\n\n\n          Ankara   Istanbul Izmir   \nmean_pm25 35.37313 30.83449 37.45265\nsd_pm25   4.76892  4.152294 5.584855\nmean_no2  53.22045 44.93899 56.77349\nsd_no2    5.273024 7.577627 6.85156 \n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#reduce-function",
    "href": "presentations/R/apply_function_family.html#reduce-function",
    "title": "Introduction to R",
    "section": "Reduce function",
    "text": "Reduce function\n\nReduce(f, x, init, right = FALSE, accumulate = FALSE)\n\n\nUsed to successively apply a function to elements of a vector or list.\nParticularly useful when you want to progressively reduce a list or vector to a single value by applying a function in a pairwise manner.\n\n\nweekly_AQI &lt;- list(\n    week1 = c(120, 110, 115, 130, 125, 140, 135),\n    week2 = c(128, 122, 118, 135, 140, 145, 130),\n    week3 = c(130, 125, 120, 140, 135, 150, 145)\n)\n(cumulative_product &lt;- Reduce(function(x, y) x * y, weekly_AQI))\n\n[1] 1996800 1677500 1628400 2457000 2362500 3045000 2544750\n\n\nIn this code, function(x, y) x * y is an anonymous function that takes two arguments and returns their product. Reduce applies this function cumulatively to the elements of weekly_AQI.\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#filter-functioni",
    "href": "presentations/R/apply_function_family.html#filter-functioni",
    "title": "Introduction to R",
    "section": "Filter function/I",
    "text": "Filter function/I\n\nFilter(f, x)\n\n\nGreat for extracting elements from a vector or list based on a specified condition.\nIt’s very useful when you want to subset data according to certain criteria.\n\n\ndaily_PM25 &lt;- c(35, 40, 25, 20, 50, 45, 55, 30, 25, 40,\n                60, 20, 30, 35, 40, 45, 25, 50, 55, 60,\n                30, 25, 20, 35, 40, 45, 30, 50, 55, 60)\n\n\n\n(safe_days &lt;- Filter(function(x) x &lt; 40,\n                     daily_PM25))\n\n\n [1] 35 25 20 30 25 20 30 35 25 30 25 20 35 30\n\n\n\nIs there another way?\n\n\n# indices of the values lower than 40\ni &lt;- which(daily_PM25 &lt; 40)\ndaily_PM25[i]\n\n\n [1] 35 25 20 30 25 20 30 35 25 30 25 20 35 30\n\n\n\nor\n\n\ndaily_PM25[which(daily_PM25 &lt; 40)]\n\n\n [1] 35 25 20 30 25 20 30 35 25 30 25 20 35 30\n\n\n\nThen, why do we need Filter function?\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#filter-functionii",
    "href": "presentations/R/apply_function_family.html#filter-functionii",
    "title": "Introduction to R",
    "section": "Filter function/II",
    "text": "Filter function/II\n\n# Create a complex example data\nset.seed(123)  # For reproducibility\n# 3 cities, 10 days, 2 pollutants\nair_quality_data &lt;- list(\n    Ankara = data.frame(day = 1:10, PM25 = rnorm(10, mean = 35, sd = 5),\n                        NO2 = rnorm(10, mean = 50, sd = 10)),\n    Istanbul = data.frame(day = 1:10, PM25 = rnorm(10, mean = 40, sd = 6),\n                          NO2 = rnorm(10, mean = 60, sd = 15)),\n    Izmir = data.frame(day = 1:10, PM25 = rnorm(10, mean = 30, sd = 4),\n                       NO2 = rnorm(10, mean = 45, sd = 7))\n)\n\n\n\n# PM2.5 mean values of all cities\nsapply(air_quality_data,\n       function(df) mean(df$PM25))\n\n\n  Ankara Istanbul    Izmir \n35.37313 37.45265 29.96514 \n\n\n\n\n\n# We want to extract the cities with\n# mean PM2.5 lower than 37\nsafe_cities &lt;- Filter(\n  function(df) mean(df$PM25) &lt; 37,\n  air_quality_data)\n\nnames(safe_cities)\n\n\n[1] \"Ankara\" \"Izmir\" \n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#find-functioni",
    "href": "presentations/R/apply_function_family.html#find-functioni",
    "title": "Introduction to R",
    "section": "Find function/I",
    "text": "Find function/I\n\nFind(f, x, right = FALSE, nomatch = NULL)\n\n\nUsed to locate the first element of a list or vector that satisfies a given condition.\nIt’s quite useful when you want to quickly identify an element that meets certain criteria without having to process the entire dataset.\n\n\n# Toy data\ndaily_PM25 &lt;- list(\n    day1 = 30, day2 = 35, day3 = 40, day4 = 45,\n    day5 = 25, day6 = 50, day7 = 55, day8 = 20\n)\n\n\n\n# Assume the threshold for concern is a \n# PM2.5 level of 50.\n(first_high_day &lt;- Find(function(x) x &gt; 50,\n                        daily_PM25))\n\n\n[1] 55\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#find-functionii",
    "href": "presentations/R/apply_function_family.html#find-functionii",
    "title": "Introduction to R",
    "section": "Find function/II",
    "text": "Find function/II\nA more complex example.\n\n\n# Create a complex example data\nset.seed(123)  # Ensuring reproducibility\nair_quality_data &lt;- list(\n    Ankara = data.frame(\n      day = 1:7,\n      PM25 = rnorm(7, mean = 35, sd = 5)),\n    Istanbul = data.frame(\n      day = 1:7,\n      PM25 = rnorm(7, mean = 40, sd = 6)),\n    Izmir = data.frame(\n      day = 1:7,\n      PM25 = rnorm(7, mean = 30, sd = 4))\n)\nprint(air_quality_data)\n\n\n$Ankara\n  day     PM25\n1   1 32.19762\n2   2 33.84911\n3   3 42.79354\n4   4 35.35254\n5   5 35.64644\n6   6 43.57532\n7   7 37.30458\n\n$Istanbul\n  day     PM25\n1   1 32.40963\n2   2 35.87888\n3   3 37.32603\n4   4 47.34449\n5   5 42.15888\n6   6 42.40463\n7   7 40.66410\n\n$Izmir\n  day     PM25\n1   1 27.77664\n2   2 37.14765\n3   3 31.99140\n4   4 22.13353\n5   5 32.80542\n6   6 28.10883\n7   7 25.72871\n\n\n\n\n\n(first_exceeding_city &lt;- Find(\n  function(df) any(df$PM25 &gt; 45),\n  air_quality_data))\n\n\n  day     PM25\n1   1 32.40963\n2   2 35.87888\n3   3 37.32603\n4   4 47.34449\n5   5 42.15888\n6   6 42.40463\n7   7 40.66410\n\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#position-function",
    "href": "presentations/R/apply_function_family.html#position-function",
    "title": "Introduction to R",
    "section": "Position function",
    "text": "Position function\n\nPosition(f, x, right = FALSE, nomatch = NA_integer_)\n\n\nUsed to find the position or index of the first element in a vector or list that satisfies a specified condition.\nThis is particularly useful when you want to know where in your data a certain criterion is first met, rather than just retrieving the value itself.\n\n\n# Create a complex example data\nset.seed(123)  # For reproducibility\nenvironmental_data &lt;- list(\n    Ankara = data.frame(day = 1:10,\n                        PM25 = rnorm(10, mean = 35, sd = 5),\n                        Temp = rnorm(10, 20),\n                        Humidity = rnorm(10, 60)),\n    Istanbul = data.frame(day = 1:10,\n                          PM25 = rnorm(10, mean = 40, sd = 6),\n                          Temp = rnorm(10, 22),\n                          Humidity = rnorm(10, 65)),\n    Izmir = data.frame(day = 1:10,\n                       PM25 = rnorm(10, mean = 30, sd = 4),\n                       Temp = rnorm(10, 25),\n                       Humidity = rnorm(10, 70)))\n(first_exceeding_city_index &lt;- Position(\n  function(df) mean(df$PM25) &gt; 37, environmental_data))\n\n[1] 2\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#sweep-functioni",
    "href": "presentations/R/apply_function_family.html#sweep-functioni",
    "title": "Introduction to R",
    "section": "sweep function/I",
    "text": "sweep function/I\n\nsweep(x, MARGIN, STATS, FUN = \"-\", check.margin = TRUE, ...)\n\n\nUseful for performing operations on arrays or matrices, such as standardizing data by subtracting the mean and dividing by the standard deviation.\nThis function is often used in data analysis for normalizing or scaling data.\n\n\n\n# Create a complex example data\nset.seed(123)  # For reproducibility\npollution_data &lt;- matrix(\n  rnorm(30), nrow = 10, ncol = 3)\nmycolnames &lt;- c(\"PM2.5\", \"NO2\", \"SO2\")\ncolnames(pollution_data) &lt;- mycolnames\nhead(pollution_data)\n\n\n           PM2.5        NO2        SO2\n[1,] -0.56047565  1.2240818 -1.0678237\n[2,] -0.23017749  0.3598138 -0.2179749\n[3,]  1.55870831  0.4007715 -1.0260044\n[4,]  0.07050839  0.1106827 -0.7288912\n[5,]  0.12928774 -0.5558411 -0.6250393\n[6,]  1.71506499  1.7869131 -1.6866933\n\n\n\nThese values are required for standardization.\n\nmeans &lt;- colMeans(pollution_data)\nsds &lt;- apply(pollution_data, 2, sd)\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#sweep-functionii",
    "href": "presentations/R/apply_function_family.html#sweep-functionii",
    "title": "Introduction to R",
    "section": "sweep function/II",
    "text": "sweep function/II\n\n# Subtract the mean\n(centered_data &lt;- sweep(pollution_data, 2, means, FUN = \"-\"))\n\n             PM2.5         NO2        SO2\n [1,] -0.635101291  1.01545984 -0.6432648\n [2,] -0.304803134  0.15119187  0.2065840\n [3,]  1.484082670  0.19214949 -0.6014456\n [4,] -0.004117253 -0.09793924 -0.3043324\n [5,]  0.054662091 -0.76446310 -0.2004804\n [6,]  1.640439343  1.57829118 -1.2621344\n [7,]  0.386290562  0.28922852  1.2623459\n [8,] -1.339686879 -2.17523912  0.5779320\n [9,] -0.761478496  0.49273394 -0.7135781\n[10,] -0.520287614 -0.68141337  1.6783738\n\n# Divide by the standard deviation\n(standardized_data &lt;- sweep(centered_data, 2, sds, FUN = \"/\"))\n\n             PM2.5         NO2        SO2\n [1,] -0.665875352  0.97821584 -0.6910813\n [2,] -0.319572479  0.14564661  0.2219402\n [3,]  1.555994430  0.18510203 -0.6461534\n [4,] -0.004316756 -0.09434713 -0.3269546\n [5,]  0.057310762 -0.73642490 -0.2153829\n [6,]  1.719927421  1.52040423 -1.3559540\n [7,]  0.405008410  0.27862049  1.3561812\n [8,] -1.404601888 -2.09545793  0.6208920\n [9,] -0.798376211  0.47466195 -0.7666212\n[10,] -0.545498338 -0.65642119  1.8031341\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#sweep-functioniii",
    "href": "presentations/R/apply_function_family.html#sweep-functioniii",
    "title": "Introduction to R",
    "section": "sweep function/III",
    "text": "sweep function/III\nCan’t we do it without sweep function?\n\n(standardized_data2 &lt;- apply(\n  pollution_data, 2, function(x) (x - mean(x)) / sd(x)))\n\n             PM2.5         NO2        SO2\n [1,] -0.665875352  0.97821584 -0.6910813\n [2,] -0.319572479  0.14564661  0.2219402\n [3,]  1.555994430  0.18510203 -0.6461534\n [4,] -0.004316756 -0.09434713 -0.3269546\n [5,]  0.057310762 -0.73642490 -0.2153829\n [6,]  1.719927421  1.52040423 -1.3559540\n [7,]  0.405008410  0.27862049  1.3561812\n [8,] -1.404601888 -2.09545793  0.6208920\n [9,] -0.798376211  0.47466195 -0.7666212\n[10,] -0.545498338 -0.65642119  1.8031341\n\n# Are they equal?\nall.equal(standardized_data, standardized_data2)\n\n[1] TRUE\n\n\nThen, why do we need sweep function?\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#sweep-functioniv",
    "href": "presentations/R/apply_function_family.html#sweep-functioniv",
    "title": "Introduction to R",
    "section": "sweep function/IV",
    "text": "sweep function/IV\n\napply function can ONLY calculate the result in a single step.\nHowever, sweep function allows you to apply different set of operations on each mathematical step. Think that you will need mean of centered_data for another operation.\nAlso, you can keep mean and standard deviation values for later to de-standardize your data.\n\n\n# Get centered data from standardized data\ncentered_data2 &lt;- sweep(standardized_data, 2, sds, FUN = \"*\")\n# Get original data from centered data\noriginal_data &lt;- sweep(centered_data2, 2, means, FUN = \"+\")\n# Are they equal?\nall.equal(original_data, pollution_data)\n\n[1] TRUE\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#negate-functioni",
    "href": "presentations/R/apply_function_family.html#negate-functioni",
    "title": "Introduction to R",
    "section": "Negate function/I",
    "text": "Negate function/I\n\nNegate(f)\n\n\nIt takes a function that tests for a condition and returns a new function that tests for the opposite condition.\n\n\n# We have a function that identifies days with poor\n# air quality based on certain criteria.\nis_poor_air_quality &lt;- function(pm25, no2) {\n    pm25 &gt; 35 && no2 &gt; 50\n}\n# Use Negate to create the OPPOSITE function\nis_good_air_quality &lt;- Negate(is_poor_air_quality)\n\nLet’s test the function with some example data.\n\n# Example data for a week\nair_quality_data &lt;- data.frame(\n    day = 1:7,\n    PM25 = c(30, 40, 36, 38, 50, 33, 45),\n    NO2 = c(45, 55, 60, 48, 53, 49, 52)\n)\nhead(air_quality_data)\n\n  day PM25 NO2\n1   1   30  45\n2   2   40  55\n3   3   36  60\n4   4   38  48\n5   5   50  53\n6   6   33  49\n\n\n\nApply Function family"
  },
  {
    "objectID": "presentations/R/apply_function_family.html#negate-functionii",
    "href": "presentations/R/apply_function_family.html#negate-functionii",
    "title": "Introduction to R",
    "section": "Negate function/II",
    "text": "Negate function/II\n\n# Test the original function\n(poor_quality_days &lt;- apply(\n  air_quality_data, 1,\n  function(x) is_poor_air_quality(x[\"PM25\"], x[\"NO2\"])))\n\n[1] FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE\n\n# Test the negated function\n(good_quality_days &lt;- apply(\n  air_quality_data, 1,\n  function(x) is_good_air_quality(x[\"PM25\"], x[\"NO2\"])))\n\n[1]  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE\n\n\nDo we really need such a function?\n\nprint(is_poor_air_quality) # Original function\n\nfunction(pm25, no2) {\n    pm25 &gt; 35 && no2 &gt; 50\n}\n&lt;bytecode: 0x110fe6e18&gt;\n\nprint(is_good_air_quality) # Negated function\n\nfunction (...) \n!f(...)\n&lt;bytecode: 0x112f32ff8&gt;\n&lt;environment: 0x115520850&gt;\n\n\n\nApply Function family\n\n\n\n\n\n\n\nIntroduction to R"
  },
  {
    "objectID": "presentations/R/xts_package_basics.html#what-is-xts",
    "href": "presentations/R/xts_package_basics.html#what-is-xts",
    "title": "Introduction to R",
    "section": "What is xts?",
    "text": "What is xts?\n\nxts stands for eXtensible Time Series.\nIt’s an R package specifically designed for handling and analyzing time-series data.\nBuilt on top of the zoo package, it inherits all zoo functionalities and adds time-based - indexing and sub-setting, plus some performance optimizations.\n\n\ninstall.packages(\"xts\")\n\n\nlibrary(xts)\n\nLoading required package: zoo\n\n\n\nAttaching package: 'zoo'\n\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n\n\nxts Package"
  },
  {
    "objectID": "presentations/R/xts_package_basics.html#why-do-we-need",
    "href": "presentations/R/xts_package_basics.html#why-do-we-need",
    "title": "Introduction to R",
    "section": "Why do we need?",
    "text": "Why do we need?\nKey Features\n\nTime-based Indexing/Sub-setting/Aggregation/Plotting/Calculations etc…\nEfficient time-based operations (e.g. extracting data for a specific time period)\nDealing with Large datasets\nHandling Irregular Time Series\nMetadata handling\nAutomatic Time Zone Handling\nPeriodicity Recognition\n\nLimitations\n\nHandling of Non-numeric Data: xts primarily handles numeric time series data. Working with non-numeric data types (like strings or factors) can be cumbersome and might require additional data manipulation.\nHandling of Missing Data: xts does not provide any special handling of missing data. It is up to the user to decide how to handle missing data.\nTime Zone Management: Although xts handles time zones, managing time zone conversions and daylight saving time can be complex and may require extra caution and work.\n\n\nxts Package"
  },
  {
    "objectID": "presentations/R/xts_package_basics.html#creating-xts-objectsi",
    "href": "presentations/R/xts_package_basics.html#creating-xts-objectsi",
    "title": "Introduction to R",
    "section": "Creating xts Objects/I",
    "text": "Creating xts Objects/I\n\n\nUsing vector\n\nlibrary(xts)\n\n# Sample data vectors\ndates &lt;- seq(as.Date(\"2023-01-01\"),\n             by = \"days\", length.out = 5)\ntemperature &lt;- c(22, 23, 21, 20, 19)\n\n# Use just temperature vector to create xts object\nxts_object &lt;- xts(\n  temperature,\n  order.by = dates)\ncolnames(xts_object) &lt;- \"Temperature\"\nclass(xts_object)\n\n[1] \"xts\" \"zoo\"\n\nprint(xts_object)\n\n           Temperature\n2023-01-01          22\n2023-01-02          23\n2023-01-03          21\n2023-01-04          20\n2023-01-05          19\n\n\n\nConverting matrix\n\nhumidity &lt;- c(60, 65, 58, 55, 57)\n\n# Create a sample matrix\nsample_matrix &lt;- cbind(\n  temperature, humidity)\nrownames(sample_matrix) &lt;- as.character(dates)\n# Convert the matrix to an xts object\nxts_from_matrix &lt;- as.xts(sample_matrix)\nprint(xts_from_matrix)\n\n           temperature humidity\n2023-01-01          22       60\n2023-01-02          23       65\n2023-01-03          21       58\n2023-01-04          20       55\n2023-01-05          19       57\n\n\n\n\n\nxts Package"
  },
  {
    "objectID": "presentations/R/xts_package_basics.html#creating-xts-objectsii",
    "href": "presentations/R/xts_package_basics.html#creating-xts-objectsii",
    "title": "Introduction to R",
    "section": "Creating xts Objects/II",
    "text": "Creating xts Objects/II\n\n\ndirectly from matrix\n\nsample_matrix &lt;- matrix(\n  c(temperature, humidity),\n  ncol = 2,\n  dimnames = list(\n    dates, c(\"Temperature\", \"Humidity\")))\n# create xts object directly from matrix\nxts_from_matrix &lt;- xts(sample_matrix,\n                       order.by = dates)\nprint(xts_from_matrix)\n\n           Temperature Humidity\n2023-01-01          22       60\n2023-01-02          23       65\n2023-01-03          21       58\n2023-01-04          20       55\n2023-01-05          19       57\n\n\n\nUsing data.frame\n\n# Create a sample data.frame\nsample_df &lt;- data.frame(\n  date = dates,\n  temperature = temperature,\n  humidity = humidity\n)\nprint(sample_df)\n\n        date temperature humidity\n1 2023-01-01          22       60\n2 2023-01-02          23       65\n3 2023-01-03          21       58\n4 2023-01-04          20       55\n5 2023-01-05          19       57\n\n# Create xts object from data.frame\nxts_from_df &lt;- xts(\n  sample_df[, -1], order.by = sample_df$date)\nprint(xts_from_df)\n\n           temperature humidity\n2023-01-01          22       60\n2023-01-02          23       65\n2023-01-03          21       58\n2023-01-04          20       55\n2023-01-05          19       57\n\n\n\n\n\nxts Package"
  },
  {
    "objectID": "presentations/R/xts_package_basics.html#matrix-vs.-xtsi",
    "href": "presentations/R/xts_package_basics.html#matrix-vs.-xtsi",
    "title": "Introduction to R",
    "section": "Matrix vs. xts/I",
    "text": "Matrix vs. xts/I\n\n\n\nMatrix\n\n\ndata(sample_matrix)\nclass(sample_matrix)\n\n[1] \"matrix\" \"array\" \n\nhead(sample_matrix)\n\n               Open     High      Low    Close\n2007-01-02 50.03978 50.11778 49.95041 50.11778\n2007-01-03 50.23050 50.42188 50.23050 50.39767\n2007-01-04 50.42096 50.42096 50.26414 50.33236\n2007-01-05 50.37347 50.37347 50.22103 50.33459\n2007-01-06 50.24433 50.24433 50.11121 50.18112\n2007-01-07 50.13211 50.21561 49.99185 49.99185\n\ncolnames(sample_matrix)\n\n[1] \"Open\"  \"High\"  \"Low\"   \"Close\"\n\n\n\nrownames(sample_matrix)\n\n\n\n2007-01-02 2007-01-03 2007-01-04 2007-01-05 ...\n\n\n\nindex(sample_matrix)\n\n\n\n1 2 3 4 5 6 ... 175 176 177 178 179 180\n\n\n\n\nxts\n\n\nsample.xts &lt;- as.xts(sample_matrix)\nclass(sample.xts)\n\n[1] \"xts\" \"zoo\"\n\nhead(sample.xts)\n\n               Open     High      Low    Close\n2007-01-02 50.03978 50.11778 49.95041 50.11778\n2007-01-03 50.23050 50.42188 50.23050 50.39767\n2007-01-04 50.42096 50.42096 50.26414 50.33236\n2007-01-05 50.37347 50.37347 50.22103 50.33459\n2007-01-06 50.24433 50.24433 50.11121 50.18112\n2007-01-07 50.13211 50.21561 49.99185 49.99185\n\ncolnames(sample.xts)\n\n[1] \"Open\"  \"High\"  \"Low\"   \"Close\"\n\n\n\nrownames(sample.xts)\n\nNULL\n\n\n\nindex(sample.xts)\n\n\n\n2007-01-02 2007-01-03 ... 2007-06-29 2007-06-30\n\n\n\n\n\nxts Package"
  },
  {
    "objectID": "presentations/R/xts_package_basics.html#matrix-vs.-xtsii",
    "href": "presentations/R/xts_package_basics.html#matrix-vs.-xtsii",
    "title": "Introduction to R",
    "section": "Matrix vs. xts/II",
    "text": "Matrix vs. xts/II\n\n\n\nMatrix\n\n\nsample_matrix[31:58,]\n\n\n\n             Open   High    Low  Close\n2007-02-01 50.224 50.414 50.191 50.358\n2007-02-02 50.445 50.535 50.361 50.369\n2007-02-03 50.372 50.469 50.299 50.431\n2007-02-04 50.482 50.555 50.402 50.555\n              ...    ...    ...    ...\n2007-02-25  50.79 50.932  50.79 50.848\n2007-02-26 50.882 50.882 50.755 50.755\n2007-02-27 50.743 50.789 50.619 50.692\n2007-02-28 50.694 50.771 50.599 50.771\n\n\n\nsample_matrix[31:89,]\n\n\n\n             Open   High    Low  Close\n2007-02-01 50.224 50.414 50.191 50.358\n2007-02-02 50.445 50.535 50.361 50.369\n2007-02-03 50.372 50.469 50.299 50.431\n2007-02-04 50.482 50.555 50.402 50.555\n              ...    ...    ...    ...\n2007-03-28 48.331 48.536 48.331 48.536\n2007-03-29 48.592   48.7 48.574   48.7\n2007-03-30 48.746 49.002 48.746 48.935\n2007-03-31 48.956 49.097 48.956 48.975\n\n\n\n\nxts\n\n\nsample.xts['2007-02']\n\n\n\n             Open   High    Low  Close\n2007-02-01 50.224 50.414 50.191 50.358\n2007-02-02 50.445 50.535 50.361 50.369\n2007-02-03 50.372 50.469 50.299 50.431\n2007-02-04 50.482 50.555 50.402 50.555\n              ...    ...    ...    ...\n2007-02-25  50.79 50.932  50.79 50.848\n2007-02-26 50.882 50.882 50.755 50.755\n2007-02-27 50.743 50.789 50.619 50.692\n2007-02-28 50.694 50.771 50.599 50.771\n\n\n\nsample.xts['2007-02/2007-03']\n\n\n\n             Open   High    Low  Close\n2007-02-01 50.224 50.414 50.191 50.358\n2007-02-02 50.445 50.535 50.361 50.369\n2007-02-03 50.372 50.469 50.299 50.431\n2007-02-04 50.482 50.555 50.402 50.555\n              ...    ...    ...    ...\n2007-03-28 48.331 48.536 48.331 48.536\n2007-03-29 48.592   48.7 48.574   48.7\n2007-03-30 48.746 49.002 48.746 48.935\n2007-03-31 48.956 49.097 48.956 48.975\n\n\n\n\n\nxts Package"
  },
  {
    "objectID": "presentations/R/xts_package_basics.html#metadata",
    "href": "presentations/R/xts_package_basics.html#metadata",
    "title": "Introduction to R",
    "section": "Metadata",
    "text": "Metadata\n\n\n\n# Adding and viewing meta-data\nattr(sample.xts, \"description\") &lt;- \"Sample xts data\"\nattributes(sample.xts)\n\n$dim\n[1] 180   4\n\n$dimnames\n$dimnames[[1]]\nNULL\n\n$dimnames[[2]]\n[1] \"Open\"  \"High\"  \"Low\"   \"Close\"\n\n\n$index\n  [1] 1167688800 1167775200 1167861600 1167948000 1168034400\n  [6] 1168120800 1168207200 1168293600 1168380000 1168466400\n [11] 1168552800 1168639200 1168725600 1168812000 1168898400\n [16] 1168984800 1169071200 1169157600 1169244000 1169330400\n [21] 1169416800 1169503200 1169589600 1169676000 1169762400\n [26] 1169848800 1169935200 1170021600 1170108000 1170194400\n [31] 1170280800 1170367200 1170453600 1170540000 1170626400\n [36] 1170712800 1170799200 1170885600 1170972000 1171058400\n [41] 1171144800 1171231200 1171317600 1171404000 1171490400\n [46] 1171576800 1171663200 1171749600 1171836000 1171922400\n [51] 1172008800 1172095200 1172181600 1172268000 1172354400\n [56] 1172440800 1172527200 1172613600 1172700000 1172786400\n [61] 1172872800 1172959200 1173045600 1173132000 1173218400\n [66] 1173304800 1173391200 1173477600 1173564000 1173650400\n [71] 1173736800 1173823200 1173909600 1173996000 1174082400\n [76] 1174168800 1174255200 1174341600 1174428000 1174514400\n [81] 1174600800 1174687200 1174773600 1174856400 1174942800\n [86] 1175029200 1175115600 1175202000 1175288400 1175374800\n [91] 1175461200 1175547600 1175634000 1175720400 1175806800\n [96] 1175893200 1175979600 1176066000 1176152400 1176238800\n[101] 1176325200 1176411600 1176498000 1176584400 1176670800\n[106] 1176757200 1176843600 1176930000 1177016400 1177102800\n[111] 1177189200 1177275600 1177362000 1177448400 1177534800\n[116] 1177621200 1177707600 1177794000 1177880400 1177966800\n[121] 1178053200 1178139600 1178226000 1178312400 1178398800\n[126] 1178485200 1178571600 1178658000 1178744400 1178830800\n[131] 1178917200 1179003600 1179090000 1179176400 1179262800\n[136] 1179349200 1179435600 1179522000 1179608400 1179694800\n[141] 1179781200 1179867600 1179954000 1180040400 1180126800\n[146] 1180213200 1180299600 1180386000 1180472400 1180558800\n[151] 1180645200 1180731600 1180818000 1180904400 1180990800\n[156] 1181077200 1181163600 1181250000 1181336400 1181422800\n[161] 1181509200 1181595600 1181682000 1181768400 1181854800\n[166] 1181941200 1182027600 1182114000 1182200400 1182286800\n[171] 1182373200 1182459600 1182546000 1182632400 1182718800\n[176] 1182805200 1182891600 1182978000 1183064400 1183150800\nattr(,\"tzone\")\n[1] \"\"\nattr(,\"tclass\")\n[1] \"POSIXct\" \"POSIXt\" \n\n$class\n[1] \"xts\" \"zoo\"\n\n$description\n[1] \"Sample xts data\"\n\n\n\n\n# do some math\nsample.xts &lt;- sample.xts * sample_matrix\nattributes(sample.xts)\n\n$index\n  [1] 1167688800 1167775200 1167861600 1167948000 1168034400\n  [6] 1168120800 1168207200 1168293600 1168380000 1168466400\n [11] 1168552800 1168639200 1168725600 1168812000 1168898400\n [16] 1168984800 1169071200 1169157600 1169244000 1169330400\n [21] 1169416800 1169503200 1169589600 1169676000 1169762400\n [26] 1169848800 1169935200 1170021600 1170108000 1170194400\n [31] 1170280800 1170367200 1170453600 1170540000 1170626400\n [36] 1170712800 1170799200 1170885600 1170972000 1171058400\n [41] 1171144800 1171231200 1171317600 1171404000 1171490400\n [46] 1171576800 1171663200 1171749600 1171836000 1171922400\n [51] 1172008800 1172095200 1172181600 1172268000 1172354400\n [56] 1172440800 1172527200 1172613600 1172700000 1172786400\n [61] 1172872800 1172959200 1173045600 1173132000 1173218400\n [66] 1173304800 1173391200 1173477600 1173564000 1173650400\n [71] 1173736800 1173823200 1173909600 1173996000 1174082400\n [76] 1174168800 1174255200 1174341600 1174428000 1174514400\n [81] 1174600800 1174687200 1174773600 1174856400 1174942800\n [86] 1175029200 1175115600 1175202000 1175288400 1175374800\n [91] 1175461200 1175547600 1175634000 1175720400 1175806800\n [96] 1175893200 1175979600 1176066000 1176152400 1176238800\n[101] 1176325200 1176411600 1176498000 1176584400 1176670800\n[106] 1176757200 1176843600 1176930000 1177016400 1177102800\n[111] 1177189200 1177275600 1177362000 1177448400 1177534800\n[116] 1177621200 1177707600 1177794000 1177880400 1177966800\n[121] 1178053200 1178139600 1178226000 1178312400 1178398800\n[126] 1178485200 1178571600 1178658000 1178744400 1178830800\n[131] 1178917200 1179003600 1179090000 1179176400 1179262800\n[136] 1179349200 1179435600 1179522000 1179608400 1179694800\n[141] 1179781200 1179867600 1179954000 1180040400 1180126800\n[146] 1180213200 1180299600 1180386000 1180472400 1180558800\n[151] 1180645200 1180731600 1180818000 1180904400 1180990800\n[156] 1181077200 1181163600 1181250000 1181336400 1181422800\n[161] 1181509200 1181595600 1181682000 1181768400 1181854800\n[166] 1181941200 1182027600 1182114000 1182200400 1182286800\n[171] 1182373200 1182459600 1182546000 1182632400 1182718800\n[176] 1182805200 1182891600 1182978000 1183064400 1183150800\nattr(,\"tzone\")\n[1] \"\"\nattr(,\"tclass\")\n[1] \"POSIXct\" \"POSIXt\" \n\n$class\n[1] \"xts\" \"zoo\"\n\n$description\n[1] \"Sample xts data\"\n\n$dim\n[1] 180   4\n\n$dimnames\n$dimnames[[1]]\nNULL\n\n$dimnames[[2]]\n[1] \"Open\"  \"High\"  \"Low\"   \"Close\"\n\n\n\nNew description metadata is still there.\n\n\n\n\nxts Package"
  },
  {
    "objectID": "presentations/R/xts_package_basics.html#periodicityi",
    "href": "presentations/R/xts_package_basics.html#periodicityi",
    "title": "Introduction to R",
    "section": "Periodicity/I",
    "text": "Periodicity/I\nEstimate the periodicity of a time-series-like object by calculating the median time between observations in days.\n\n\n\np &lt;- periodicity(sample.xts)\nprint(p)\n\nDaily periodicity from 2007-01-02 to 2007-06-30 \n\n\n\n\n# Convert to a different time zone\nsample.xts.tz &lt;- as.xts(sample_matrix, tzone = \"GMT\")\np.tz &lt;- periodicity(sample.xts.tz)\nprint(p)\n\nDaily periodicity from 2007-01-02 to 2007-06-30 \n\n\n\n\n\n\n\nunclass(p)\n\n$difftime\nTime difference of 86400 days\n\n$frequency\n[1] 86400\n\n$start\n[1] \"2007-01-02 EET\"\n\n$end\n[1] \"2007-06-30 EEST\"\n\n$units\n[1] \"days\"\n\n$scale\n[1] \"daily\"\n\n$label\n[1] \"day\"\n\n\n\n\nunclass(p.tz)\n\n$difftime\nTime difference of 86400 days\n\n$frequency\n[1] 86400\n\n$start\n[1] \"2007-01-01 22:00:00 GMT\"\n\n$end\n[1] \"2007-06-29 21:00:00 GMT\"\n\n$units\n[1] \"days\"\n\n$scale\n[1] \"daily\"\n\n$label\n[1] \"day\"\n\n\n\n\n\nxts Package"
  },
  {
    "objectID": "presentations/R/xts_package_basics.html#periodicityii",
    "href": "presentations/R/xts_package_basics.html#periodicityii",
    "title": "Introduction to R",
    "section": "Periodicity/II",
    "text": "Periodicity/II\n\n# Change system time zone information\nSys.setenv(TZ = 'GMT')\n\n\n\n\nunclass(p)\n\n$difftime\nTime difference of 86400 days\n\n$frequency\n[1] 86400\n\n$start\n[1] \"2007-01-01 22:00:00 GMT\"\n\n$end\n[1] \"2007-06-29 21:00:00 GMT\"\n\n$units\n[1] \"days\"\n\n$scale\n[1] \"daily\"\n\n$label\n[1] \"day\"\n\n\n\n\nunclass(p.tz)\n\n$difftime\nTime difference of 86400 days\n\n$frequency\n[1] 86400\n\n$start\n[1] \"2007-01-01 22:00:00 GMT\"\n\n$end\n[1] \"2007-06-29 21:00:00 GMT\"\n\n$units\n[1] \"days\"\n\n$scale\n[1] \"daily\"\n\n$label\n[1] \"day\"\n\n\n\n\n\nActually both xts objects are the same. Just Time-zone information are different.\n\n\nxts Package"
  },
  {
    "objectID": "presentations/R/xts_package_basics.html#time-based-indexing",
    "href": "presentations/R/xts_package_basics.html#time-based-indexing",
    "title": "Introduction to R",
    "section": "Time-based Indexing",
    "text": "Time-based Indexing\nA more complex xts object.\n\n\n\nlibrary(xts)\n\n# Generate sample data\nset.seed(123)  # For reproducibility\ndates &lt;- seq(as.Date(\"2020-01-01\"),\n             by = \"day\", length.out = 730)\ndata &lt;- matrix(rnorm(730*3), ncol = 3)\n\n# Create xts object\nxts_data &lt;- xts(data, order.by = dates)\ncn &lt;- c(\"Temperature\", \"Humidity\", \"WindSpeed\")\ncolnames(xts_data) &lt;- cn\n\n\n\n           Temperature Humidity WindSpeed\n2020-01-01       -0.56    1.739    -0.868\n2020-01-02       -0.23    0.881      0.73\n2020-01-03       1.559   -1.944       0.5\n2020-01-04       0.071      1.4     0.634\n                   ...      ...       ...\n2021-12-27       0.564    0.869    -0.847\n2021-12-28       0.189    1.369     1.008\n2021-12-29      -0.733    0.763    -0.611\n2021-12-30       0.986    0.421     0.333\n\n\nData for the year 2021\n\ndata_2021 &lt;- xts_data[\"2021\"]\n\n\nData for all January months\n\ndata_january &lt;- xts_data[.indexmon(xts_data) == 0]\n\nData from March to April 2021\n\ndata_mar_apr_2021 &lt;- xts_data[\"2021-03/2021-04\"]\n\nData for all Mondays\n\ndata_mondays &lt;- xts_data[.indexwday(xts_data) == 1]\n\nLast day of each month\n\neom_dates &lt;- endpoints(xts_data, on = \"months\")\ndata_eom &lt;- xts_data[eom_dates]\n\nDays when temperature was above 1 standard deviation of the mean\n\nmean_plus_1std &lt;- mean(xts_data$Temperature) + sd(xts_data$Temperature)\nidx &lt;- xts_data$Temperature &gt; mean_plus_1std\nhigh_temp_days &lt;- xts_data[idx]\n\n\n\n\nxts Package"
  },
  {
    "objectID": "presentations/R/xts_package_basics.html#time-alignment-and-merging",
    "href": "presentations/R/xts_package_basics.html#time-alignment-and-merging",
    "title": "Introduction to R",
    "section": "Time alignment and merging",
    "text": "Time alignment and merging\n\n\n\n# First time series\nset.seed(123) # For reproducibility\ndates1 &lt;- seq(as.Date(\"2023-01-01\"),\n              by = \"days\", length.out = 6)\nxts1 &lt;- xts(rnorm(length(dates1)), order.by = dates1)\nprint(xts1)\n\n                  [,1]\n2023-01-01 -0.56047565\n2023-01-02 -0.23017749\n2023-01-03  1.55870831\n2023-01-04  0.07050839\n2023-01-05  0.12928774\n2023-01-06  1.71506499\n\n\n\n\n# Second time series, offset by 2 days\ndates2 &lt;- seq(as.Date(\"2023-01-03\"),\n              by = \"days\", length.out = 6)\nxts2 &lt;- xts(rnorm(length(dates2)), order.by=dates2)\nprint(xts2)\n\n                 [,1]\n2023-01-03  0.4609162\n2023-01-04 -1.2650612\n2023-01-05 -0.6868529\n2023-01-06 -0.4456620\n2023-01-07  1.2240818\n2023-01-08  0.3598138\n\n\n\n\n\n\n\n# Merging the two series\nmerged_xts &lt;- merge(xts1, xts2)\n\n\n\n                  xts1       xts2\n2023-01-01 -0.56047565         NA\n2023-01-02 -0.23017749         NA\n2023-01-03  1.55870831  0.4609162\n2023-01-04  0.07050839 -1.2650612\n2023-01-05  0.12928774 -0.6868529\n2023-01-06  1.71506499 -0.4456620\n2023-01-07          NA  1.2240818\n2023-01-08          NA  0.3598138\n\n\n\n\nThe first two days will only have data from xts1.\nThe next three days will have data from both xts1 and xts2.\nThe last two days will only have data from xts2.\n\n\n\n\nxts Package\n\n\n\n\n\n\n\nxts Package"
  },
  {
    "objectID": "presentations/R/r_packages.html#overview",
    "href": "presentations/R/r_packages.html#overview",
    "title": "Introduction to R",
    "section": "Overview",
    "text": "Overview\nAn R package is essentially a collection of R functions, compiled code, and sample data. It adds extra functionality to R, allows users to perform a wide range of tasks. They are stored in repositories like CRAN (Comprehensive R Archive Network), where users can download and install them as needed.\n\nFunctions and Datasets: Packages usually contain a set of functions to perform specific tasks and sometimes include datasets for examples and testing.\nDocumentation: Each package comes with documentation explaining how to use the functions and data it contains.\nCompiled Code: Some packages include compiled code written in languages like C, C++, or FORTRAN for more efficient computation.\nVignettes: Many packages include vignettes, which are detailed guides and tutorials on how to use the package.\nDependencies: Packages can depend on other packages, meaning they require certain other packages to be installed to function properly.\n\n\nR Packages"
  },
  {
    "objectID": "presentations/R/r_packages.html#installing-new-r-packages",
    "href": "presentations/R/r_packages.html#installing-new-r-packages",
    "title": "Introduction to R",
    "section": "Installing new R packages",
    "text": "Installing new R packages\nR has plenty of packages.\n\ninstall.packages(\"rpart\")\ninstall.packages(\"ggplot2\", \"partykit\")\n\n\nR Packages"
  },
  {
    "objectID": "presentations/R/r_packages.html#some-popular-r-packages",
    "href": "presentations/R/r_packages.html#some-popular-r-packages",
    "title": "Introduction to R",
    "section": "Some popular R packages",
    "text": "Some popular R packages\n\nData Manipulation and Analysis\nGraphics and Visualization\nStatistical and Machine Learning\nSpatial and Time Series Data\nWeb Technologies and APIs\nData Import/Export\nProgramming Tools\n\n\nR Packages"
  },
  {
    "objectID": "presentations/R/r_packages.html#data-manipulation-and-analysis",
    "href": "presentations/R/r_packages.html#data-manipulation-and-analysis",
    "title": "Introduction to R",
    "section": "Data Manipulation and Analysis",
    "text": "Data Manipulation and Analysis\n\ndplyr - A grammar of data manipulation, focused on tools for working with data frames.\nplyr - Tools for splitting, applying, and combining data.\ntidyr - Tools for tidying data: turning messy datasets into structured ones.\nreshape2 - Flexibly reshaping and pivoting data.\ndata.table - Extension of data.frame for fast aggregation and manipulation.\nstringr - Consistent tools for working with strings (i.e., character vectors).\nmagrittr - Provides a mechanism for chaining commands with a new forward-pipe operator, %&gt;%.\nzoo - Functions for time-indexed data.\nMatrix - Sparse and dense matrix classes and methods.\n\n\nR Packages - Some popular R packages"
  },
  {
    "objectID": "presentations/R/r_packages.html#data-manipulation-and-analysis-1",
    "href": "presentations/R/r_packages.html#data-manipulation-and-analysis-1",
    "title": "Introduction to R",
    "section": "Data Manipulation and Analysis",
    "text": "Data Manipulation and Analysis\n\nsurvival - Contains the core survival analysis routines.\ne1071 - Functions for latent class analysis, short time Fourier transform, fuzzy clustering, etc.\nquantmod - Quantitative Financial Modelling Framework.\ntm - Text Mining package.\nrvest - Easily scrape (or harvest) web data.\njsonlite - A robust and quick way to parse JSON files and APIs.\nHmisc - Harrell miscellaneous, many functions for data analysis.\nhaven - Import and export ‘SPSS’, ‘Stata’ and ‘SAS’ files.\nlubridate - Functions to work with dates and times.\nsqldf - Perform SQL selects on R data frames.\n\n\nR Packages - Some popular R packages"
  },
  {
    "objectID": "presentations/R/r_packages.html#data-manipulation-and-analysis-2",
    "href": "presentations/R/r_packages.html#data-manipulation-and-analysis-2",
    "title": "Introduction to R",
    "section": "Data Manipulation and Analysis",
    "text": "Data Manipulation and Analysis\n\nreadxl - Read Excel files (.xls and .xlsx).\nDBI - Defines a common interface between the R and database management systems.\nbroom - Converts statistical objects into tidy data frames.\nforcats - Tools for working with categorical variables (factors).\nmodelr - Functions for modeling that work well with the pipe.\ntidytext - Text mining using dplyr, ggplot2, and other tidy tools.\n\n\nR Packages - Some popular R packages"
  },
  {
    "objectID": "presentations/R/r_packages.html#graphics-and-visualization",
    "href": "presentations/R/r_packages.html#graphics-and-visualization",
    "title": "Introduction to R",
    "section": "Graphics and Visualization",
    "text": "Graphics and Visualization\n\nggplot2 - A system for declaratively creating graphics, based on The Grammar of Graphics.\nleaflet - Create interactive web maps with the JavaScript ‘Leaflet’ library.\nplotly - Create interactive web graphics via ‘plotly.js’.\nscales - Graphical scales map data to aesthetics.\ngridExtra - Provides functions in addition to the grid package.\nlattice - High-level data visualization system inspired by Trellis graphics.\nggvis - Interactive, web-based graphics built with the grammar of graphics.\n\n\nR Packages - Some popular R packages"
  },
  {
    "objectID": "presentations/R/r_packages.html#graphics-and-visualization-1",
    "href": "presentations/R/r_packages.html#graphics-and-visualization-1",
    "title": "Introduction to R",
    "section": "Graphics and Visualization",
    "text": "Graphics and Visualization\n\nhighcharter - A wrapper for the ‘Highcharts’ library.\ndygraphs - Interface to ‘Dygraphs’ interactive time series charting library.\nrgl - 3D visualization using OpenGL.\nggmap - Spatial visualization with Google Maps and OpenStreetMap.\nggraph - Creates graphs based on the grammar of graphics.\nplotrix - Various plotting functions.\nggally - Extension of ggplot2 to facilitate plot creation.\n\n\nR Packages - Some popular R packages"
  },
  {
    "objectID": "presentations/R/r_packages.html#statistical-and-machine-learning",
    "href": "presentations/R/r_packages.html#statistical-and-machine-learning",
    "title": "Introduction to R",
    "section": "Statistical and Machine Learning",
    "text": "Statistical and Machine Learning\n\ncaret - Classification And REgression Training: tools for data splitting, pre-processing, feature selection, etc.\nrandomForest - Classification and regression based on a forest of trees using random inputs.\nglmnet - Lasso and elastic-net regularized generalized linear models.\nnnet - Feed-forward neural networks and multinomial log-linear models.\nMASS - Functions and datasets to support the book Modern Applied Statistics with S.\nxgboost - Extreme Gradient Boosting, which is an efficient implementation of gradient boosting framework.\n\n\nR Packages - Some popular R packages"
  },
  {
    "objectID": "presentations/R/r_packages.html#statistical-and-machine-learning-1",
    "href": "presentations/R/r_packages.html#statistical-and-machine-learning-1",
    "title": "Introduction to R",
    "section": "Statistical and Machine Learning",
    "text": "Statistical and Machine Learning\n\nlme4 - Linear and nonlinear mixed effects models.\nsurvminer - Drawing survival curves using ‘ggplot2’.\nparty - Recursive PARTYtioning for classification and regression trees.\nmboost - Model-Based Boosting.\nbrms - Bayesian regression models using ‘Stan’.\neasystats - Collection of tools for statistical analysis.\n\n\nR Packages - Some popular R packages"
  },
  {
    "objectID": "presentations/R/r_packages.html#spatial-and-time-series-data",
    "href": "presentations/R/r_packages.html#spatial-and-time-series-data",
    "title": "Introduction to R",
    "section": "Spatial and Time Series Data",
    "text": "Spatial and Time Series Data\n\nsp - Classes and methods for spatial data.\nrgdal - Bindings for the ‘Geospatial’ Data Abstraction Library.\nraster - Geographic data analysis and modeling.\nxts - eXtensible Time Series.\nforecast - Forecasting functions for time series and linear models.\nsf - Simple features for handling spatial objects.\ntmap - Thematic maps.\ngeosphere - Spherical trigonometry for geographic applications.\nstargazer - Well-formatted regression and summary statistics tables.\n\n\nR Packages - Some popular R packages"
  },
  {
    "objectID": "presentations/R/r_packages.html#web-technologies-and-apis",
    "href": "presentations/R/r_packages.html#web-technologies-and-apis",
    "title": "Introduction to R",
    "section": "Web Technologies and APIs",
    "text": "Web Technologies and APIs\n\nshiny - Web Application Framework for R.\nhttr - Tools for working with URLs and HTTP.\ncurl - A modern and flexible web client for R.\nXML - Tools for parsing and generating XML within R.\njsonlite - JSON parser/generator.\nRCurl - General network (HTTP/FTP/…) client interface for R.\nplumber - Enables you to create a web API by merely decorating your existing R source code.\ngoogleVis - Interface between R and the Google Chart Tools.\n\n\nR Packages - Some popular R packages"
  },
  {
    "objectID": "presentations/R/r_packages.html#data-importexport",
    "href": "presentations/R/r_packages.html#data-importexport",
    "title": "Introduction to R",
    "section": "Data Import/Export",
    "text": "Data Import/Export\n\nreadr - Read rectangular data.\nRcpp - Seamless R and C++ Integration.\nrJava - Low-level R to Java interface.\nRODBC - ODBC Database Access.\nxlsx - Read, write, format Excel 2007 and Excel 97/2000/XP/2003 files.\nopenxlsx - Simplifies the creation of .xlsx files.\n\n\nR Packages - Some popular R packages"
  },
  {
    "objectID": "presentations/R/r_packages.html#programming-tools",
    "href": "presentations/R/r_packages.html#programming-tools",
    "title": "Introduction to R",
    "section": "Programming Tools",
    "text": "Programming Tools\n\ndevtools - Tools to make developing R packages easier.\nroxygen2 - In-line documentation for R.\ntestthat - Unit testing for R.\npurrr - A functional programming toolkit for R.\ntibble - A modern reimagining of the data frame.\nstringi - Character string processing facilities.\nusethis - Automates repetitive tasks that arise during project setup.\nrlang - Functions for base types and core R and ‘Tidyverse’ features.\npkgdown - Build static html documentation for an R package.\ncovr - Test coverage reports for R.\nprofvis - Interactive visualizations to understand how R spends its time.\n\n\nR Packages - Some popular R packages"
  },
  {
    "objectID": "presentations/R/r_packages.html#reporting",
    "href": "presentations/R/r_packages.html#reporting",
    "title": "Introduction to R",
    "section": "Reporting",
    "text": "Reporting\n\nRMarkdown - Dynamic documents for R.\nknitr - General-purpose tool for dynamic report generation in R.\nrmarkdown - Convert R Markdown documents\n\n\nR Packages - Some popular R packages\n\n\n\n\n\n\n\nIntroduction to R"
  },
  {
    "objectID": "presentations/R/functions.html#what-is-a-function",
    "href": "presentations/R/functions.html#what-is-a-function",
    "title": "Introduction to R",
    "section": "What is a Function?",
    "text": "What is a Function?\n\n&gt; name &lt;- function(arg_1, arg_2, ...) expression\n&gt; return(value)\n\n\nWe already have seen functions.\nmean, sd, mean, summary all of them are base R functions\nand are not different from the functions that you will write.\nThe expression is an R expression, (usually a grouped expression), that uses the arguments, arg i, to calculate a value. The value of the expression is the value returned for the function.\nA call to the function then usually takes the form name(expr_1, expr_2, ...) and may occur anywhere a function call is legitimate.\n\n\n# Create a function to calculate the volume of a cake\nmake_cake &lt;- function(height, radius) pi * (radius ^ 2) * height\ncake1 &lt;- make_cake(0.3, 0.5)\ncake2 &lt;- make_cake(1, 2)\ncat(\"Volume of cake1 is\", cake1, \"m^3 and Volume of cake2 is\", cake2, \"m^3\\n\")\n\nVolume of cake1 is 0.2356194 m^3 and Volume of cake2 is 12.56637 m^3\n\n\n\nWriting your own functions"
  },
  {
    "objectID": "presentations/R/functions.html#functions",
    "href": "presentations/R/functions.html#functions",
    "title": "Introduction to R",
    "section": "Functions",
    "text": "Functions\n\n# Create a function to calculate the volume of a cake\nmake_cake &lt;- function(height = 0.1, radius = 0.5) {\n  cake &lt;- pi * (radius ^ 2) * height\n  return(cake)\n}\n\n\n\ncake1 &lt;- make_cake()\ncat(\"Volume of cake1 is\", cake1, \"m^3\\n\")\n\n\nVolume of cake1 is 0.07853982 m^3\n\n\n\n\n\ncake2 &lt;- make_cake(0.2)\ncat(\"Volume of cake2 is\", cake2, \"m^3\\n\")\n\n\nVolume of cake2 is 0.1570796 m^3\n\n\n\n\n\ncake3 &lt;- make_cake(radius = 2)\ncat(\"Volume of cake3 is\", cake3, \"m^3\\n\")\n\n\nVolume of cake3 is 1.256637 m^3\n\n\n\n\nWriting your own functions"
  },
  {
    "objectID": "presentations/R/functions.html#scope",
    "href": "presentations/R/functions.html#scope",
    "title": "Introduction to R",
    "section": "Scope",
    "text": "Scope\nWhat happens if I define same variable name in and out of a function?\n\nmyfunc &lt;- function() {\n  x &lt;- 20\n  print(x)\n}\nx &lt;- 10\n\n\n\nprint(x)\n\n\n[1] 10\n\n\n\n\n\nmyfunc()\n\n\n[1] 20\n\n\n\n\nWriting your own functions"
  },
  {
    "objectID": "presentations/R/functions.html#calling-functions-in-another-functionsi",
    "href": "presentations/R/functions.html#calling-functions-in-another-functionsi",
    "title": "Introduction to R",
    "section": "Calling functions in another functions/I",
    "text": "Calling functions in another functions/I\n\narea_of_rectangle &lt;- function(height = 1, width = 1) {\n  area &lt;- height * width\n  return(area)\n}\n\narea_of_square &lt;- function(height = 1) {\n  return(area_of_rectangle(height, height))\n}\n\narea_of_triangle &lt;- function(height = 1, width = 1) {\n  return(area_of_rectangle(height, width)/2)\n}\n\n\nWriting your own functions"
  },
  {
    "objectID": "presentations/R/functions.html#calling-functions-in-another-functionsii",
    "href": "presentations/R/functions.html#calling-functions-in-another-functionsii",
    "title": "Introduction to R",
    "section": "Calling functions in another functions/II",
    "text": "Calling functions in another functions/II\n\nvol_of_cube &lt;- function(height = 1, width = 1, depth = 1) {\n  height * width * depth\n}\n\narea_of_rectangle &lt;- function(height = 1, width = 1) {\n  vol_of_cube(height, width)\n}\n\narea_of_square &lt;- function(height = 1) {\n  area_of_rectangle(height, height)\n}\n\narea_of_triangle &lt;- function(height = 1, width = 1) {\n  area_of_rectangle(height, width)/2\n}\n\n\nWriting your own functions"
  },
  {
    "objectID": "presentations/R/functions.html#fibonacci-function",
    "href": "presentations/R/functions.html#fibonacci-function",
    "title": "Introduction to R",
    "section": "Fibonacci function",
    "text": "Fibonacci function\nA function for Fibonacci Sequence\n\nfib &lt;- function(n, last = TRUE) {\n  x &lt;- numeric(n)\n  x[1:2] &lt;- c(1, 1)\n  for (i in 3:n) x[i] &lt;- x[i-1] + x[i-2]\n  if (last) x &lt;- x[n]\n  x\n}\n\nfib2 &lt;- function(n, last = TRUE) {\n  x &lt;- if (last) n else 1:n\n  round(((5 + sqrt(5)) / 10) * (( 1 + sqrt(5)) / 2) ^ (x - 1))\n}\n\nlibrary(microbenchmark)\nmicrobenchmark(fib(30, F), fib2(30, F))\n\nUnit: microseconds\n        expr   min    lq     mean median     uq      max\n  fib(30, F) 2.091 2.132 23.86856  2.173 2.2140 2164.472\n fib2(30, F) 1.312 1.353 10.85967  1.394 1.4555  923.525\n neval\n   100\n   100\n\n\n\nWriting your own functions"
  },
  {
    "objectID": "presentations/R/functions.html#prime-numbers-functioni",
    "href": "presentations/R/functions.html#prime-numbers-functioni",
    "title": "Introduction to R",
    "section": "Prime Numbers function/I",
    "text": "Prime Numbers function/I\nA function that determines if a number is prime or not.\n\nis.prime &lt;- function(x) {\n  x &lt;- x[1] # make sure length of x is 1\n  it.is.prime &lt;- FALSE\n  if(x &gt; 1) {\n    it.is.prime &lt;- TRUE\n    for (i in 2:(x - 1)) {\n      if (x %% i == 0) {\n        it.is.prime &lt;- FALSE\n        break\n      }\n    }\n  }\n  if (x == 2) it.is.prime &lt;- TRUE\n  return(it.is.prime)\n}\n\n\nis.prime(13)\nis.prime(21)\nis.prime(19999999)\n\n\nWriting your own functions"
  },
  {
    "objectID": "presentations/R/functions.html#prime-numbers-functionii",
    "href": "presentations/R/functions.html#prime-numbers-functionii",
    "title": "Introduction to R",
    "section": "Prime Numbers function/II",
    "text": "Prime Numbers function/II\nAnother function for prime number determination. Which one is faster? is.prime or is.prime2?\n\nis.prime2 &lt;- function(x) {\n  x &lt;- x[1] # make sure length of x is 1\n  it.is.prime &lt;- FALSE\n  if (x &gt; 1) {\n    it.is.prime &lt;- TRUE\n    i &lt;- 2:(x - 1)\n    if (any(x %% i == 0)) {\n      it.is.prime &lt;- FALSE\n    }\n  }\n  if (x == 2) it.is.prime &lt;- TRUE\n  return(it.is.prime)\n}\n\n\nWriting your own functions"
  },
  {
    "objectID": "presentations/R/functions.html#prime-numbers-functioniii",
    "href": "presentations/R/functions.html#prime-numbers-functioniii",
    "title": "Introduction to R",
    "section": "Prime Numbers function/III",
    "text": "Prime Numbers function/III\nAnother function for prime number determination. Which one is faster? is.prime or is.prime2?\n\nlibrary(microbenchmark)\nx &lt;- 31\nmicrobenchmark(is.prime(x), is.prime2(x))\n\nUnit: nanoseconds\n         expr  min   lq     mean median   uq     max neval\n  is.prime(x) 2091 2214 26285.10   2214 2337 2382674   100\n is.prime2(x)  615  656 24759.49    697  738 2381608   100\n\n\n\nWriting your own functions"
  },
  {
    "objectID": "presentations/R/functions.html#prime-numbers-functioniv",
    "href": "presentations/R/functions.html#prime-numbers-functioniv",
    "title": "Introduction to R",
    "section": "Prime Numbers function/IV",
    "text": "Prime Numbers function/IV\nA more interesting function for prime number determination. This time we can use vectors to test for prime.\n\nis.prime3 &lt;- function(x) {\n  sapply(x, is.prime2)\n}\n\n\nWriting your own functions"
  },
  {
    "objectID": "presentations/R/functions.html#number-of-primes-below-n",
    "href": "presentations/R/functions.html#number-of-primes-below-n",
    "title": "Introduction to R",
    "section": "Number of Primes below n",
    "text": "Number of Primes below n\nNow write another function calculates number of primes below n.\n\nnprime &lt;- function(n) {\n  sapply(n, function(x) sum(sapply(1:x, is.prime2)))\n}\nnprime(10)\n\n[1] 4\n\nnprime(11:20)\n\n [1] 5 5 6 6 6 6 7 7 8 8\n\n\n\nWriting your own functions\n\n\n\n\n\n\n\nIntroduction to R"
  },
  {
    "objectID": "presentations/R/reading_data_from_files.html#read.tablei",
    "href": "presentations/R/reading_data_from_files.html#read.tablei",
    "title": "Introduction to R",
    "section": "read.table/I",
    "text": "read.table/I\n\n\n\n# Read data from text file\ndt &lt;- read.table(\"data.txt\")\nclass(dt)\n\n\n\n\n[1] \"data.frame\"\n\n\n\n\n\n\n\n\nstr(dt)\n\n'data.frame':   9 obs. of  5 variables:\n $ V1: int  100 200 300 400 500 600 700 800 900\n $ V2: chr  \"a1\" \"a2\" \"a3\" \"a4\" ...\n $ V3: chr  \"b1\" \"b2\" \"b3\" \"b4\" ...\n $ V4: logi  TRUE TRUE FALSE FALSE FALSE TRUE ...\n $ V5: chr  \"x\" \"x\" \"x\" \"y\" ...\n\n\n\n\nhead(dt)\n\n   V1 V2 V3    V4 V5\n1 100 a1 b1  TRUE  x\n2 200 a2 b2  TRUE  x\n3 300 a3 b3 FALSE  x\n4 400 a4 b4 FALSE  y\n5 500 a5 b5 FALSE  y\n6 600 a6 b6  TRUE  y\n\n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?read.table\n\n\n\n\nReading Data from Files"
  },
  {
    "objectID": "presentations/R/reading_data_from_files.html#read.tableii",
    "href": "presentations/R/reading_data_from_files.html#read.tableii",
    "title": "Introduction to R",
    "section": "read.table/II",
    "text": "read.table/II\n\n\n\ndt &lt;- read.table(\"data.txt\")\n\n\n\ndt2 &lt;- read.table(\"data.txt\",\n                  stringsAsFactors = TRUE)\n\n\n\n\n\n\nstr(dt)\n\n'data.frame':   9 obs. of  5 variables:\n $ V1: int  100 200 300 400 500 600 700 800 900\n $ V2: chr  \"a1\" \"a2\" \"a3\" \"a4\" ...\n $ V3: chr  \"b1\" \"b2\" \"b3\" \"b4\" ...\n $ V4: logi  TRUE TRUE FALSE FALSE FALSE TRUE ...\n $ V5: chr  \"x\" \"x\" \"x\" \"y\" ...\n\nhead(dt)\n\n   V1 V2 V3    V4 V5\n1 100 a1 b1  TRUE  x\n2 200 a2 b2  TRUE  x\n3 300 a3 b3 FALSE  x\n4 400 a4 b4 FALSE  y\n5 500 a5 b5 FALSE  y\n6 600 a6 b6  TRUE  y\n\n\n\n\nstr(dt2)\n\n'data.frame':   9 obs. of  5 variables:\n $ V1: int  100 200 300 400 500 600 700 800 900\n $ V2: Factor w/ 9 levels \"a1\",\"a2\",\"a3\",..: 1 2 3 4 5 6 7 8 9\n $ V3: Factor w/ 9 levels \"b1\",\"b2\",\"b3\",..: 1 2 3 4 5 6 7 8 9\n $ V4: logi  TRUE TRUE FALSE FALSE FALSE TRUE ...\n $ V5: Factor w/ 3 levels \"x\",\"y\",\"z\": 1 1 1 2 2 2 1 3 3\n\nhead(dt2)\n\n   V1 V2 V3    V4 V5\n1 100 a1 b1  TRUE  x\n2 200 a2 b2  TRUE  x\n3 300 a3 b3 FALSE  x\n4 400 a4 b4 FALSE  y\n5 500 a5 b5 FALSE  y\n6 600 a6 b6  TRUE  y\n\n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?read.table | ?factor\n\n\n\n\nReading Data from Files"
  },
  {
    "objectID": "presentations/R/reading_data_from_files.html#read.csvi",
    "href": "presentations/R/reading_data_from_files.html#read.csvi",
    "title": "Introduction to R",
    "section": "read.csv/I",
    "text": "read.csv/I\n\n# read csv file as a data.frame\ndt.pm10 &lt;- read.csv(\"pm10.csv\", sep = \";\")\n# or use read.csv2\nclass(dt.pm10) # \"data.frame\"\n\n\n\n\nhead(dt.pm10)\n\n                 Date sta1 sta2 sta3 sta4 sta5\n1 2008-01-01 00:00:00   NA 36.6 56.9   NA 51.6\n2 2008-01-01 01:00:00   NA 30.5 45.8   NA 40.4\n3 2008-01-01 02:00:00   NA 33.3 25.3   NA 78.9\n4 2008-01-01 03:00:00   NA   NA 20.4   NA 39.4\n5 2008-01-01 04:00:00   NA 35.0 35.1   NA 54.6\n6 2008-01-01 05:00:00 18.1 29.5 23.7   NA 24.3\n\n\n\n\nstr(dt.pm10)\n\n'data.frame':   43848 obs. of  6 variables:\n $ Date: chr  \"2008-01-01 00:00:00\" \"2008-01-01 01:00:00\" \"2008-01-01 02:00:00\" \"2008-01-01 03:00:00\" ...\n $ sta1: num  NA NA NA NA NA 18.1 NA 13.1 NA 28.2 ...\n $ sta2: num  36.6 30.5 33.3 NA 35 29.5 17 39.8 43.5 66.5 ...\n $ sta3: num  56.9 45.8 25.3 20.4 35.1 23.7 44 47.2 NA 38.4 ...\n $ sta4: num  NA NA NA NA NA NA NA NA NA NA ...\n $ sta5: num  51.6 40.4 78.9 39.4 54.6 24.3 16.8 NA 49.7 20.3 ...\n\n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?read.csv | ?read.csv2\n\n\n\n\nReading Data from Files"
  },
  {
    "objectID": "presentations/R/reading_data_from_files.html#read.csvii",
    "href": "presentations/R/reading_data_from_files.html#read.csvii",
    "title": "Introduction to R",
    "section": "read.csv/II",
    "text": "read.csv/II\nSet column classes at first. But note that we lost the time information. Why?\n\n# Sys.setenv(TZ='GMT')\ndt.pm10 &lt;- read.csv(\"pm10.csv\", sep = \";\",\n               colClasses = c(\"POSIXct\", \"numeric\", \"numeric\",\n                              \"numeric\", \"numeric\", \"numeric\"))\n\n\nstr(dt.pm10)\n\n'data.frame':   43848 obs. of  6 variables:\n $ Date: POSIXct, format: \"2008-01-01\" ...\n $ sta1: num  NA NA NA NA NA 18.1 NA 13.1 NA 28.2 ...\n $ sta2: num  36.6 30.5 33.3 NA 35 29.5 17 39.8 43.5 66.5 ...\n $ sta3: num  56.9 45.8 25.3 20.4 35.1 23.7 44 47.2 NA 38.4 ...\n $ sta4: num  NA NA NA NA NA NA NA NA NA NA ...\n $ sta5: num  51.6 40.4 78.9 39.4 54.6 24.3 16.8 NA 49.7 20.3 ...\n\nhead(dt.pm10)\n\n        Date sta1 sta2 sta3 sta4 sta5\n1 2008-01-01   NA 36.6 56.9   NA 51.6\n2 2008-01-01   NA 30.5 45.8   NA 40.4\n3 2008-01-01   NA 33.3 25.3   NA 78.9\n4 2008-01-01   NA   NA 20.4   NA 39.4\n5 2008-01-01   NA 35.0 35.1   NA 54.6\n6 2008-01-01 18.1 29.5 23.7   NA 24.3\n\n\n\nReading Data from Files"
  },
  {
    "objectID": "presentations/R/reading_data_from_files.html#read.csviii",
    "href": "presentations/R/reading_data_from_files.html#read.csviii",
    "title": "Introduction to R",
    "section": "read.csv/III",
    "text": "read.csv/III\nBecause dates are not UTC. Daylight saving is a problem.\n\nSys.setenv(TZ='GMT')\ndt.pm10 &lt;- read.csv(\"pm10.csv\", sep = \";\",\n               colClasses = c(\"POSIXct\", \"numeric\", \"numeric\",\n                              \"numeric\", \"numeric\", \"numeric\"))\n# Sys.setenv(TZ='EET')\nhead(dt.pm10)\n\n\n\n                 Date sta1 sta2 sta3 sta4 sta5\n1 2008-01-01 00:00:00   NA 36.6 56.9   NA 51.6\n2 2008-01-01 01:00:00   NA 30.5 45.8   NA 40.4\n3 2008-01-01 02:00:00   NA 33.3 25.3   NA 78.9\n4 2008-01-01 03:00:00   NA   NA 20.4   NA 39.4\n5 2008-01-01 04:00:00   NA 35.0 35.1   NA 54.6\n6 2008-01-01 05:00:00 18.1 29.5 23.7   NA 24.3\n\n\n\ndt.pm10$Date[2135:2140]\n\n[1] \"2008-03-29 22:00:00 GMT\" \"2008-03-29 23:00:00 GMT\"\n[3] \"2008-03-30 00:00:00 GMT\" \"2008-03-30 01:00:00 GMT\"\n[5] \"2008-03-30 02:00:00 GMT\" \"2008-03-30 03:00:00 GMT\"\n\nSys.setenv(TZ = 'EET')\ndt.pm10$Date[2135:2140]\n\n[1] \"2008-03-30 00:00:00 EET\"  \"2008-03-30 01:00:00 EET\" \n[3] \"2008-03-30 02:00:00 EET\"  \"2008-03-30 04:00:00 EEST\"\n[5] \"2008-03-30 05:00:00 EEST\" \"2008-03-30 06:00:00 EEST\"\n\n\n\nReading Data from Files"
  },
  {
    "objectID": "presentations/R/reading_data_from_files.html#read.csv",
    "href": "presentations/R/reading_data_from_files.html#read.csv",
    "title": "Introduction to R",
    "section": "read.csv",
    "text": "read.csv\nAnother approach to date time objects\n\ndt.pm10 &lt;- read.csv(\"pm10.csv\", sep = \";\")\n# read date column as character\ndt.pm10$Date &lt;- strptime(dt.pm10$Date, \"%Y-%m-%d %H:%M:%S\")\n\n\nhead(dt.pm10)\n\n                 Date sta1 sta2 sta3 sta4 sta5\n1 2008-01-01 00:00:00   NA 36.6 56.9   NA 51.6\n2 2008-01-01 01:00:00   NA 30.5 45.8   NA 40.4\n3 2008-01-01 02:00:00   NA 33.3 25.3   NA 78.9\n4 2008-01-01 03:00:00   NA   NA 20.4   NA 39.4\n5 2008-01-01 04:00:00   NA 35.0 35.1   NA 54.6\n6 2008-01-01 05:00:00 18.1 29.5 23.7   NA 24.3\n\ndt.pm10$Date[2135:2141]\n\n[1] \"2008-03-29 22:00:00 EET\"  \"2008-03-29 23:00:00 EET\" \n[3] \"2008-03-30 00:00:00 EET\"  \"2008-03-30 01:00:00 EET\" \n[5] \"2008-03-30 02:00:00 EET\"  \"2008-03-30 03:00:00\"     \n[7] \"2008-03-30 04:00:00 EEST\"\n\n\nThis time you will loose timezone information at daylight saving transitions.\n\nReading Data from Files"
  },
  {
    "objectID": "presentations/R/reading_data_from_files.html#best-practices",
    "href": "presentations/R/reading_data_from_files.html#best-practices",
    "title": "Introduction to R",
    "section": "Best practices",
    "text": "Best practices\n\nDo not struggle with excel files. Save them as .csv, then read.\nOrganize your csv file(s) before read.\nTry to fix all possible error.\nConvert your date-time information to \"%Y-%m-%d %H:%M:%S\" format.\nSave data as .rds file and load it by readRDS function.\nIf you need to read similar multiple files, best create your own function to read.\n\n\nReading Data from Files\n\n\n\n\n\n\n\nIntroduction to R"
  },
  {
    "objectID": "presentations/R/simple_manipulations.html#assignment",
    "href": "presentations/R/simple_manipulations.html#assignment",
    "title": "Introduction to R",
    "section": "Assignment",
    "text": "Assignment\nUse always -&gt; or &lt;- symbol combination if you intend to an assignment\n\n# Assignment\nx &lt;- c(10.4, 5.6, 3.1, 6.4, 21.7)\nassign(\"x\", c(10.4, 5.6, 3.1, 6.4, 21.7))\nc(10.4, 5.6, 3.1, 6.4, 21.7) -&gt; x\ny &lt;- c(x, 0, x) # c is abbreviation for combine\n\n\n\n\nprint(y)\n\n [1] 10.4  5.6  3.1  6.4 21.7  0.0 10.4  5.6  3.1  6.4 21.7\n\n\n\n\n1/x\n\n[1] 0.09615385 0.17857143 0.32258065 0.15625000 0.04608295\n\n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?c | ?assign\n\n\n\n\nSimple Manipulations"
  },
  {
    "objectID": "presentations/R/simple_manipulations.html#vector-arithmetic",
    "href": "presentations/R/simple_manipulations.html#vector-arithmetic",
    "title": "Introduction to R",
    "section": "Vector arithmetic",
    "text": "Vector arithmetic\nThe elementary arithmetic operators: +, -,_*_, / and ^\n\nx ^ 2 # take the square\nsqrt(y) # square root\nx/y\nv &lt;- 2*x + y + 1\nlength(v) # what is the length of v? why?\n\nShorter vectors in the expression are recycled as often as need be (perhaps fractionally) until they match the length of the longest vector.\n\n\n\n\n\n\nSEE ALSO\n\n\n??\"arithmetic operations\" | ?log | ?exp | ?sin | ?cos | ?tan | ?sqrt\n\n\n\n\nSimple Manipulations"
  },
  {
    "objectID": "presentations/R/simple_manipulations.html#vector-arithmetic-1",
    "href": "presentations/R/simple_manipulations.html#vector-arithmetic-1",
    "title": "Introduction to R",
    "section": "Vector arithmetic",
    "text": "Vector arithmetic\nanything else? (max, min, sum, mean, var, std)\n\nsum(x) # sum of values in x vector\nsum(x)/length(x) # calculate mean\nmean(x) # easier mean calculation\nmin(x); max(x)\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?var | ?sd | ?range | ?sort | ?order | ?mean | ?sum | ?summary | ?abs\n\n\n\n\nSimple Manipulations"
  },
  {
    "objectID": "presentations/R/simple_manipulations.html#generate-regular-sequences",
    "href": "presentations/R/simple_manipulations.html#generate-regular-sequences",
    "title": "Introduction to R",
    "section": "Generate regular sequences",
    "text": "Generate regular sequences\n\n\n5:17\n\n\n [1]  5  6  7  8  9 10 11 12 13 14 15 16 17\n\n\n\n\n\n\nseq(-5, 5, by = 0.2)\n\n [1] -5.0 -4.8 -4.6 -4.4 -4.2 -4.0 -3.8 -3.6 -3.4 -3.2 -3.0\n[12] -2.8 -2.6 -2.4 -2.2 -2.0 -1.8 -1.6 -1.4 -1.2 -1.0 -0.8\n[23] -0.6 -0.4 -0.2  0.0  0.2  0.4  0.6  0.8  1.0  1.2  1.4\n[34]  1.6  1.8  2.0  2.2  2.4  2.6  2.8  3.0  3.2  3.4  3.6\n[45]  3.8  4.0  4.2  4.4  4.6  4.8  5.0\n\n\n\n\nseq(length = 51, from = -5, by = 0.2)\n\n [1] -5.0 -4.8 -4.6 -4.4 -4.2 -4.0 -3.8 -3.6 -3.4 -3.2 -3.0\n[12] -2.8 -2.6 -2.4 -2.2 -2.0 -1.8 -1.6 -1.4 -1.2 -1.0 -0.8\n[23] -0.6 -0.4 -0.2  0.0  0.2  0.4  0.6  0.8  1.0  1.2  1.4\n[34]  1.6  1.8  2.0  2.2  2.4  2.6  2.8  3.0  3.2  3.4  3.6\n[45]  3.8  4.0  4.2  4.4  4.6  4.8  5.0\n\n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?seq\n\n\n\n\nSimple Manipulations"
  },
  {
    "objectID": "presentations/R/simple_manipulations.html#repeat-an-object",
    "href": "presentations/R/simple_manipulations.html#repeat-an-object",
    "title": "Introduction to R",
    "section": "Repeat an object",
    "text": "Repeat an object\n\n\n\nrep(x, times = 5)\n\n [1] 10.4  5.6  3.1  6.4 21.7 10.4  5.6  3.1  6.4 21.7 10.4\n[12]  5.6  3.1  6.4 21.7 10.4  5.6  3.1  6.4 21.7 10.4  5.6\n[23]  3.1  6.4 21.7\n\n\n\n\nrep(x, each = 5)\n\n [1] 10.4 10.4 10.4 10.4 10.4  5.6  5.6  5.6  5.6  5.6  3.1\n[12]  3.1  3.1  3.1  3.1  6.4  6.4  6.4  6.4  6.4 21.7 21.7\n[23] 21.7 21.7 21.7\n\n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?rep\n\n\n\n\nSimple Manipulations"
  },
  {
    "objectID": "presentations/R/simple_manipulations.html#logical-vectors",
    "href": "presentations/R/simple_manipulations.html#logical-vectors",
    "title": "Introduction to R",
    "section": "Logical Vectors",
    "text": "Logical Vectors\n\nThe elements of a logical vector can have the values TRUE, FALSE, and NA (for “not available”).\nAlways use TRUE and FALSE, not T and F.\n\n\n\n5 &gt; 10\n\n\n[1] FALSE\n\n\n\n\n\nx &gt; 13\n\n\n[1] FALSE FALSE FALSE FALSE  TRUE\n\n\n\n\n\nas.numeric(x &gt; 13)\n\n\n[1] 0 0 0 0 1\n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?\"Comparison\"\n\n\n\n\nSimple Manipulations"
  },
  {
    "objectID": "presentations/R/simple_manipulations.html#missing-values",
    "href": "presentations/R/simple_manipulations.html#missing-values",
    "title": "Introduction to R",
    "section": "Missing Values",
    "text": "Missing Values\nWhen an element or value is “not available” or a “missing value” in the statistical sense, a place within a vector may be reserved for it by assigning it the special value NA.\n\nz &lt;- c(1:3, NA) # a vector contains an NA\n\n\n\nis.na(z) # which element(s) of z is NA?\n\n\n[1] FALSE FALSE FALSE  TRUE\n\n\n\n\n\nz == NA # wrong way!\n\n\n[1] NA NA NA NA\n\n\n\n\n\n0/0 # meaningless\n\n\n[1] NaN\n\n\n\nis.na(xx) is TRUE both for NA and NaN.\n\n\n\n\n\n\nSEE ALSO\n\n\n?is.na | ?is.finite\n\n\n\n\nSimple Manipulations"
  },
  {
    "objectID": "presentations/R/simple_manipulations.html#character-vectors",
    "href": "presentations/R/simple_manipulations.html#character-vectors",
    "title": "Introduction to R",
    "section": "Character vectors",
    "text": "Character vectors\nthey are denoted by a sequence of characters delimited by the double quote character.\n\n\nlabs &lt;- paste(c(\"X\",\"Y\"), 1:10, sep = \"\")\nprint(labs)\n\n\n [1] \"X1\"  \"Y2\"  \"X3\"  \"Y4\"  \"X5\"  \"Y6\"  \"X7\"  \"Y8\"  \"X9\" \n[10] \"Y10\"\n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?paste | ?paste0\n\n\n\n\nSimple Manipulations"
  },
  {
    "objectID": "presentations/R/simple_manipulations.html#indexing-selecting-and-modifying",
    "href": "presentations/R/simple_manipulations.html#indexing-selecting-and-modifying",
    "title": "Introduction to R",
    "section": "Indexing, selecting and modifying",
    "text": "Indexing, selecting and modifying\n\n\nprint(x) # What was x?\n\n\n[1] 10.4  5.6  3.1  6.4 21.7\n\n\n\n\n\nx[3] &lt;- NA # set 3th element of x to NA\nprint(x)\n\n\n[1] 10.4  5.6   NA  6.4 21.7\n\n\n\n\n\n!is.na(x) # The ones that are not NA\n\n\n[1]  TRUE  TRUE FALSE  TRUE  TRUE\n\n\n\n\n\n(non_na_x &lt;- x[!is.na(x)]) #non-NA values of x\n\n\n[1] 10.4  5.6  6.4 21.7\n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?`[[`\n\n\n\n\nSimple Manipulations"
  },
  {
    "objectID": "presentations/R/simple_manipulations.html#indexing-selecting-and-modifying-1",
    "href": "presentations/R/simple_manipulations.html#indexing-selecting-and-modifying-1",
    "title": "Introduction to R",
    "section": "Indexing, selecting and modifying",
    "text": "Indexing, selecting and modifying\n\n\n# create a random integer array to\n# represent month\nset.seed(2) # set seed for reproducibility\nmonth &lt;- round(runif(30, 1, 12))\n# get month names\n(char_month &lt;- month.abb[month])\n\n\n [1] \"Mar\" \"Sep\" \"Jul\" \"Mar\" \"Nov\" \"Nov\" \"Feb\" \"Oct\" \"Jun\"\n[10] \"Jul\" \"Jul\" \"Apr\" \"Sep\" \"Mar\" \"May\" \"Oct\" \"Dec\" \"Mar\"\n[19] \"Jun\" \"Feb\" \"Aug\" \"May\" \"Oct\" \"Mar\" \"May\" \"Jun\" \"Mar\"\n[28] \"May\" \"Dec\" \"Feb\"\n\n\n\n\n\nwhich(char_month == \"Jun\") # Which are June?\n\n\n[1]  9 19 26\n\n\n\n\n\nwhich(month == 6) # same as above\n\n\n[1]  9 19 26\n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?set.seed | ?runif | ?round | ?which | ?which.max | ?which.min\n\n\n\n\nSimple Manipulations"
  },
  {
    "objectID": "presentations/R/simple_manipulations.html#indexing-selecting-and-modifying-2",
    "href": "presentations/R/simple_manipulations.html#indexing-selecting-and-modifying-2",
    "title": "Introduction to R",
    "section": "Indexing, selecting and modifying",
    "text": "Indexing, selecting and modifying\n\n\n(char_month[1:12]) # select first 12 months\n\n\n [1] \"Mar\" \"Sep\" \"Jul\" \"Mar\" \"Nov\" \"Nov\" \"Feb\" \"Oct\" \"Jun\"\n[10] \"Jul\" \"Jul\" \"Apr\"\n\n\n\n\n\n(char_month[-(1:20)]) # exclude first 20\n\n\n [1] \"Aug\" \"May\" \"Oct\" \"Mar\" \"May\" \"Jun\" \"Mar\" \"May\" \"Dec\"\n[10] \"Feb\"\n\n\n\n\n\n# exclude June from vector\n(char_month[-which(month == 6)])\n\n\n [1] \"Mar\" \"Sep\" \"Jul\" \"Mar\" \"Nov\" \"Nov\" \"Feb\" \"Oct\" \"Jul\"\n[10] \"Jul\" \"Apr\" \"Sep\" \"Mar\" \"May\" \"Oct\" \"Dec\" \"Mar\" \"Feb\"\n[19] \"Aug\" \"May\" \"Oct\" \"Mar\" \"May\" \"Mar\" \"May\" \"Dec\" \"Feb\"\n\n\n\n\nSimple Manipulations"
  },
  {
    "objectID": "presentations/R/simple_manipulations.html#indexing-selecting-and-modifying-3",
    "href": "presentations/R/simple_manipulations.html#indexing-selecting-and-modifying-3",
    "title": "Introduction to R",
    "section": "Indexing, selecting and modifying",
    "text": "Indexing, selecting and modifying\n\n\n# use months and month names together\n# set names of month\nnames(month) &lt;- char_month\nprint(month)\n\n\nMar Sep Jul Mar Nov Nov Feb Oct Jun Jul Jul Apr Sep Mar May \n  3   9   7   3  11  11   2  10   6   7   7   4   9   3   5 \nOct Dec Mar Jun Feb Aug May Oct Mar May Jun Mar May Dec Feb \n 10  12   3   6   2   8   5  10   3   5   6   3   5  12   2 \n\n\n\n\n\n(month[(month == 6)])\n\n\nJun Jun Jun \n  6   6   6 \n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?names | ?colnames | ?rownames\n\n\n\n\nSimple Manipulations\n\n\n\n\n\n\n\nIntroduction to R"
  },
  {
    "objectID": "presentations/R/xts_package.html#data-manipulation-with-xts",
    "href": "presentations/R/xts_package.html#data-manipulation-with-xts",
    "title": "Introduction to R",
    "section": "Data Manipulation with xts",
    "text": "Data Manipulation with xts\n\nIrregularr to Regular time-series\nImputation of missing values\nAggregation in time\nAverages for the same months/days/hours\n\nUsing sapply\nUsing aggregate\nUsing split-Apply-Combine\n\n\n\nData Manipulation with xts"
  },
  {
    "objectID": "presentations/R/complex_data_types.html#atomic-objects",
    "href": "presentations/R/complex_data_types.html#atomic-objects",
    "title": "Introduction to R",
    "section": "Atomic Objects",
    "text": "Atomic Objects\n\nAtomic objects are all of the same type. (numeric, complex, logical, character …)\n\n\n(z &lt;- 0:9)\n\n [1] 0 1 2 3 4 5 6 7 8 9\n\n(digits &lt;- as.character(z))\n\n [1] \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\"\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?as.numeric | ?as.character | ?as.logical | ?as.matrix\n\n\n\n\nComplex Data Types"
  },
  {
    "objectID": "presentations/R/complex_data_types.html#other-types-of-objects",
    "href": "presentations/R/complex_data_types.html#other-types-of-objects",
    "title": "Introduction to R",
    "section": "Other types of objects",
    "text": "Other types of objects\n\nFactors\nMatrices/Arrays\nLists\nData frames (A combination of matrix and List, but columns can be of different types)\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?matrix | ?factor | ?list | ?data.frame\n\n\n\n\nComplex Data Types"
  },
  {
    "objectID": "presentations/R/complex_data_types.html#factors",
    "href": "presentations/R/complex_data_types.html#factors",
    "title": "Introduction to R",
    "section": "Factors",
    "text": "Factors\nA factor is a vector object used to specify a discrete classification (grouping) of the components of other vectors of the same length. R provides both ordered and un-ordered factors.\n\n\noptions(digits = 3) # print only 3 digits\nset.seed(1) # set seed for reproducibility\n# simulate pm10 distribution\npm10 &lt;- 10 ^ rnorm(100, 1.6, 0.27)\n# higher values than 40 ug/m^3\npm10 &lt;- pm10[pm10 &gt; 40]\nregions &lt;- c(\"mar\", \"ege\", \"kdz\", \"ica\",\n             \"akd\", \"dga\", \"gda\")\nreg &lt;- factor(\n  sample(1:length(regions), length(pm10),\n         replace = TRUE))\nlevels(reg) &lt;- regions\nhead(data.frame(reg, pm10), 11)\n\n\n   reg  pm10\n1  ica  44.6\n2  ege 107.3\n3  akd  48.9\n4  ege  53.9\n5  ege  63.0\n6  ege  56.9\n7  kdz 101.9\n8  mar  50.7\n9  ege  80.1\n10 kdz  71.6\n11 gda  66.3\n\n\n\n\n\n# means by region\ntapply(pm10, reg, mean)\n\n\n mar  ege  kdz  ica  akd  dga  gda \n59.5 65.6 65.9 69.6 71.6 69.6 80.2 \n\n\n\n\nComplex Data Types"
  },
  {
    "objectID": "presentations/R/complex_data_types.html#arrays",
    "href": "presentations/R/complex_data_types.html#arrays",
    "title": "Introduction to R",
    "section": "Arrays",
    "text": "Arrays\n\nVectors are one dimensional (Single type)\nMatrices and data frames are two dimensional (Single type)\nArrays can hold more dimensions. (Single type)\n\n\narr3d &lt;- array(1:24, dim = c(4, 3, 2),\n                dimnames = list(\n                  c(\"one\", \"two\", \"three\", \"four\"),\n                  c(\"ein\", \"zwei\", \"drei\"),\n                  c(\"un\", \"deux\")))\nmat &lt;- matrix(1:12, nrow = 4, byrow = TRUE,\n              dimnames = list(\n                c(\"one\", \"two\", \"three\", \"four\"),\n                c(\"ein\", \"zwei\", \"drei\")))\n\n\nclass(arr3d); class(mat) # class of object\nlength(arr3d); length(mat) # length of object\ndim(arr3d); dim(mat) # dimensions\nnrow(arr3d); nrow(mat) # number of rows\nncol(arr3d); ncol(mat) # number of columns\nrownames(arr3d); rownames(mat)\ncolnames(arr3d); colnames(mat)\ndimnames(arr3d); dimnames(mat)\n\n\nComplex Data Types"
  },
  {
    "objectID": "presentations/R/complex_data_types.html#lists",
    "href": "presentations/R/complex_data_types.html#lists",
    "title": "Introduction to R",
    "section": "Lists",
    "text": "Lists\n\nAn object consisting of an ordered collection of objects\nThere is no particular need for the components to be of the same mode or type\n\n\n\n# Define/create a list object\nLst &lt;- list(name = \"John\",\n            wife = \"Mary\",\n            no.children = 3,\n            child.ages = c(4,7,9))\nstr(Lst)\n\n\nList of 4\n $ name       : chr \"John\"\n $ wife       : chr \"Mary\"\n $ no.children: num 3\n $ child.ages : num [1:3] 4 7 9\n\n\n\n\n\nLst$name # equal to Lst[[1]]\nLst[[4]] # equal to Lst$child.ages\nLst[[\"wife\"]] # same as Lst$wife\n\n\n[1] \"John\"\n[1] 4 7 9\n[1] \"Mary\"\n\n\n\n\n\nnames(Lst)\n\n\n[1] \"name\"        \"wife\"        \"no.children\" \"child.ages\" \n\n\n\n\nComplex Data Types"
  },
  {
    "objectID": "presentations/R/complex_data_types.html#data-frames",
    "href": "presentations/R/complex_data_types.html#data-frames",
    "title": "Introduction to R",
    "section": "Data frames",
    "text": "Data frames\n\n\n# Create a data.frame object\ndf &lt;- data.frame(pm10 = pm10, region = reg)\nstr(df)\n\n\n'data.frame':   53 obs. of  2 variables:\n $ pm10  : num  44.6 107.3 48.9 53.9 63 ...\n $ region: Factor w/ 7 levels \"mar\",\"ege\",\"kdz\",..: 4 2 5 2 2 2 3 1 2 3 ...\n\n\n\n\n\nhead(df)\n\n\n   pm10 region\n1  44.6    ica\n2 107.3    ege\n3  48.9    akd\n4  53.9    ege\n5  63.0    ege\n6  56.9    ege\n\n\n\n\n\n\n\n\n\nSEE ALSO\n\n\n?list | ?str | ?as.data.frame\n\n\n\n\nComplex Data Types\n\n\n\n\n\n\n\nIntroduction to R"
  }
]